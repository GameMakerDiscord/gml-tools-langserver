{
    "keyboard_check": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to check the down state of."
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x -= 5;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_check(key);",
        "function": "keyboard_check",
        "documentation": "With this function you can check to see if a key is held down or not. Unlike the [keyboard\\_check\\_pressed](www.google.com) or [keyboard\\_check\\_released](keyboard_check_released.html) functions which are only triggered once when the key is pressed or released, this function is triggered every step that the key is held down for.",
        "return": "Boolean"
    },
    "vertex_format_begin": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_colour();<br> vertex_format_add_position();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_begin();",
        "function": "vertex_format_begin",
        "documentation": "Before you can define your new vertex format you must tell _GameMaker Studio 2_ that you're doing so using this function. You must call this first, then define the format values using the appropriate functions, and finally call [vertex\\_format\\_end](vertex_format_end.html) to finish the definition and return the new format \"handle\".",
        "return": "N/A"
    },
    "sha1_file": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The file to generate the sha1 hash for."
            }
        ],
        "example": {
            "code": "hash = sha1_file(working_directory + \"game_data.ini\")",
            "description": ""
        },
        "signature": "sha1_file(filename)",
        "function": "sha1_file",
        "documentation": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States _National Security Agency_ and is employed in several widely used applications popular **Git** where it is used to check for file changes, and the protocols TLS and SSL, PGP, SSH, S/MIME, and IPsec. This function will take an input file and return a 160 bit message digest in ASCII format unique to that file to be used for integrity verification at any later date.",
        "return": "String"
    },
    "physics_particle_group_get_x": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "xx = physics_particle_group_get_x(group1);<br> yy = physics_particle_group_get_y(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_x(group)",
        "function": "physics_particle_group_get_x",
        "documentation": "With this function you can retrieve the x position in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "tilemap_set_mask": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to set the mask of"
            },
            {
                "label": "mask",
                "documentation": "The mask value"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mask = tile_mirror | tile_flip | tile_rotate | 255;<br> tilemap_set_mask(map_id, mask);<br>",
            "description": ""
        },
        "signature": "tilemap_set_mask(tilemap_element_id, mask)",
        "function": "tilemap_set_mask",
        "documentation": "",
        "return": "N/A"
    },
    "sprite_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to check."
            }
        ],
        "example": {
            "code": "if sprite_exists(spr_array[0])<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;sprite_index = spr_array[0];<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;sprite_index = spr_BaseSprite;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_exists(index);",
        "function": "sprite_exists",
        "documentation": "This function returns whether a sprite with the specified index exists or not. Please note, that the value used for checking _must have been initialised previously_ or else you will get an error causing _GameMaker Studio 2: Studio_ to close.",
        "return": ""
    },
    "string_count": {
        "parameters": [
            {
                "label": "substr",
                "documentation": "The substring to check the string for."
            },
            {
                "label": "str",
                "documentation": "The string to check."
            }
        ],
        "example": {
            "code": "str1 = \"Hello World\";<br> ocount = string_count( \"o\", str1 );<br>",
            "description": ""
        },
        "signature": "string_count(substr, str);",
        "function": "string_count",
        "documentation": "This function will return the amount of times the given substring appears within a specific string. In this way you can check for how many times a single letter or a phrase is repeated in a section of stored text.",
        "return": "Real"
    },
    "audio_listener_orientation": {
        "parameters": [
            {
                "label": "lookat_x",
                "documentation": "The x look vector (default 0)."
            },
            {
                "label": "lookat_y",
                "documentation": "The y look vector (default 0)."
            },
            {
                "label": "lookat_z",
                "documentation": "The z look vector (default 1000)."
            },
            {
                "label": "up_x",
                "documentation": "The x up vector (default 0)."
            },
            {
                "label": "up_y",
                "documentation": "The y up vector (default 1)."
            },
            {
                "label": "up_z",
                "documentation": "The z up vector (default 0)."
            }
        ],
        "example": {
            "code": "xt = x + cos(degtorad(direction));<br> yt = y - sin(degtorad(direction));<br> zt = z - sin(degtorad(zdirection));<br> d3d_set_projection(x, y, z, xt, yt, zt, 0, 0, 1);<br> audio_listener_position(x, y, z)<br> audio_listener_orientation(xt, yt, zt, 0, 0, 1)<br>",
            "description": ""
        },
        "signature": "audio_listener_orientation(lookat_x, lookat_y, lookat_z, up_x, up_y, up_z);",
        "function": "audio_listener_orientation",
        "documentation": "With this function you can change the orientation of the _listener_ within the 3D audio space. The **look at** direction and **up** direction are based on the vectors that are resolved from the given relative x, y and z positions, and default to (0, 0, 1000) for the look at direction and (0, 1, 0) for the up direction, as shown in the illustration below: ![](audio_orientation_base.png)",
        "return": "N/A"
    },
    "gamepad_get_description": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad \"slot\" to get the name of."
            }
        ],
        "example": {
            "code": "var gp_num = gamepad_get_device_count();<br> for (var i = 0; i &lt; gp_num; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if gamepad_is_connected(i)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_text(32, 32 + (i * 32), gamepad_get_description(i));<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_text(32, 32 + (i * 32), \"No Gamepad Connected\");<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_get_description(device);",
        "function": "gamepad_get_description",
        "documentation": "This function will return a string with the description of the given gamepad, for example, a PS3 controller may return a string similar to \"PLAYSTATION(R)3 Controller\", or an XBox360 controller could return \"Xbox 360 Controller (XInput STANDARD GAMEPAD)\". This string is hardware dependant and the returned value will depend on the gamepad plugged into the device \"slot\" that is being checked.",
        "return": "String"
    },
    "draw_sprite": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The sub-image (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            }
        ],
        "example": {
            "code": "draw_sprite(sprite_index, image_index, x, y);<br> draw_sprite(spr_Halo, 0, x, y-32);",
            "description": ""
        },
        "signature": "draw_sprite(sprite, subimg, x, y);",
        "function": "draw_sprite",
        "documentation": "This function draws the given sprite and sub-image at a position within the game room. For the sprite you can use the instance variable [sprite_index](../../instances/instance_variables/sprite_index.html) to get the current sprite that is assigned to the instance running the code, or you can use any other sprite asset. The same goes for the sub-image, as this can also be set to the instance variable [image_index](../../instances/instance_variables/image_index.html) which will set the sub-image to that selected for the current instance sprite (note, that you can draw a different sprite and still use the sub-image value for the current instance), or you can use any other value for this to draw a specific sub-image of the chosen sprite. If the value is larger than the number of sub-images, then _GameMaker Studio 2_ will automatically loop the number to select the corresponding image (for example, if the sprite being drawn has 5 sub-images numbered 0 to 4 and we set the index value to 7, then the function will draw sub-image 3, numbered 0). Finally, the x and y position is the position within the room that the sprite will be drawn, and it is centered on the sprite [x offset](../../instances/instance_variables/sprite_xoffset.html) and [y offset](../../instances/instance_variables/sprite_yoffset.html).",
        "return": "N/A"
    },
    "sign": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The number to get the sign of."
            }
        ],
        "example": {
            "code": "y += sign(y - mouse_y);",
            "description": ""
        },
        "signature": "sign(n);",
        "function": "sign",
        "documentation": "This function returns whether a number is positive, negative or neither and returns 1, -1, 0 respectively. For example - sign(458) will return 1, sign(-5) will return -1 and sign(0) will return 0.",
        "return": "Integer"
    },
    "event_object": {
        "parameters": [],
        "example": {
            "code": "global.obj = event_object;",
            "description": ""
        },
        "signature": "event_object;",
        "function": "event_object;",
        "documentation": "This **read-only** variable returns object index of the instance which is running the event being checked.",
        "return": "Real"
    },
    "tilemap_get_y": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the y position of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var _x = tilemap_get_x(map_id);<br> var _y = tilemap_get_y(map_id);<br> tilemap_x(map_id, _x + 10); tilemap_y(map_id, _y + 10);",
            "description": ""
        },
        "signature": "tilemap_get_y(tilemap_element_id);",
        "function": "tilemap_get_y",
        "documentation": "",
        "return": "Real"
    },
    "shader_set": {
        "parameters": [
            {
                "label": "shader",
                "documentation": "The index of the shader to use."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set(shader);",
        "function": "shader_set",
        "documentation": "With this function you can set the drawing target to the given shader and all further drawing will be done using that. You can end shader use with function [shader_reset](shader_reset.html).",
        "return": "N/A"
    },
    "gpu_set_tex_mip_bias_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            },
            {
                "label": "bias",
                "documentation": "The mipmap bias value to use (default: 0)"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_mip_bias_ext(_sampleIndex) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_bias_ext(_sampleIndex, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_mip_bias_ext(sampler_index, bias);",
        "function": "gpu_set_tex_mip_bias_ext",
        "documentation": "With this function you can set the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and then the bias value, where 0 is for no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this function can also take negative values too, in which case shader textures will be sharper over a greater distance the lower the value.",
        "return": "N/A"
    },
    "directory_destroy": {
        "parameters": [
            {
                "label": "dname",
                "documentation": "The name of the directory to remove."
            }
        ],
        "example": {
            "code": "if directory_exists(\"DLC\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;directory_destroy(\"DLC\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "directory_destroy(dname)",
        "function": "directory_destroy",
        "documentation": "This function will remove a directory with the given name in the sandboxed local save area.",
        "return": "N/A"
    },
    "md5_file": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The file to generate the MD5 hash for."
            }
        ],
        "example": {
            "code": "hash = md5_file(working_directory + \"game_data.ini\")",
            "description": ""
        },
        "signature": "md5_file(filename)",
        "function": "md5_file",
        "documentation": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take the given file and generate a unique MD5 for that file which can then be stored for later use.",
        "return": "String"
    },
    "ini_read_string": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section of the .ini to read from."
            },
            {
                "label": "key",
                "documentation": "The key within the relevant section of the .ini to read from."
            },
            {
                "label": "default",
                "documentation": "The string to return if a string is not found in the defined place (or the .ini file does not exist). Must be a string."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> global.name = ini_read_string(\"player\", \"name', \"Player1\");<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ini_read_string(section, key, default);",
        "function": "ini_read_string",
        "documentation": "You can use this function to read a string (text) from an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** \\- **value** pairs. So a typical ini file would look something like this: ![](iniexample.png)",
        "return": "String"
    },
    "date_get_weekday": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to check."
            }
        ],
        "example": {
            "code": "myweekday = date_get_weekday(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_weekday(date);",
        "function": "date_get_weekday",
        "documentation": "This function returns the week day value of the given datetime. This will be a value from 0 to 6.",
        "return": "Real"
    },
    "network_create_server": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of server to create (see the constants listed below)."
            },
            {
                "label": "port",
                "documentation": "The port that the server will use."
            },
            {
                "label": "max_client",
                "documentation": "The maximum number of clients that can connect at once."
            }
        ],
        "example": {
            "code": "var port = 6510;<br> server = network_create_server(network_socket_tcp, port, 32);<br> while (server &lt; 0 &amp;&amp; port &lt; 65535)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;port++<br> &nbsp;&nbsp;&nbsp;server = network_create_server(network_socket_tcp, port, 32);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "network_create_server(type, port, max_client);",
        "function": "network_create_server",
        "documentation": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU wonï¿½t be able to handle the processing of that number of players, so use with care). The function returns a unique _id_ which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
        "return": "Real"
    },
    "url_open_ext": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The URL (website address) to link to."
            },
            {
                "label": "target",
                "documentation": "This is the target area to open the URL in."
            }
        ],
        "example": {
            "code": "url_open_ext( 'http://yoyogames.com', '_blank');",
            "description": ""
        },
        "signature": "url_open_ext(url, target);",
        "function": "url_open_ext",
        "documentation": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The \"target\" parameter that you specify is the same as the standard JavaScript \"name\" value when you use the open() method, and you should be aware that all but '_self' may result in the browser blocking, or asking the user if they wish to allow it.  \n  \nValid targets are:",
        "return": "N/A"
    },
    "cloud_synchronise": {
        "parameters": [],
        "signature": "cloud_synchronise();",
        "function": "cloud_synchronise",
        "documentation": "This function would normally be called at the start of a new game and is used to retrieve the current status of the cloud service at game start up. The function returns a unique **id** value which would then be used in the [Asynchronous Cloud Event](../../../2_interface/1_editors/events/async_events.html) to retrieve the relevant information from the ds_map that is created.",
        "return": "Real"
    },
    "audio_group_set_gain": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index of the audio group to stop (as defined in the Audio Groups Window)"
            },
            {
                "label": "volume",
                "documentation": "The final value for the group volume."
            },
            {
                "label": "time",
                "documentation": "The length of the change in gain in milliseconds."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_group_set_gain(audiogroup1, 0, 5000);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_group_set_gain(groupID, volume, time);",
        "function": "audio_group_set_gain",
        "documentation": "With this function you can fade a group of sounds in or out over a given length of time, or it can be used to set the group gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the group to have reached by the end of that time. This gain can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. To instantly change the gain, simply set the time argument to 0. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
        "return": "N/A"
    },
    "keyboard_set_map": {
        "parameters": [
            {
                "label": "key1",
                "documentation": "This is the key that key1 is to be mapped to"
            },
            {
                "label": "key2",
                "documentation": "This is the key that is to be mapped"
            }
        ],
        "example": {
            "code": "keyboard_set_map(ord(\"A\"), vk_left);<br>",
            "description": ""
        },
        "signature": "keyboard_set_map(key1, key2);",
        "function": "keyboard_set_map",
        "documentation": "Sometimes when making a game you may wish one key to do the same as another. For example many people use the keys WASD for movement, but then many people _also_ use the arrow keys! So, what to do? Well, you _could_ code the movement system twice, but that is a bit complicated and thankfully redundant as this function permits you to \"map\" one key to another and so any input from either key will be interpreted as the same. To do this you choose a key that you want to map (key2 - this will be the key that you write the code for) and a key that you want it to be mapped _to_ (key1). After that, keypresses to either key will be interpreted by _GameMaker Studio 2_ as coming from key2. You can also use this function to design a system where the user can define their own keys for playing by simply mapping the user input key to the key that you have coded into the game.",
        "return": "Boolean"
    },
    "ds_map_size": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if ds_map_size(inventory) &gt; 49<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;full = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_size(id);",
        "function": "ds_map_size",
        "documentation": "With this function you can find how many key/values pairs the (previously created) ds_map contains.",
        "return": "Real"
    },
    "path_delete": {
        "parameters": [],
        "example": {
            "code": "var t_path;<br> t_path = path_add();<br> if mp_grid_path(grid, t_path, x, y, obj_Player.x, obj_Player.y, 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_assign(mypath, t_path);<br> &nbsp;&nbsp;&nbsp;}<br> path_delete(t_path);<br>",
            "description": ""
        },
        "signature": "path_delete(index);",
        "function": "path_delete",
        "documentation": "You can use this code to remove a path from memory. If this path has been created dynamically using [path_add](path_add.html), the variable that holds the path index will no longer be valid for accessing the path as it no longer exists, and if the path was created using the [Path Editor](../../../../2_interface/1_editors/paths.html) that path can no longer be accessed in the _whole game_ as you are permanently deleting it.",
        "return": "N/A"
    },
    "ds_list_create": {
        "parameters": [],
        "example": {
            "code": "list = ds_list_create();",
            "description": ""
        },
        "signature": "ds_list_create();",
        "function": "ds_list_create",
        "documentation": "This function will create a new list data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the list.",
        "return": "Real"
    },
    "layer_get_all_elements": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the elements from (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "var a = layer_get_all_elements(layer);<br> for (var i = 0; i &lt; array_length_1d(a); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if layer_get_element_type(a[i]) == layerelementtype_sprite<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_sprite_destroy(a[i])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_all_elements(layer_id)",
        "function": "layer_get_all_elements",
        "documentation": "You can use this function to get the _element IDs_ of the given layer. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function will return an array of IDs, where each entry in the array is a unique ID for an element on that layer. For example, if the layer is an Asset Layer, the array will be populated with the ID values for each sprite asset that is assigned to the layer. Note that using code to work with layers means that you can assign different element types to the same layer - so you can have sprite assets along with instances, for example - in which case you can then use the function [layer\\_get\\_element_type](layer_get_element_type.html) to get the type of element the ID relates to.",
        "return": "Array (1D, populated with Element IDs)"
    },
    "shader_set_uniform_f": {
        "parameters": [
            {
                "label": "handle",
                "documentation": "The handle of the shader constant to set."
            },
            {
                "label": "value1 ... value4",
                "documentation": "The floating point value (or values) to set the shader constant to."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> shader_params = shader_get_uniform(shader_glass, \"u_vParams\");<br> shader_set_uniform_f(shader_params, 0.1, 0.8, 0.25);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set_uniform_f(handle, value1 [, value2, value3, value4]);",
        "function": "shader_set_uniform_f",
        "documentation": "With this function you can set the value (or values) of a shader constant. You must previously have gotten the \"handle\" of the constant using the function [shader\\_get\\_uniform](shader_get_uniform.html), and you will have to know what type of constant it is to pass the correct number of floating point values through to it, ie: if you have a vec2 you will need to pass two values to the function.",
        "return": "N/A"
    },
    "window_set_fullscreen": {
        "parameters": [
            {
                "label": "full",
                "documentation": "Whether to set the screen to fullscreen (true) or not (false)."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if window_get_fullscreen()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window_set_fullscreen(false);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window_set_fullscreen(true);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_set_fullscreen(full);",
        "function": "window_set_fullscreen",
        "documentation": "",
        "return": "N/A"
    },
    "sprite_width": {
        "parameters": [],
        "example": {
            "code": "if sprite_width != sprite_get_width(sprite_index)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_xscale = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_width;",
        "function": "sprite_width;",
        "documentation": "This **read only** variable returns the width of the sprite that has been assigned to the instance. This width is returned in pixels and will be dependant on the [image_xscale](image_xscale.html). If you need the un-scaled width you should use [sprite\\_get\\_width](../../sprites/sprite_get_width.html).",
        "return": "Real"
    },
    "physics_test_overlap": {
        "parameters": [
            {
                "label": "xpos",
                "documentation": "The x position in the room to check"
            },
            {
                "label": "ypos",
                "documentation": "The y position in the room to check"
            },
            {
                "label": "angle",
                "documentation": "The angle to check (of the calling instance)"
            },
            {
                "label": "obj",
                "documentation": "The object to check for"
            }
        ],
        "example": {
            "code": "if physics_test_overlap(x+20, y-35, 0, obj_Bomb)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ignited = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_test_overlap(xpos, ypos, angle, obj);",
        "function": "physics_test_overlap",
        "documentation": "This function can be used to check and see if a physical body (ie: the fixture of an instance) overlaps, or _will_ overlap, when rotated and placed at a given position in the room. the \"angle\" argument is the angle of rotation that the calling instance has (or will have) at the position to be checked, and the \"obj\" argument can be either a single instance id, and object index or the _keywords_ **all** or **other**.",
        "return": "Boolean."
    },
    "room_add": {
        "parameters": [],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_width(global.myroom, 640);<br> room_set_height(global.myroom, 480);<br> room_set_persistent(global.myroom, false);<br>",
            "description": ""
        },
        "signature": "room_add();",
        "function": "room_add",
        "documentation": "This function will create a new, empty, room and add it to your game, returning its index to be stored in a variable for all further codes that deal with this room. Note that each room is permanently added to the game until the executable is closed, ie: _rooms added through code cannot be deleted again_. This has important implications for memory use and so you should use this function with care.",
        "return": "Index"
    },
    "steam_ugc_create_query_user": {
        "parameters": [
            {
                "label": "list_type",
                "documentation": "The type of data list to create (see constants listed below)."
            },
            {
                "label": "match_type",
                "documentation": "The type of UGC items to query (see constants listed below)."
            },
            {
                "label": "sort_order",
                "documentation": "The way that the data should be ordered (see constants listed below)."
            },
            {
                "label": "page",
                "documentation": "The page number to query."
            }
        ],
        "example": {
            "code": "query_handle = steam_ugc_create_query_user(ugc_list_Published, ugc_match_Items, ugc_sortorder_TitleAsc, 1);",
            "description": ""
        },
        "signature": "steam_ugc_create_query_user(list_type, match_type, sort_order, page);",
        "function": "steam_ugc_create_query_user",
        "documentation": "This function can be used to query the UGC data base. The function automatically uses the default ID for the app, user and assumes that the query is being done by the consumer (rather than the creator). The function requires you to use the following constants for the type of data to query, the type of item to query and the order in which the returned items will be sorted, as well as a page number - note that a query will return a _maximum_ number of 50 items.",
        "return": "Query Handle"
    },
    "steam_ugc_query_set_allow_cached_response": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "cache",
                "documentation": "Whether to have the query check the local cache or not."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1);<br> steam_ugc_query_add_required_tag(query_handle, \"RPG\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": " steam_ugc_query_set_allow_cached_response(ugc_query_handle , cache);",
        "function": " steam_ugc_query_set_allow_cached_response",
        "documentation": "This function can be used to further filter any given UGC query, specifically to request that the query check the local cache rather than online. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is either true or false. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "gamepad_set_button_threshold": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "threshold",
                "documentation": "The new threshold value (from 0 - 1, default 0.5)."
            }
        ],
        "example": {
            "code": "if gamepad_get_button_threshold(0) != 0.5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gamepad_set_button_threshold(0, 0.5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_set_button_threshold(device, threshold);",
        "function": "gamepad_set_button_threshold",
        "documentation": "This function can be used to set the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being \"pressed\" for games that require them to act as a digital button.",
        "return": "N/A"
    },
    "frac": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The number to change."
            }
        ],
        "example": {
            "code": "val = frac(3.4);",
            "description": ""
        },
        "signature": "frac(n);",
        "function": "frac",
        "documentation": "This function returns the fractional part of n, that is, the part behind the decimal dot. It will return _only_ the decimals behind the dot of a value, so frac(3.125) will return 0.125, frac(6.921) will return 0.921, etc...",
        "return": "Real"
    },
    "object_get_visible": {
        "parameters": [],
        "example": {
            "code": "if !visible &amp;&amp; object_get_visible(object_index) visible=true;",
            "description": ""
        },
        "signature": "object_get_visible(obj);",
        "function": "object_get_visible",
        "documentation": "This function will tell you whether the object you are checking has been flagged as \"visible\" (runs its draw event) or not (does not run its draw event). Please note that this is not an instance function! So, you can have a visible object and an invisible instance of the same object and vice-versa. You can set an individual instances visibility using the [visible](../instances/instance_variables/visible.html) instance variable.",
        "return": "Boolean"
    },
    "buffer_base64_decode_ext": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to decode the string into."
            },
            {
                "label": "string",
                "documentation": "The base64 encoded string to decode."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            }
        ],
        "example": {
            "code": "buff = buffer_create(16384, buffer_grow, 2);<br> ini_open(\"Save.ini\");<br> var str = ini_read_string(\"Save\", \"Slot1\", \"\");<br> buffer_base64_decode_ext(buff, str, 0);<br> ini_close();",
            "description": ""
        },
        "signature": "buffer_base64_decode_ext(buffer, string, offset);",
        "function": "buffer_base64_decode_ext",
        "documentation": "With this function you can decode a base64 encoded string (created using the [buffer\\_base64\\_encode()](buffer_base64_encode.html) function) into a buffer. Unlike the function [buffer\\_base64\\_decode()](buffer_base64_decode.html), this will _not_ create a buffer for you, but rather you should already have created the buffer (see [buffer_create](buffer_create.html)), the id of which you would then use with this function. The \"offset\" is the position within the buffer to decode the given string (in bytes).",
        "return": "N/A"
    },
    "virtual_key_add": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate (left side) of the virtual key on the screen"
            },
            {
                "label": "y",
                "documentation": "The y coordinate (top side) of the virtual key on the screen"
            },
            {
                "label": "w",
                "documentation": "The width of the virtual key"
            },
            {
                "label": "h",
                "documentation": "The height of the virtual key"
            },
            {
                "label": "keycode",
                "documentation": "Which keyboard key event should be triggered by touching this area"
            }
        ],
        "example": {
            "code": "global.Left = virtual_key_add(32, 32, 64, 64, vk_left);",
            "description": ""
        },
        "signature": "virtual_key_add(x, y, w, h, keycode);",
        "function": "virtual_key_add",
        "documentation": "This function enables you to map \"touches\" of a screen area to keyboard events. This means that once you have assigned an area to a virtual key, all touches on that area will trigger the keyboard event corresponding to the key you have mapped to the area. You can assign each virtual key you define to a variable too, which can then be used in the further virtual key functions to show, hide and delete them. These keys are assigned on a _per room_ basis and will be automatically removed by _GameMaker Studio 2_ when changing rooms.  \n  \nThe actual position of the virtual key is based on the _screen_ position rather than room position and so the x/y values are absolute on the screen. This means that you don't need to worry about the use of views or the relative room coordinates, and can simply draw your key sprites and define your virtual keys in the [Draw GUI Event](../../../../2_interface/1_editors/events/draw_events.html) of an object.",
        "return": "index of virtual key"
    },
    "draw_sprite_pos": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x1",
                "documentation": "The first x coordinate."
            },
            {
                "label": "y1",
                "documentation": "The first y coordinate."
            },
            {
                "label": "x2",
                "documentation": "The second x coordinate."
            },
            {
                "label": "y2",
                "documentation": "The second y coordinate."
            },
            {
                "label": "x3",
                "documentation": "The third x coordinate."
            },
            {
                "label": "y3",
                "documentation": "The third y coordinate."
            },
            {
                "label": "x4",
                "documentation": "The fourth x coordinate."
            },
            {
                "label": "y4",
                "documentation": "The fourth y coordinate."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_sprite_pos(sprite_index, image_index, x - 100, y - 50, x - 50, y +150, x + 100, y + 200, x + 100, y, 1);",
            "description": ""
        },
        "signature": "draw_sprite_pos(sprite, subimg, x1, y1, x2, y2, x3, y3, x4, y4, alpha);",
        "function": "draw_sprite_pos",
        "documentation": "With this function you can draw a sprite distorted over the area defined by the four corner coordinates. The first two arguments are the sprite to draw and the sub-image of the sprite (the same as in the function [draw_sprite](draw_sprite.html)) but the next ones are those that define the position of each of the four corners of the **bounding box** of the given sprite. These should be given in _clockwise_ order, so the first coordinate is the top left, then the top right, then bottom right and finally the bottom left. You can also set a value for the alpha of the sprite to draw it with transparency. The image below illustrates how this function works: ![](images/spr_pos.png)",
        "return": "N/A"
    },
    "ini_section_delete": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section to delete."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> ini_write_real(\"save1\", \"Score\", score );<br> ini_section_delete(\"save1\");<br> ini_close();",
            "description": ""
        },
        "signature": "ini_section_delete(section);",
        "function": "ini_section_delete",
        "documentation": "With this function you can delete a whole section of an ini file, which will also remove all key-value pairs that are associated with it.",
        "return": "N/A"
    },
    "image_xscale": {
        "parameters": [],
        "example": {
            "code": "if image_xscale &lt; 5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_xscale += 0.2;<br> &nbsp;&nbsp;&nbsp;image_yscale = image_xscale;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Effects\", obj_Explosion);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "image_xscale;",
        "function": "image_xscale;",
        "documentation": "",
        "return": "Real"
    },
    "matrix_build": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x component of the translation vector."
            },
            {
                "label": "y",
                "documentation": "The y component of the translation vector."
            },
            {
                "label": "z",
                "documentation": "The z component of the translation vector."
            },
            {
                "label": "xrotation",
                "documentation": "The angle to rotate around the x-axis."
            },
            {
                "label": "yrotation",
                "documentation": "The angle to rotate around the y-axis."
            },
            {
                "label": "xzotation",
                "documentation": "The angle to rotate around the z-axis."
            },
            {
                "label": "xscale",
                "documentation": "The x scale amount."
            },
            {
                "label": "yscale",
                "documentation": "The y scale amount."
            },
            {
                "label": "zscale",
                "documentation": "The z scale amount."
            }
        ],
        "example": {
            "code": "t_matrix = matrix_build(x, y, 0, 0, 90, 0, 1, 2, 1);",
            "description": ""
        },
        "signature": "matrix_build(x, y, z, xrotation, yrotation, zrotation, xscale, yscale, zscale);",
        "function": "matrix_build",
        "documentation": "This function can be used to create your own custom matrix and will return an index value for this new matrix which should be stored in a variable for future reference and use. The matrix itself is created as 16 value 1D array where the first 4 elements are row 1, the second 4 elements are row 2 etc... of a 4x4 matrix.",
        "return": "4x4 Matrix"
    },
    "physics_set_density": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the id of the bound fixture"
            },
            {
                "label": "density",
                "documentation": "the new density value to apply"
            }
        ],
        "example": {
            "code": "var density = physics_get_density(fix_id);<br> physics_set_density(fix_id, density - 0.1);<br>",
            "description": ""
        },
        "signature": "physics_set_density(fixture, density)",
        "function": "physics_set_density",
        "documentation": "When you bind a fixture to an instance using [physics\\_fixture\\_bind](physics_fixture_bind.html) this returns an \"id\" for the bound fixture. You can use this id to set the density value of the bound fixture, _not_ the \"base\" fixture, at any time using this function.",
        "return": "N/A"
    },
    "sprite_add_from_surface": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to add the new image to."
            },
            {
                "label": "surface",
                "documentation": "The index of the surface from which the get the image."
            },
            {
                "label": "x",
                "documentation": "The x position to copy from."
            },
            {
                "label": "y",
                "documentation": "The y position to copy from."
            },
            {
                "label": "w",
                "documentation": "The width of the area to be copied (from the x position)."
            },
            {
                "label": "h",
                "documentation": "The height of the area to be copied (from the y position)."
            },
            {
                "label": "removeback",
                "documentation": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
            },
            {
                "label": "smooth",
                "documentation": "Indicates whether to smooth the edges."
            }
        ],
        "example": {
            "code": "spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16);<br> var i;<br> for (i = 1; i &lt; 8; i +=1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;sprite_add_from_surface(spr_Custom, surf, i, 0, 32, 32, true, true, 16, 16);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_add_from_surface(index, surface, x, y, w, h, removeback, smooth);",
        "function": "sprite_add_from_surface",
        "documentation": "This function works in exactly the same way as [sprite\\_create\\_from_surface](sprite_create_from_surface.html) only instead of creating a new sprite from the area of the indexed surface that you select, it adds the defined area of the surface as a new sub-image to a previously created sprite.",
        "return": "N/A"
    },
    "ds_grid_set_grid_region": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the destination grid."
            },
            {
                "label": "source",
                "documentation": "The index of the source grid."
            },
            {
                "label": "x1",
                "documentation": "The left position of the region of cells to copy from the source grid."
            },
            {
                "label": "y1",
                "documentation": "The top position of the region of cells to copy from the source grid."
            },
            {
                "label": "x2",
                "documentation": "The right position of the region of cells to copy from the source grid."
            },
            {
                "label": "y2",
                "documentation": "The bottom position of the region of cells to copy from the source grid."
            },
            {
                "label": "xpos",
                "documentation": "The x position on the destination grid to copy the source region to."
            },
            {
                "label": "ypos",
                "documentation": "The y position on the destination grid to copy the source region to."
            }
        ],
        "example": {
            "code": "ds_grid_set_grid_region(grid, t_grid, 0, 0, 5, 5, 10, 10)<br>",
            "description": ""
        },
        "signature": "ds_grid_set_grid_region(index, source, x1, y1, x2, y2, xpos, ypos);",
        "function": "ds_grid_set_grid_region",
        "documentation": "This function can be used to copy the contents of a rectangular area of grid cells from one (previously defined) ds_grid to another, _or_ it can be used to copy a region from within the same grid. The following images illustrate both ways that this function can be used: ![](ds_grid_set_grid_region.png)",
        "return": "N/A"
    },
    "effect_create_above": {
        "parameters": [
            {
                "label": "kind",
                "documentation": "The kind of effect (use one of the constants listed here)."
            },
            {
                "label": "x",
                "documentation": "The x positioning of the effect if relevant."
            },
            {
                "label": "y",
                "documentation": "The y positioning of the effect if relevant."
            },
            {
                "label": "size",
                "documentation": "The size of the effect."
            },
            {
                "label": "colour",
                "documentation": "The colour of the effect."
            }
        ],
        "example": {
            "code": "if health &lt;= 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_explosion, x, y, 1, c_yellow);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "effect_create_above(kind, x, y, size, colour);",
        "function": "effect_create_above",
        "documentation": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other [ef_rain](ef_rain.html) or [ef_snow](ef_snow.html) then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.  \n  \nIt is worth noting that these effects can have their drawing toggled on and off, as well as have their drawing paused, by using the functions [part\\_system\\_automatic_draw](../particle%20systems/part_system_automatic_draw.html) and [part\\_system\\_automatic_update](../particle%20systems/part_system_automatic_update.html) with the appropriate value for the particle system index (where 0 is for effects below and 1 is for effects above).",
        "return": "N/A"
    },
    "physics_fixture_set_awake": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "flag",
                "documentation": "whether a fixture is awake (true) or not (false)"
            }
        ],
        "example": {
            "code": "physics_fixture_set_awake(fix_Cloud, true);",
            "description": ""
        },
        "signature": "physics_fixture_set_awake(fixture, state)",
        "function": "physics_fixture_set_awake",
        "documentation": "When you start a room with physics, or bind fixtures to instances, the fixtures are always considered to be \"awake\"... that is to say, they are processing events and interacting with the surrounding instances. However this can sometimes lead to problems, especially if you have a number of instances with fixtures that are side by side when a room starts (think of a tower made of various instances with fixtures) as with them being \"awake\" they will move and possibly change position due to the sudden start of gravity and collisions affecting them. In these cases you can use this function to flag the fixture as been \"asleep\", in which case it will not be processing anything when it is first created in the room.",
        "return": "N/A"
    },
    "physics_particle_set_category_flags": {
        "parameters": [
            {
                "label": "category",
                "documentation": "The particle category to set."
            },
            {
                "label": "flags",
                "documentation": "The flags to set on the particle."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> physics_particle_set_category_flags(1, flags);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_category_flags(category, flags)",
        "function": "physics_particle_set_category_flags",
        "documentation": "With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function [physics\\_particle\\_create](physics_particle_create.html) or (if you created a group) [physics\\_particle\\_group_begin](physics_particle_group_begin.html), while the flags are the return value of a combination of the following **constants**:",
        "return": "N/A"
    },
    "ef_cloud": {
        "parameters": [],
        "example": {
            "code": "if !irandom(9)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_below(ef_cloud, random(room_width), random(room_height), choose(0, 1, 2), c_gray);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_cloud;",
        "function": "ef_cloud;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a cloud effect as illustrated in the image below:  \n  \n![](images/ef_cloud.png)",
        "return": "N/A."
    },
    "base64_encode": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to encode."
            }
        ],
        "example": {
            "code": "var str, file;<br> str = base64_encode(game_data);<br> file = file_text_open_write(\"save.txt\");<br> file_text_write_string(file, str);<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "base64_encode(string)",
        "function": "base64_encode",
        "documentation": "This function will convert a string into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye.",
        "return": "String"
    },
    "buffer_get_size": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the buffer to get the size of."
            }
        ],
        "example": {
            "code": "var _size = buffer_get_size(player_data);<br> var _temp = buffer_create(_size, buffer_fixed, 0);<br>",
            "description": ""
        },
        "signature": "buffer_get_size(index);",
        "function": "buffer_get_size",
        "documentation": "With this function you can get the size of the given buffer in bytes.",
        "return": "Real"
    },
    "view_set_wport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "w",
                "documentation": "The new width (in pixels)"
            }
        ],
        "example": {
            "code": "if view_get_wport(0) != (display_get_width () / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_wport(0, display_get_width() / 2);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_set_wport(view_port, w)",
        "function": "view_set_wport",
        "documentation": "This function can be used to set the width of the given view port. You give the view port index (from 0 to 7) and the new width to use.",
        "return": "Real"
    },
    "ds_list_insert": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to add to."
            },
            {
                "label": "pos",
                "documentation": "The position to add the value, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1."
            },
            {
                "label": "val",
                "documentation": "The value to add to the list."
            }
        ],
        "example": {
            "code": "ds_list_insert(list, 9, score);",
            "description": ""
        },
        "signature": "ds_list_insert(id, pos, val);",
        "function": "ds_list_insert",
        "documentation": "This function will add the given value into the list at the given position. if the list contains more values after the given position, their position will be shifted up one to make room making the list larger by one.",
        "return": "N/A"
    },
    "application_surface_draw_enable": {
        "parameters": [
            {
                "label": "flag",
                "documentation": "The flag will be either true (enabled, the default value) or false (disabled)."
            }
        ],
        "example": {
            "code": "application_surface_draw_enable(false);",
            "description": ""
        },
        "signature": "application_surface_draw_enable(flag);",
        "function": "application_surface_draw_enable",
        "documentation": "You can use this function to enable or disable the automatic drawing of the application surface. By default this is enabled, but in many cases you will want to take over when and how the surface is drawn (when using shaders for example), in which case you would use this function to set it to false so that you can draw it yourself when and how you require.",
        "return": "N/A"
    },
    "iap_activate": {
        "parameters": [
            {
                "label": "product_index",
                "documentation": "The index of the ds_list that contains the available purchases."
            }
        ],
        "example": {
            "code": "var purchaseList, purchase1;<br> purchaseList = ds_list_create();<br> purchase1 = ds_map_create();<br> ds_map_add(purchase1, \"id\", \"LevelPack\");<br> ds_map_add(purchase1, \"title\", \"ExtraLevels1\");<br> ds_map_add(purchase1, \"description\", \"Level Pack 1 for Catch The Clown\");<br> ds_map_add(purchase1, \"price\", \"$1.00\");<br> ds_list_add(purchaseList, purchase1);<br> iap_activate(purchaseList);<br> ds_map_destroy(purchase1);<br> ds_list_destroy(purchaseList);<br>",
            "description": ""
        },
        "signature": "iap_activate(product_index);",
        "function": "iap_activate",
        "documentation": "This function enables support for making in-app purchases and prepares _GameMaker Studio 2_ by supplying the product [ds_list](../data_structures/ds%20lists/index.html) that holds a series of [ds_maps](../data_structures/ds%20maps/index.html) with the information on each available purchase. This means that you will need to tell _GameMaker Studio 2_ all the available purchase options by setting them in individual ds_maps (one for each available purchase), which are then stored within a ds_list, which is then \"activated\" with this function.  \n  \nThe individual purchase maps that are to be stored in the ds_list should have the following format of key-value pairs:",
        "return": "N/A"
    },
    "date_second_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "diff = date_second_span(date_create_datetime(2011, 9, 15, 11, 4, 0 ), date_current_datetime());",
            "description": ""
        },
        "signature": "date_second_span(date1, date2);",
        "function": "date_second_span",
        "documentation": "With this function you can get the number of seconds between two dates. The return value is always positive and will be a whole number.",
        "return": "Real"
    },
    "physics_particle_group_count": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The group index (ID) of the particle group to count."
            }
        ],
        "example": {
            "code": "gp_num = physics_particle_group_count(group1);",
            "description": ""
        },
        "signature": "physics_particle_group_count(group)",
        "function": "physics_particle_group_count",
        "documentation": "This function will return the number of particles that are active in a single group. The group index (ID) is the value that is returned when you call the function [physics\\_particle\\_group_end()](physics_particle_group_end.html).",
        "return": "Real"
    },
    "tile_set_rotate": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to set"
            },
            {
                "label": "rotate",
                "documentation": "Set to true to rotate and false to leave it as-is"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> var data = tilemap_get(map_id, mx, my);<br> var bool = !tile_get_rotate(data);<br> data = tile_set_rotate(data, bool);<br> tilemap_set(map_id, data, mx, my);<br>",
            "description": ""
        },
        "signature": "tile_set_rotate(tiledata, rotate)",
        "function": "tile_set_rotate",
        "documentation": "",
        "return": "Real"
    },
    "steam_ugc_set_item_tags": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "tags",
                "documentation": "The tags (as an array) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_set_item_tags(ugc_update_handle, tags);",
        "function": "steam_ugc_set_item_tags",
        "documentation": "This function will set the tags to be used for the given item. The tags should be added to a 1D array as string elements and the array passed to the function. The update handle is the value returned when you called the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html). The function will return true if the API was successfully accessed and false if there was an issue.",
        "return": "Boolean"
    },
    "draw_vertex_texture_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the vertex."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the vertex."
            },
            {
                "label": "xtex",
                "documentation": "The x coordinate within the texture."
            },
            {
                "label": "ytex",
                "documentation": "The y coordinate within the texture."
            },
            {
                "label": "col",
                "documentation": "The colour to blend with the texture at this vertex (-1 or c_white for no blending)."
            },
            {
                "label": "alpha",
                "documentation": "The alpha to draw this vertex with (0-1)."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> var tex = background_get_texture(back);<br> draw_primitive_begin_texture(pr_trianglestrip, tex);<br> draw_vertex_texture_colour(0, 480, 0, 1, c_green, 1);<br> draw_vertex_texture_colour(0, 0, 0, 0, c_fuchsia, 1);<br> draw_vertex_texture_colour(640, 480, 1, 1, c_red, 1);<br> draw_vertex_texture_colour(640, 0, 1, 0, c_blue, 1);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_vertex_texture_colour(x, y, xtex, ytex, col, alpha)",
        "function": "draw_vertex_texture_colour",
        "documentation": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See [draw\\_primitive\\_begin](draw_primitive_begin.html) for more information), the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value of -1 (or c_white) may be used for the colour argument. To end and draw the primitive you must call [draw\\_primitive\\_end](draw_primitive_end.html).",
        "return": "N/A"
    },
    "draw_surface_tiled_ext": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the surface."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the surface."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the surface."
            },
            {
                "label": "h",
                "documentation": "The height of the area the stretched surface will occupy."
            },
            {
                "label": "col",
                "documentation": "The colour with which to blend the surface."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the surface."
            }
        ],
        "example": {
            "code": "draw_surface_tiled_ext(surf, x, y, 2, 2, c_red, 0.5);",
            "description": ""
        },
        "signature": "draw_surface_tiled_ext(id, x, y, xscale, yscale, col, alpha);",
        "function": "draw_surface_tiled_ext",
        "documentation": "This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same as those used in [draw\\_surface\\_ext](draw_surface_ext.html)).",
        "return": "N/A"
    },
    "draw_text_ext_transformed_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "sep",
                "documentation": "The distance in pixels between lines of text."
            },
            {
                "label": "w",
                "documentation": "The maximum width in pixels of the string before a line break."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scale."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scale."
            },
            {
                "label": "angle",
                "documentation": "The angle of the text."
            },
            {
                "label": "c1",
                "documentation": "The colour for the top left of the drawn text."
            },
            {
                "label": "c2",
                "documentation": "The colour for the top right of the drawn text."
            },
            {
                "label": "c3",
                "documentation": "The colour for the bottom right of the drawn text."
            },
            {
                "label": "c4",
                "documentation": "The colour for the bottom left of the drawn text."
            },
            {
                "label": "alpha",
                "documentation": "The alpha for the text."
            }
        ],
        "example": {
            "code": "draw_set_halign(fa_center);<br> draw_set_valign(fa_middle);<br> draw_text_ext_transformed_colour(200, 200, \"My name is\" + global.name +\".\", 20, 200, 0.5, 0.5, 180, c_blue, c_blue, c_navy, c_navy, 1);<br>",
            "description": ""
        },
        "signature": "draw_text_ext_transformed_colour(x, y, string, sep, w, xscale, yscale, angle, c1, c2, c3, c4, alpha);",
        "function": "draw_text_ext_transformed_colour",
        "documentation": "This function is a combination of the base [draw_text](draw_text.html) function with the [draw\\_text\\_ext](draw_text_ext.html), [draw\\_text\\_transformed](draw_text_transformed.html) and [draw\\_text\\_colour](draw_text_colour.html) functions. As such, this is the most general of all functions for drawing text and gives a large amount of flexibility when drawing. Note that the \"width\" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.  \n  \n_**NOTE:** Gradient blending is not available for the HTML5 target unless WebGL is enabled, although you can still set the blending colours and it will blend the font with the first given colour. However all blending in this way creates a duplicate font which is then stored in the cache and used when required, which is far from optimal and if you use multiple colour changes it will slow down your games performance. You can set the font cache size to try and limit this should it be necessary using the function [font\\_set\\_cache_size](../../fonts/font_set_cache_size.html)._",
        "return": "N/A"
    },
    "draw_text_color": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "c1",
                "documentation": "The colour for the top left of the drawn text."
            },
            {
                "label": "c2",
                "documentation": "The colour for the top right of the drawn text."
            },
            {
                "label": "c3",
                "documentation": "The colour for the bottom right of the drawn text."
            },
            {
                "label": "c4",
                "documentation": "The colour for the bottom left of the drawn text."
            },
            {
                "label": "alpha",
                "documentation": "The alpha for the text."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> draw_text(100, 100, \"Health\");<br> draw_text_colour(100, 200, string(health), c_lime, c_lime, c_green, c_green, 1);<br>",
            "description": ""
        },
        "signature": "draw_text_colour(x, y, string, c1, c2, c3, c4, alpha);",
        "function": "draw_text_colour",
        "documentation": "This function will draw text in a similar way to [draw_text](draw_text.html) only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead of the base drawing colour and alpha.  \n  \n_**NOTE:** Gradient blending is not available for the HTML5 target unless WebGL is enabled, although you can still set the blending colours and it will blend the font with the first given colour. However all blending in this way creates a duplicate font which is then stored in the cache and used when required, which is far from optimal and if you use multiple colour changes it will slow down your games performance. You can set the font cache size to try and limit this should it be necessary using the function [font\\_set\\_cache_size](../../fonts/font_set_cache_size.html)._",
        "return": "N/A"
    },
    "bbox_top": {
        "parameters": [],
        "example": {
            "code": "if bbox_top &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y = sprite_yoffset;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "bbox_top;",
        "function": "bbox_top;",
        "documentation": "",
        "return": "Real"
    },
    "event_number": {
        "parameters": [],
        "example": {
            "code": "switch (event_number)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case ev_step_normal: show_debug_message(\"Step event!\"); break;<br> &nbsp;&nbsp;&nbsp;case ev_game_start: show_debug_message(\"Game Start\"\"); break;<br> &nbsp;&nbsp;&nbsp;case ev_room_start: show_debug_message(\"Room Start!\"); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "event_number;",
        "function": "event_number;",
        "documentation": "This **read-only** variable returns the number of the event currently being called, where the number is actually referring to the \"sub event\" of the event, ie: for the step event the event number could be any one of the constants **ev\\_step\\_normal**, **ev\\_step\\_begin**, or **ev\\_step\\_end**. For a full list of constants that are available for the specific sub-events see [event_perform](event_perform.html), and if you should need to know the main event itself, you should be checking the [event_type](event_type.html).",
        "return": "Real"
    },
    "sprite_get_name": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to get the name of."
            }
        ],
        "signature": "sprite_get_name(index);",
        "function": "sprite_get_name",
        "documentation": "This function will return the name _as a string_ of the specified sprite. This name is the one that has been specified for the sprite in the resource tree of the main _GameMaker Studio 2_ window. Please note that this is _only_ a string and cannot be used to reference the sprite directly - for that you would need the _sprite index_. You can, however, use this string to get the _sprite index_ using the returned string along with the function [asset\\_get\\_index()](../asset_get_index.html).",
        "return": ""
    },
    "steam_file_write": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to write to."
            },
            {
                "label": "data",
                "documentation": "The data to write (a string)."
            },
            {
                "label": "size",
                "documentation": "the size of the data to be written."
            }
        ],
        "example": {
            "code": "var fname=\"SaveData.txt\";<br> var data = string(global.Level) + \"|\" + string(global.Points) + \"|\" + string(global.HP);<br> var len = string_length(data);<br> steam_file_write_file(fname, data, len);<br>",
            "description": ""
        },
        "signature": "steam_file_write(filename, data, size);",
        "function": "steam_file_write",
        "documentation": "You can use this function to write data to a file, which will then be synchronised with the Steam Cloud when the user exits the game. if the file does not exist, this function will create it for you, and if it does already exists, it will overwrite any data that is already stored within the file with the new data string. The function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
        "return": "Real"
    },
    "steam_ugc_create_query_all_ex": {
        "parameters": [
            {
                "label": "query_type",
                "documentation": "The type of data query to create (see constants listed below)."
            },
            {
                "label": "match_type",
                "documentation": "The type of UGC items to query (see constants listed below)."
            },
            {
                "label": "page",
                "documentation": "The page number to query."
            },
            {
                "label": "creator_app_id",
                "documentation": "The item creator app ID."
            },
            {
                "label": "consumer_app_id",
                "documentation": "The consumer app ID."
            }
        ],
        "example": {
            "code": "query_handle = steam_ugc_create_query_all_ex(ugc_query_RankedByVote, page, global.AccountID, 0, global.GameID);",
            "description": ""
        },
        "signature": "steam_ugc_create_query_all_ex(query_type, match_type, page, creator_app_id, consumer_app_id);",
        "function": "steam_ugc_create_query_all_ex",
        "documentation": "This function can be used to query the UGC data base. The function requires the ID of the game that is going to consume the item and/or the ID of the game that created the item, and you need to use the following constants for the type of query to create, the type of item to query and the page number to quer. Note that a query will return a _maximum_ number of 50 items.",
        "return": "Query Handle"
    },
    "audio_stop_recording": {
        "parameters": [
            {
                "label": "channel_index",
                "documentation": "The index of the recorder channel to stop."
            }
        ],
        "example": {
            "code": "audio_stop_recording(audio_channel);",
            "description": ""
        },
        "signature": "audio_stop_recording(channel_index);",
        "function": "audio_stop_recording",
        "documentation": "This function will stop recording on the given recorder channel (the channel index is returned when you call the function [audio\\_start\\_recording](audio_start_recording.html)). When you stop recording, no further [Audio Recording Asynchronous Events](../../../2_interface/1_editors/events/async_events.html) will be triggered for the given recorder channel, so you would normally use this function in the actual asynchronous event to ensure that you have captured all the data.",
        "return": "N/A"
    },
    "gpu_get_texfilter": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_texfilter()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter(false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter(true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_get_texfilter();",
        "function": "gpu_get_texfilter",
        "documentation": "With this function you can check to see whether texture filtering (linear interpolation) is enabled (returns true) or not (returns false). For more information on texture filtering, see the function [gpu\\_set\\_texfilter](gpu_set_texfilter.html).",
        "return": "Boolean"
    },
    "part_particles_create_colour": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to create the particles."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to create the particles."
            },
            {
                "label": "parttype",
                "documentation": "The index (type) of the particles to be created."
            },
            {
                "label": "colour",
                "documentation": "The colour blending for the particles."
            },
            {
                "label": "number",
                "documentation": "The number of particles to create."
            }
        ],
        "example": {
            "code": "if speed &gt; 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_particles_create_colour(sname, x, y, p_MagicSmoke, choose(c_aqua, c_lime, c_fuschia, c_orange), 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_particles_create_colour(ind, x, y, parttype, colour, number);",
        "function": "part_particles_create_colour",
        "documentation": "This function is ideal for those effects that do not require any of the functionality offered by [particle emitters](../particle%20emitters/index.html) (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. You can also colour the particles \"on the fly\" as they are created with this function, and this colour will over-ride the predefined colour of the particle, but it does not blend this colour over the particles lifetime. Note that you must have created the particle system and the particle type previously for this function to be used.",
        "return": "N/A"
    },
    "part_system_automatic_update": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to change."
            },
            {
                "label": "automatic",
                "documentation": "Whether automatic updating is on (true) or not (false)."
            }
        ],
        "example": {
            "code": "if global.Pause<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_system_automatic_update(global.Sname, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_automatic_update(ind, automatic);",
        "function": "part_system_automatic_update",
        "documentation": "This function controls whether _GameMaker Studio 2_ should update the particle system automatically or not, and normally you would not need to use this function as the default value of true (automatic update is on) is what you wish to happen. However, for special effects or for pausing the game, you can set this to false and it will prevent any updates being carried out on the given particle system unless _explicitly_ commanded by the use of the function [part\\_system\\_update](part_system_update.html) or you use this function again to turn automatic updates on. No updating means that particles created in this system will no longer change position, colour or any other parameter and that emitters will cease to work too, \"freezing\" the system at the exact point in which the automatic update was set to false.  \n  \nOne thing to note is that if you are using the simple effects created by the functions [effect\\_create\\_above](../simple%20effects/effect_create_above.html) or [effect\\_create\\_below](../simple%20effects/effect_create_below.html) then you can use the values of 0 (for below effects) or 1 (for above effects) as the particle system index and so toggle the automatic update for these too (this will also work to toggle updating for the DnD™ particle effects).",
        "return": "N/A"
    },
    "file_text_read_real": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to read from."
            }
        ],
        "example": {
            "code": "var i, file;<br> file = file_text_open_read(working_directory + \"hiscore.txt\");<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;scr[i] = file_text_read_real(file);<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;scr_name[i] = file_text_read_string(file);<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_read_real(fileid);",
        "function": "file_text_read_real",
        "documentation": "With this function you can read a real number value from a text file and the function returns that value to be used or stored in a variable.",
        "return": "Real"
    },
    "mp_grid_add_rectangle": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the left side of the rectangle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top side of the rectangle to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right side of the rectangle to check."
            },
            {
                "label": "y2",
                "documentation": "The x coordinate of the bottom side of the rectangle to check."
            }
        ],
        "example": {
            "code": "mp_grid_add_rectangle(grid, 0, 0, 100, 200);<br>",
            "description": ""
        },
        "signature": "mp_grid_add_rectangle(id, x1, y1, x2, y2);",
        "function": "mp_grid_add_rectangle",
        "documentation": "This function asks you to define a rectangle within the room, and then it marks all mp_grid cells \"touch\" that rectangle as being forbidden, meaning that the path-finding functions cannot cross them. The image below illustrates how this works:  \n  \n![](images/mp_grid_add_rectangle_image.png)",
        "return": "N/A"
    },
    "steam_initialised": {
        "parameters": [],
        "example": {
            "code": "global.steam_api = false;<br> if steam_initialised()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if steam_stats_ready() &amp;&amp; steam_is_overlay_enabled()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.steam_api = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_initialised();",
        "function": "steam_initialised",
        "documentation": "When using the Steam API, this function can be called to check that the Steam client API has been initialised correctly before any doing any further calls to Steam specific functions in your game.",
        "return": "Boolean"
    },
    "ds_list_set": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to add to."
            },
            {
                "label": "pos",
                "documentation": "The position within the list to set."
            },
            {
                "label": "[val2, ... max_val]",
                "documentation": "The value to set in the list."
            }
        ],
        "example": {
            "code": "for (var i = 0; i &lt; ds_list_size(list); i++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;ds_list_set(list, i, -1);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_set(id, pos, val);",
        "function": "ds_list_set",
        "documentation": "This function can be used to set a previously added list entry. You give the list ID (as returned when you created the list) and the position within the list to set as well as the value to set it to. Note that if the entry being set is outside the bounds of the list (ie, you set list entry 20 but the current list only contains 10 entries) then the list will be filled to the given position and each entry will be set to 0. This function is the same as using the [DS list accessor](../../../3_gml_overview/13_accessors.html).",
        "return": "N/A"
    },
    "game_save": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to save the game to."
            }
        ],
        "signature": "game_save(filename);",
        "function": "game_save",
        "documentation": "With this function you can do a basic save of the game to a given file.  \n  \n_**NOTE:** This function is_ very limited and it is designed for the beginner to get a save system up and running quickly, but more advanced users may prefer to code their own system using the [File](../file%20handling/index.html) functions, due to the fact that the game will _not_ save any of the dynamic resources like data structures, surfaces, added backgrounds and sprites etc..",
        "return": "N/A"
    },
    "layer": {
        "parameters": [],
        "example": {
            "code": "layer = layer_create(-1000);",
            "description": ""
        },
        "signature": "layer;",
        "function": "layer;",
        "documentation": "This **built-in variable** is created for every instance in a room and contains the layer ID value of the layer that the instance is assigned to. This value can then be used in other functions like [layer\\_get\\_depth](../../rooms/layers/layer_get_depth.html) or it can be changed to move the instance to another layer, but note that if the layer being assigned does not exist in the current room, then you will get an error that will force your game to close. When assigning a layer, you must supply the unique **layer ID** as returned by the function [layer\\_get\\_id()](../../rooms/layers/layer_get_id.html) (when using named room layers), or as returned by the function [layer_create()](../../rooms/layers/layer_create.html) (when you create your own layers at run time).",
        "return": "Layer ID value (Real)"
    },
    "move_bounce_all": {
        "parameters": [
            {
                "label": "adv",
                "documentation": "Whether to enable advanced bouncing (true) or not (false)."
            }
        ],
        "example": {
            "code": "if other.visible<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;move_bounce_all(false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "move_bounce_all( adv );",
        "function": "move_bounce_all",
        "documentation": "With this function you can command an instance to bounce off **all** instances within the room, with the only exception being those that have no sprite or mask index assigned to them. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too, as illustrated by the code example below.",
        "return": "N/A"
    },
    "path_add": {
        "parameters": [],
        "example": {
            "code": "global.newpath = path_add();",
            "description": ""
        },
        "signature": "path_add();",
        "function": "path_add",
        "documentation": "With this function you can create a path in _GameMaker Studio 2_ without using the path editor. this function will return the index of the path which should be stored in a variable and used as the reference for that path from then on. Please note that the created path is _empty_ ie: it has no points defined, so you will then have to use the other available functions to add points to the path or be using [mp_grids](../../movement%20and%20collisions/motion%20planning/index.html) to generate the path. Once you have finished using the path, or wish to create a new one and store its index in the same variable you should first delete the old path with [path_delete](path_delete.html) to prevent memory leaks which can eventually crash your game.",
        "return": "Real."
    },
    "asset_get_type": {
        "parameters": [
            {
                "label": "name",
                "documentation": "The name of the game asset to get the type of (a string)."
            }
        ],
        "example": {
            "code": "if asset_get_type(\"pth_Path_\" + string(global.Game)) == asset_unknown<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;show_debug_message(\"Path doesn't exist!!!\");<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_index = asset_get_index(\"pth_Path_\" + string(global.Game));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "asset_get_type(name);",
        "function": "asset_get_type",
        "documentation": "With this function you can get the type of asset being referenced from its name (a string). One of the **constants** listed below will be returned.",
        "return": "Constant"
    },
    "show_question_async": {
        "parameters": [
            {
                "label": "String",
                "documentation": "The question to ask to the user."
            }
        ],
        "signature": "show_question_async(string);",
        "function": "show_question_async",
        "documentation": "This function opens a window and displays the question you define in the function to the user. This is an asynchronous function, and as such _GameMaker Studio 2_ does _not_ block the device it is being run on while waiting for answer, but rather keeps on running events as normal. The function has two buttons that show \"Yes\" and \"No\", and once the user has pressed one, an asynchronous **Dialog** event is triggered which, for the duration of that event _only_, will have a ds_map stored in the variable async_load.",
        "return": "Real"
    },
    "keyboard_get_numlock": {
        "parameters": [],
        "example": {
            "code": "if keyboard_get_numlock()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;keyboard_set_numlock(false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;keyboard_set_numlock(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_get_numlock();",
        "function": "keyboard_get_numlock",
        "documentation": "You can use this function to find the status of the keypad number lock with **true** being returned for on, and **false** returned for off.  \n  \n_**NOTE:** This functionality is only available in the Windows exe builds and will not function on any other device._",
        "return": "Boolean"
    },
    "ds_grid_sort": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid to sort."
            },
            {
                "label": "column",
                "documentation": "The column to use for sorting the rows"
            },
            {
                "label": "ascending",
                "documentation": "Whether to sort lowest to highest (true), or highest to lowest (false)."
            }
        ],
        "example": {
            "code": "ds_grid_sort(grid, 3, false)<br>",
            "description": ""
        },
        "signature": "ds_grid_sort(index, column, ascending);",
        "function": "ds_grid_sort",
        "documentation": "This function can be used to sort a ds_grid based on the values from a given column (much as you would sort files by date, size etc... in the Windows Explorer). The following image shows an example: ![](ds_grid_sort.png)",
        "return": "N/A"
    },
    "ds_map_read": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read the string into."
            },
            {
                "label": "str",
                "documentation": "The string to read"
            }
        ],
        "example": {
            "code": "inventory = ds_map_create();<br> ini_open(\"map.ini\");<br> var t_string = ini_read_string(\"Saved\", \"0\", \"\");<br> if t_string != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_map_read(inventory, t_string);<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ds_map_read(id, str [, legacy]);",
        "function": "ds_map_read",
        "documentation": "This function will take a string that has previously been created by the function [ds\\_map\\_write](ds_map_write.html) and then read it into a previously created ds_map. If the map that the string is being read into contains any key/value pairs, these will be cleared first before the saved map is re-constructed. Note that if the data structure was created with previous versions of _GameMaker Studio 2_ you should add the optional argument \"legacy\", setting it to true as the string format has changed with this version.",
        "return": "N/A."
    },
    "surface_resize": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to change."
            },
            {
                "label": "w",
                "documentation": "The width of the new surface."
            },
            {
                "label": "h",
                "documentation": "The height of the new surface."
            }
        ],
        "example": {
            "code": "if view_wport[0] != surface_get_width(application_surface) || view_hport[0] != surface_get_height(application_surface)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_resize(application_surface, view_wport[0],view_hport[0]);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_resize(surface_id, w, h);",
        "function": "surface_resize",
        "documentation": "This function will resize a surface to the given dimensions (in pixels). The surface_id is that of a surface you have created previously, or the [application_suface](the%20application%20surface.html), and the function will resize that surface. Note that this will neither crop nor stretch the contents of the surface, but rather it destroys the current surface and recreates it with the same handle (surface_id) with the new dimensions, meaning that it will need to be cleared and drawn to again (unless it is the application_surface in which case _GameMaker Studio 2_ will do this automatically).",
        "return": "N/A"
    },
    "file_rename": {
        "parameters": [
            {
                "label": "oldname",
                "documentation": "The name of the file to change."
            },
            {
                "label": "newname",
                "documentation": "The new name to give the file."
            }
        ],
        "example": {
            "code": "if file_exists(\"level1.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_rename(\"level1.txt\", \"level.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "file_rename(oldname, newname);",
        "function": "file_rename",
        "documentation": "This function will rename the specified file with the specified name. The function will return true if the file has successfully been renamed, or false in any other circumstances.  \n  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "Boolean"
    },
    "physics_particle_group_end": {
        "parameters": [],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid;<br> physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_circle(100);<br> mLastGroup = physics_particle_group_end();<br>",
            "description": ""
        },
        "signature": "physics_particle_group_end()",
        "function": "physics_particle_group_end",
        "documentation": "This function ends the definition of a particle group (which you should have begun using the function [physics\\_particle\\_group_begin()](physics_particle_group_begin.html)), which in turn creates all the particles for the group within the game room. This function returns a unique ID value for the group just created which you can then store in a variable and use in other funtions.",
        "return": "Real"
    },
    "steam_file_share": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file synchronise."
            }
        ],
        "example": {
            "code": "if !steam_file_persisted(\"Save.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_file_share(\"Save.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_file_share(filename);",
        "function": "steam_file_share",
        "documentation": "With this function you can force your game to synchronise the given file with the Steam Cloud. This is not normally necessary due to the fact that the game will synchronise automatically at the end of the player's session, nor is it recommended by Steam, but it can be useful to ensure sensitive information is synchronised immediately. The function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
        "return": "Real"
    },
    "steam_get_persona_name": {
        "parameters": [],
        "example": {
            "code": "if steam_initialised()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.p_name = steam_get_persona_name();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_persona_name();",
        "function": "steam_get_persona_name",
        "documentation": "You can use this function to return the user name of the user currently logged into the Steam client. This is the visible screen name and _not_ the unique **user id** (this can be found using the function [steam\\_get\\_user\\_steam\\_id](steam_get_user_steam_id.html)).",
        "return": "String"
    },
    "buffer_base64_encode": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer."
            }
        ],
        "example": {
            "code": "var b_str = buffer_base64_encode(buff, 0, buffer_get_size(buff))",
            "description": ""
        },
        "signature": "buffer_base64_encode(buffer, offset, size);",
        "function": "buffer_base64_encode",
        "documentation": "This function will convert the data from the given buffer into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye. To use this you need to specify an already created buffer, the offset value (which is the point within the buffer at which you wish to start encoding) as well as the size, in bytes, of the buffer memory to encode.",
        "return": "String"
    },
    "window_get_height": {
        "parameters": [],
        "example": {
            "code": "hh = window_get_height();",
            "description": ""
        },
        "signature": "window_get_height();",
        "function": "window_get_height",
        "documentation": "",
        "return": "Real"
    },
    "ds_grid_write": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid to write."
            }
        ],
        "example": {
            "code": "ini_open(\"Save.ini\");<br> ini_write_string(\"Save\", \"0\", ds_grid_write(mygrid));<br> ini_close()<br>",
            "description": ""
        },
        "signature": "ds_grid_write(index);",
        "function": "ds_grid_write",
        "documentation": "This function can be used to convert the given ds\\_grid into a string, which can then be stored in an external file (for example). You can read the returned string from this function back into a ds\\_grid using the function [ds\\_grid\\_read()](ds_grid_read.html).",
        "return": "String"
    },
    "fps": {
        "parameters": [],
        "example": {
            "code": "if debug_mode<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_text(32, 32, \"FPS = \" + string(fps));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "fps",
        "function": "fps",
        "documentation": "In _GameMaker Studio 2_ there are two main ways that can be used to tell the speed at which your game runs. The [game speed](../game/game_get_speed.html) (as specified in the Game Options) and the fps (frames per second). These values are often confused, but basically one is the number of game steps that _GameMaker Studio 2_ is supposed to be completing in a second, while the other (the fps) is the number of CPU steps that _GameMaker Studio 2_ is actually completing in a second _up to a maximum value of the room speed itself_. To get the true fps, ie. the actual number of cpu steps per game step, use the [fps_real](fps_real.html) variable.",
        "return": "Real"
    },
    "part_type_alpha3": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "alpha1",
                "documentation": "The starting alpha of the particle."
            },
            {
                "label": "alpha2",
                "documentation": "The halfway point alpha of the particle."
            },
            {
                "label": "alpha3",
                "documentation": "The ending alpha of the particle."
            }
        ],
        "example": {
            "code": "part_type_alpha3( part_Health, 0.5, 1, 0);",
            "description": ""
        },
        "signature": "part_type_alpha3(ind, alpha1, alpha2, alpha3);",
        "function": "part_type_alpha3",
        "documentation": "This function can be used to set a three alpha (transparency) value gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one that will be blended to half way through its lifetime and the third alpha is the one with which the particle will end with. A smooth gradient change will occur through the alphas over the particles lifetime from one to the other.",
        "return": "N/A"
    },
    "vertex_format_add_custom": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The data type that this custom vertex data will hold (see the type constants listed below)."
            },
            {
                "label": "usage",
                "documentation": "The use that the data will get(see the usage constants listed below)."
            }
        ],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_textcoord();<br> vertex_format_add_custom(vertex_type_float3, vertex_usage_position);<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_add_custom(type, usage);",
        "function": "vertex_format_add_custom",
        "documentation": "Tell _GameMaker Studio 2_ to accept a custom value (or values) as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
        "return": "N/A"
    },
    "draw_text_ext": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "sep",
                "documentation": "The distance in pixels between lines of text."
            },
            {
                "label": "w",
                "documentation": "The maximum width in pixels of the string before a line break."
            }
        ],
        "example": {
            "code": "draw_text_ext(100, 50, keyboard_string, 3, 300);",
            "description": ""
        },
        "signature": "draw_text_ext(x, y, string, sep, w);",
        "function": "draw_text_ext",
        "documentation": "This function will draw text in a similar way to [draw_text](draw_text.html) only now you can set the space between each line of text - should the text occupy more than one line - and limit the width (in pixels) of the string per line so that should any line exceed this value, _GameMaker Studio 2_ will automatically split the text to the next line at the nearest available white-space (if the text has no white-spaces then it will overrun this maximum width value). A value of -1 for the line separation argument will default to a separation based on the height of the \"M\" character in the chosen font.",
        "return": "N/A"
    },
    "dsin": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in degrees) to return the sine of."
            }
        ],
        "example": {
            "code": "val = dsin(90);",
            "description": ""
        },
        "signature": "dsin(val);",
        "function": "dsin",
        "documentation": "In a right angled triangle dsin(val) = Opposite / Hypotenuse where \"val\" is one of the three angles.",
        "return": "Real"
    },
    "object_get_parent": {
        "parameters": [],
        "signature": "object_get_parent(obj);",
        "function": "object_get_parent",
        "documentation": "This function will get you the object_index of any parent that has been assigned to the specified object, or else return -100 to show that the object has no parent assigned to it, or -1 if the object being checked does not exist. For more information on parents see the section on the [Object Editor](../../../2_interface/1_editors/objects.html).",
        "return": "Real"
    },
    "tilemap_get_width": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the width of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var _w = tilemap_get_width(map_id);<br> var _h = tilemap_get_height(map_id);<br> total_tiles = (_w * _h);<br>",
            "description": ""
        },
        "signature": "tilemap_get_width(tilemap_element_id);",
        "function": "tilemap_get_width",
        "documentation": "",
        "return": "Integer"
    },
    "string_hash_to_newline": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to convert over multiple lines"
            }
        ],
        "example": {
            "code": "var str = string_hash_to_newline(\"Hello#World\");<br> draw_text(32, 32, str);<br>",
            "description": ""
        },
        "signature": "string_hash_to_newline(string);",
        "function": "string_hash_to_newline",
        "documentation": "This function returns a string where the \"#\" symbol has been converted into a new line. So a string formatted as:",
        "return": "String"
    },
    "ds_grid_set": {
        "parameters": [
            {
                "label": "index",
                "documentation": "This index of the grid."
            },
            {
                "label": "x",
                "documentation": "The x position of the cell to set."
            },
            {
                "label": "y",
                "documentation": "The y position of the cell to set."
            },
            {
                "label": "value",
                "documentation": "The value with which to set the cell."
            }
        ],
        "example": {
            "code": "grid = ds_grid_create(5, 5);<br> var i, j;<br> i = 0;<br> j = 0;<br> repeat (ds_grid_width(grid))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;repeat (ds_grid_height(grid))<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds_grid_set(grid, i, j, irandom(9));<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j += 1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;j = 0;<br> &nbsp;&nbsp;&nbsp;i += 1;<br> }<br>",
            "description": ""
        },
        "signature": "ds_grid_set(index, x, y, value);",
        "function": "ds_grid_set",
        "documentation": "This function can be used to set a given cell within the given ds_grid to any value, which can be a real number or a string. The image below illustrates this: ![](ds_grid_set.png)",
        "return": "N/A"
    },
    "part_type_create": {
        "parameters": [],
        "example": {
            "code": "mypart = part_type_create();",
            "description": ""
        },
        "signature": "part_type_create();",
        "function": "part_type_create",
        "documentation": "With this function you can create a new particle type and the return value should be stored in a variable for use in all subsequent particle functions.",
        "return": "Real"
    },
    "surface_copy_part": {
        "parameters": [
            {
                "label": "destination",
                "documentation": "The ID of the surface to copy the other surface to."
            },
            {
                "label": "x",
                "documentation": "The x position to copy to."
            },
            {
                "label": "y",
                "documentation": "The y position to copy to."
            },
            {
                "label": "source",
                "documentation": "The ID of the surface to be copied."
            },
            {
                "label": "xs",
                "documentation": "The x position in the source surface to copy from."
            },
            {
                "label": "ys",
                "documentation": "The y position in the source surface to copy from."
            },
            {
                "label": "ws",
                "documentation": "The width of the area in the source surface to copy from."
            },
            {
                "label": "hs",
                "documentation": "The height of the area in the source surface to copy from."
            }
        ],
        "example": {
            "code": "if view_current == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_copy_part(surf, 0, 0, temp_surf, 0, 0, view_xview[1] - mouse_x, view_yview[1] - mouse_y);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_surface(surf, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_copy_part(destination, x, y, source, xs, ys, ws, hs);",
        "function": "surface_copy_part",
        "documentation": "This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). You can specify a local x and y position to copy from as well as the width and height of the section. Please note that these are coordinates based on the _surface size_ and not on the position at which the surface is being drawn in the room (see the main page on [Surfaces](index.html) for further information). If the destination surface already has information this will be overwritten by the copy, and the function does _not_ change the source surface in any way.",
        "return": "N/A"
    },
    "game_get_speed": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of method used to get the game speed (see the constants above)."
            }
        ],
        "example": {
            "code": "if game_get_speed(gamespeed_fps) != 60<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;game_set_speed(60, gamespeed_fps);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "game_get_speed(type);",
        "function": "game_get_speed",
        "documentation": "This function can be used to get the game speed as either the number of game frames to run per second or as the number of micro seconds per game frame. Note that this is **not** the actual running speed FPS value (for that use the [fps_real](../debugging/fps_real.html) variable) but rather the number of game frames (FPS) that the game will attempt to maintain each second, or the length of each game frame in microseconds that the game will try to maintain (MPF). When you use this function you need to give one of the following constants which will determine the type of the return value:",
        "return": "Real"
    },
    "event_perform": {
        "parameters": [],
        "signature": "event_perform(type, numb);",
        "function": "event_perform",
        "documentation": "",
        "return": ""
    },
    "layer_background_get_sprite": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_sprite(back_id) != spr_Clouds<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_sprite(back_id, spr_Clouds);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_sprite(background_element_id);",
        "function": " layer_background_get_sprite",
        "documentation": "",
        "return": "Sprite Index (Real) or -1"
    },
    "audio_sync_group_get_track_pos": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to get the position of."
            }
        ],
        "example": {
            "code": "var real_secs = audio_sync_group_get_track_pos(sg);<br> var secs = real_secs mod 60;<br> var mins = string(real_secs div 60);<br> if (secs &gt; 9)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;secs = string(secs);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;secs = \"0\" + string(secs);<br> &nbsp;&nbsp;&nbsp;}<br> draw_text(32, 32, \"Time = \" + mins + \":\" + secs);<br>",
            "description": ""
        },
        "signature": "audio_sync_group_get_track_pos(group_index);",
        "function": "audio_sync_group_get_track_pos",
        "documentation": "This function returns the current play position of the given sync group. The group index is the value returned when you created the group using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html), and the return value is the time in seconds that the tracks have been playing.",
        "return": "Real"
    },
    "part_system_draw_order": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to change."
            },
            {
                "label": "oldtonew",
                "documentation": "Whether old particles should be drawn behind newer ones (true) or vice versa (false)."
            }
        ],
        "example": {
            "code": "mysystem = part_system_create();<br> part_system_clear( mysystem, 1 );",
            "description": ""
        },
        "signature": "part_system_draw_order(ind, oldtonew);",
        "function": "part_system_draw_order",
        "documentation": "With this function you can set the way in which particles are drawn when created on the screen. The default system uses an old>new look (the function is set to true), where old particles are drawn at a higher depth than newer ones and so appear \"beneath\" them new particles, but by setting this function to false you can reverse this order and have the new particles drawn higher and so appear \"beneath\" the older ones. The images below illustrate this, with the image on the left being the default value of true and the image on the right being false:",
        "return": "N/A"
    },
    "vertex_colour": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "colour",
                "documentation": "The colour for this vertex (can be a constant or a hex value)."
            },
            {
                "label": "alpha",
                "documentation": "The alpha value for the vertex (from 0 to 1)."
            }
        ],
        "example": {
            "code": "vertex_colour(b, c_white, 1);",
            "description": ""
        },
        "signature": "vertex_colour(buffer, colour, alpha);",
        "function": "vertex_colour",
        "documentation": "If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a [colour constant](../../colour/index.html), or a hex value (using the standard _GameMaker Studio 2_ format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).",
        "return": "N/A"
    },
    "parameter_count": {
        "parameters": [],
        "example": {
            "code": "p_num = parameter_count();",
            "description": ""
        },
        "signature": "parameter_count();",
        "function": "parameter_count",
        "documentation": "Command-line parameters are those extra commands that you can add to an exe to change how the program is run. You can find the number of parameters for the current game using this function, where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.",
        "return": "Real"
    },
    "room_set_background_colour": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to set the background colour of."
            },
            {
                "label": "col",
                "documentation": "The new background colour."
            },
            {
                "label": "show",
                "documentation": "Whether to show background colour (true) or not (false)."
            }
        ],
        "example": {
            "code": "global.rm = room_add();<br> room_set_background_colour(global.rm, c_maroon, 1);<br>",
            "description": ""
        },
        "signature": "room_set_background_colour(index, col, show);",
        "function": "room_set_background_colour",
        "documentation": "",
        "return": "N/A"
    },
    "sprite_assign": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to be copied to (ie: overwritten)."
            },
            {
                "label": "sprite",
                "documentation": "The sprite to be copied from."
            }
        ],
        "example": {
            "code": "if sprite_exists(global.Player_Sprite)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var t_spr = sprite_add(\"player.png\", 16, true, true, 0, 0);<br> &nbsp;&nbsp;&nbsp;sprite_assign(global.Player_Sprite, t_spr);<br> &nbsp;&nbsp;&nbsp;sprite_delete(t_spr);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Player_Sprite = sprite_add(\"player.png\", 16, true, true, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_assign(index, sprite);",
        "function": "sprite_assign",
        "documentation": "This function takes two previously created (or included) sprite indexes, and copies the image from one to the other. In this way you can copy (or \"clone\") one sprite into another index. Note that _you cannot copy to a game resource_. You have to have created the sprite to be copied to previously using the [sprite_add](sprite_add.html) or [sprite_duplicate](sprite_duplicate.html) functions.",
        "return": ""
    },
    "buffer_write": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to write to."
            },
            {
                "label": "type",
                "documentation": "The type of data that is to be written to the buffer (see the list of constants below)."
            },
            {
                "label": "value",
                "documentation": "The data to write."
            }
        ],
        "example": {
            "code": "buffer_seek(buff, buffer_seek_start, 0);<br> buffer_write(buff, buffer_s16, 0);<br> buffer_write(buff, buffer_s16, x);<br> buffer_write(buff, buffer_s16, y);<br>",
            "description": ""
        },
        "signature": "buffer_write(buffer, type, value)",
        "function": "buffer_write",
        "documentation": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:",
        "return": "N/A"
    },
    "camera_get_proj_mat": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "mat = camera_get_proj_mat(camera_view[0]);",
            "description": ""
        },
        "signature": "camera_get_proj_mat(camera_id)",
        "function": "camera_get_proj_mat",
        "documentation": "This function can be used to retrieve the projection matrix. The function returns the matrix ID value which can then be used in other [matrix functions](../../matrices/index.html) or to set the projection matrix of another camera (using [camera\\_set\\_proj_mat](camera_set_proj_mat.html)).",
        "return": "Matrix ID (real)"
    },
    "draw_set_lighting": {
        "parameters": [
            {
                "label": "enable or disable all lighting (true or false)",
                "documentation": ""
            }
        ],
        "example": {
            "code": "draw_set_lighting(true);<br> draw_light_define_direction(1, 0, 1, 0, c_white);<br> draw_light_enable(1, true);<br>",
            "description": ""
        },
        "signature": "draw_set_lighting(enable)",
        "function": "draw_set_lighting",
        "documentation": "This function is used to enable all lighting effects. Default is disabled (false).",
        "return": "N/A"
    },
    "part_system_drawit": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to draw the particles of."
            }
        ],
        "example": {
            "code": "if surface_exists(surf)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_set_target(surf);<br> &nbsp;&nbsp;&nbsp;part_system_drawit();<br> &nbsp;&nbsp;&nbsp;surface_reset_target();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_drawit(ind);",
        "function": "part_system_drawit",
        "documentation": "With this function you can force a particle system to draw all the current particles on the screen. If [part\\_system\\_automatic_draw](part_system_automatic_draw.html) is switched off then this function will show the particles when used in the draw event of an instance, or it can be used when the drawing target is set to a surface (using [surface\\_set\\_target](../../surfaces/surface_set_target.html)) to draw the particles in the system to that surface.",
        "return": "N/A"
    },
    "md5_string_unicode": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to hash."
            }
        ],
        "example": {
            "code": "var hash, str;<br> str = base64_encode(game_data);<br> hash = md5_string_unicode(str);<br> http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?hash=\" + hash); http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?data=\" + str);",
            "description": ""
        },
        "signature": "md5_string_unicode(string)",
        "function": "md5_string_unicode",
        "documentation": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take an input unicode string (which is 16bits for each char) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example).",
        "return": "String"
    },
    "physics_fixture_bind": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the fixture that is to be bound"
            },
            {
                "label": "target",
                "documentation": "the target instance that is to receive the fixture (can be an instance id, an object id, other, or all)"
            }
        ],
        "example": {
            "code": "var fix, inst;<br> fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(fix, 16);<br> physics_fixture_set_density(fix, 1.0);<br> inst = instance_create_layer(x, y, \"Instances\", genericBodyObject);<br> my_fix = physics_fixture_bind(fix, inst);<br> physics_fixture_delete(fix);<br>",
            "description": ""
        },
        "signature": "physics_fixture_bind(fixture, target)",
        "function": "physics_fixture_bind",
        "documentation": "Once we have defined our fixture it has to be bound to an instance. This means that its _properties_ are transferred to the selected instance, **not the actual fixture itself**, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords _other_ and _all_. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.  \n  \nThe fixture will be bound to the instance with the center of mass being positioned at the origin of the instance, and polygon fixtures are bound based on the position of the points _relative_ to the origin. If you require your fixture to be bound to a point other than the origin then you should be using [physics\\_fixture\\_bind_ext](physics_fixture_bind_ext.html). ![](images/physics_fixture_bind_image.png) The function will also return a unique \"id\" value for the _bound_ fixture (**not the fixture itself**) which can then be used to remove (\"un-bind\") the physics properties from the instance using the function [physics\\_remove\\_fixture](physics_remove_fixture.html). This permits you to add and remove physical properties from an instance without destroying and re-creating objects.  \n  \n_**Note:** Fixtures should be deleted when no longer needed as failure to do so may cause a memory leak which will slow down and eventually crash your game._",
        "return": "Real"
    },
    "physics_particle_set_density": {
        "parameters": [
            {
                "label": "density",
                "documentation": "The density of the particle fixture."
            }
        ],
        "example": {
            "code": "physics_particle_set_radius(15);<br> physics_particle_set_density(0.5);<br> physics_particle_set_damping(1);<br> physics_particle_set_gravity_scale(1);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_density(density)",
        "function": "physics_particle_set_density",
        "documentation": "With this function you can set the density of the particles in a physics simulation. Setting the density of the particle will have a direct impact on how much inertia it has as well as how it reacts to collisions, so if you make a small particle with a high density it will have a very large mass, but if you define a large particle with a low density it will have a much smaller mass. This function is _global_ in scope, in that it will change the density not just for new particles created after the change, but also for those already present in the simulation.",
        "return": "N/A"
    },
    "device_mouse_check_button_released": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button_released(0, mb_left)<br> {<br> press=false;<br> }<br>",
            "description": ""
        },
        "signature": "device_mouse_check_button_released(device, button);",
        "function": "device_mouse_check_button_released",
        "documentation": "This function returns true or false depending on whether the device touch that you specify has been released or not. The _device_ argument refers to the device touch number, which can be from 0 to _n_ and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs. This function is only triggered _once_ by the actual releasing action, and the standard constants of mb_left and mb_right can be used to check for either button.",
        "return": "Boolean"
    },
    "file_copy": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to copy."
            },
            {
                "label": "newname",
                "documentation": "The name of the new, copied, file."
            }
        ],
        "example": {
            "code": "if file_exists(\"level1.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_copy(\"level1.txt\", \"level2.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "file_copy(fname, newname);",
        "function": "file_copy",
        "documentation": "This function will copy the specified file, giving it the new name that you choose. If you are copying a file on _Android_ from within your **Included Files** area (which will be inside your APK) it will copy into memory first, so, be aware that copying very large files from the APK may cause devices to run out of memory. On the HTML5 target, we use the HTML5 **Local Storage API** for client side saving, and the functions does not support binary file operations, so assumes you are copying a text file.  \n  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "N/A"
    },
    "font_replace_sprite": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the font that shall be replaced (ie all references to this resource past this function will refer to the new font, not the original)."
            },
            {
                "label": "spr",
                "documentation": "The sprite to add a font based on."
            },
            {
                "label": "first",
                "documentation": "The index of the first available character."
            },
            {
                "label": "prop",
                "documentation": "Whether white space around each letter should be removed (if false, the created font will be monospaced, otherwise it'll be like most regular fonts)."
            },
            {
                "label": "sep",
                "documentation": "The space between each letter, 0 meaning the right of one letter just touches the left of the next one."
            }
        ],
        "example": {
            "code": "font_replace_sprite(global.Font, working_directory + \"Sprites\\spr_Font.png\", ord(\"!\"), true, 2);<br>",
            "description": ""
        },
        "signature": "font_replace_sprite(ind, spr, first, prop, sep);",
        "function": "font_replace_sprite",
        "documentation": "With this function you can use a \"sprite strip\" to replace a previously created sprite font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with \"!\" but remember that you should only include what you need and that you should be using the [ord](../strings/ord.html) function to get the correct UTF8 value for the starting letter.",
        "return": "N/A"
    },
    "instance_furthest": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check for instances far from."
            },
            {
                "label": "y",
                "documentation": "The y position to check for instances far from."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instances of."
            }
        ],
        "example": {
            "code": "var inst;<br> inst = instance_furthest(x, y, object_index);<br> if inst != id<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_line(x, y, inst.x, inst.y);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_furthest(x, y, obj);",
        "function": "instance_furthest",
        "documentation": "This function will check all the instances of the given object to see which is furthest from the given point of origin. If no instances of the object exist, the function will return the keyword _noone_, but if there are instances then it will return the [id](../instance_variables/id.html) of the instance found. Please note that if the instance running the code was created as an instance of the object being checked, then it will be included in the check.",
        "return": "Real (either an instance ID value or the keyword <tt>noone</tt>)"
    },
    "tilemap_get_global_mask": {
        "parameters": [],
        "example": {
            "code": "var mask = tilemap_get_global_mask(map_id);<br> var new_mask = tile_mirror | tile_flip | tile_rotate | 255;<br> if mask != new_mask<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;tilemap_set_global_mask(new_mask);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_get_global_mask();",
        "function": "tilemap_get_global_mask",
        "documentation": "",
        "return": "Real (0 for no mask, -1 for an error, mask value otherwise)"
    },
    "string_byte_at": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to check."
            },
            {
                "label": "index",
                "documentation": "The position to get the byte from."
            }
        ],
        "example": {
            "code": "newbyte = string_byte_at(\"Hello World\", 5);",
            "description": ""
        },
        "signature": "string_byte_at(str, index);",
        "function": "string_byte_at",
        "documentation": "Returns the raw byte value as a real value at a given position in the given string.",
        "return": "Real"
    },
    "ds_map_clear": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to clear."
            }
        ],
        "example": {
            "code": "if global.new_game<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_map_clear(inventory);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_clear(id);",
        "function": "ds_map_clear",
        "documentation": "This function will clear the (previously created) ds\\_map of all key/value pairs, but it will not delete the ds\\_map itself from memory. For that you should use the function [ds\\_map\\_destroy](ds_map_destroy.html).",
        "return": "N/A."
    },
    "part_type_shape": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to set."
            },
            {
                "label": "shape",
                "documentation": "The shape to choose."
            }
        ],
        "example": {
            "code": "global.p1 = part_type_create();<br> part_type_shape(global.p1, pt_shape_square);<br> part_type_size(global.p1, 1, 3, 0, 0);<br> part_type_scale(global.p1, 1, 1);<br> part_type_colour1(global.p1, c_white);<br> part_type_alpha2(global.p1, 1, 0);<br> part_type_speed(global.p1, 2, 4, 0, 0);<br> part_type_direction(global.p1, 0, 180, 0, 0);<br> part_type_gravity(global.p1, 0.20, 270);<br> part_type_orientation(global.p1, 0, 0, 0, 0, 1);<br> part_type_blend(global.p1, 1);<br> part_type_life(global.p1, 15, 60);<br>",
            "description": ""
        },
        "signature": "part_type_shape(ind, shape);",
        "function": "part_type_shape",
        "documentation": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
        "return": "N/A"
    },
    "layer_get_script_begin": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "if layer_get_script_begin(layer) == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_script_begin(layer, scr_SetShaderValues);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_script_begin(layer_id);",
        "function": "layer_get_script_begin",
        "documentation": "",
        "return": "Script Index (Real) or -1 if no script is assigned"
    },
    "camera_get_end_script": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var scr = camera_get_end_script(camera_view[0]);<br> if scr != scr_cutscene<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_update_script(camera_view[0], scr_cutscene);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_end_script(camera_id)",
        "function": "camera_get_end_script",
        "documentation": "This function can be used to retrieve the ID of the script assigned as the end script for the given camera. If no script is assigned then the function will return -1.",
        "return": "Script ID or -1 if no script assigned"
    },
    "keyboard_clear": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to clear."
            }
        ],
        "example": {
            "code": "keyboard_clear(vk_space);<br>",
            "description": ""
        },
        "signature": "keyboard_clear(key);",
        "function": "keyboard_clear",
        "documentation": "With this function you can clear the current keyboard state, which essentially means that if the key is being held down, it will no longer be recognised until it is released again (which won't generate a [keyboard\\_key\\_release](keyboard_key_release.html) event either on this occasion) and pressed again.",
        "return": "N/A"
    },
    "ds_list_copy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list being copied to."
            },
            {
                "label": "source",
                "documentation": "The id of the list to be copied from."
            }
        ],
        "example": {
            "code": "if !ds_list_empty(main_list)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;old_list = ds_list_create();<br> &nbsp;&nbsp;&nbsp;ds_list_copy(old_list, main_list);<br> &nbsp;&nbsp;&nbsp;ds_list_clear(main_list);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_copy( id, source );",
        "function": "ds_list_copy",
        "documentation": "With this function you can copy the contents of one list into another. Both lists must have been created previously and if the list being copied _to_ already has information within it, this list will be cleared first. The end result is two independent lists which contain the same information.",
        "return": "N/A"
    },
    "ds_map_find_next": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use"
            },
            {
                "label": "key",
                "documentation": "The key to find the next one to."
            }
        ],
        "example": {
            "code": "var size, key, i;<br> size = ds_map_size(inventory);<br> key = ds_map_find_first(inventory);<br> for (i = 0; i &lt; size; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if key != \"gold\" key = ds_map_find_next(inventory, key) else break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_find_next(id, key);",
        "function": "ds_map_find_next",
        "documentation": "This function returns the next key stored in the ds_map _after_ the one specified in the function. This can be useful if your have to iterate through the ds_map looking for something, but should be avoided if possible as it can be slow. If no such key exists then the function will return <undefined>. You should always check this using the [is_undefined()](../../../3_gml_overview/checking_data_types/is_undefined.html) function.",
        "return": "Real, string or undefined"
    },
    "image_blend": {
        "parameters": [],
        "example": {
            "code": "image_blend = make_colour_hsv(255, 255, random(255));",
            "description": ""
        },
        "signature": "image_blend;",
        "function": "image_blend;",
        "documentation": "",
        "return": "Real"
    },
    "matrix_build_identity": {
        "parameters": [],
        "example": {
            "code": "i_matrix = matrix_build_identity();<br>",
            "description": ""
        },
        "signature": "matrix_build_identity();",
        "function": "matrix_build_identity",
        "documentation": "This will build a 4x4 identity matrix with the following structure:",
        "return": "Matrix index"
    },
    "mp_grid_create": {
        "parameters": [
            {
                "label": "xstart",
                "documentation": "Starting x coordinate of the mp_grid in the room"
            },
            {
                "label": "ystart",
                "documentation": "Starting y coordinate of the mp_grid in the room"
            },
            {
                "label": "hcells",
                "documentation": "Number of horizontal cells that the mp_grid will contain"
            },
            {
                "label": "vcells",
                "documentation": "Number of vertical cells that the mp_grid will contain"
            },
            {
                "label": "cellwidth",
                "documentation": "The width (in pixels) of each individual cell of the mp_grid"
            },
            {
                "label": "cellheight",
                "documentation": "The height (in pixels) of each individual cell of the mp_grid"
            }
        ],
        "example": {
            "code": "global.grid = mp_grid_create(0, 0, room_width / 32, room_height /32, 32, 32)<br>",
            "description": ""
        },
        "signature": "mp_grid_create(xstart, ystart, hcells, vcells, cellwidth, cellheight):",
        "function": "mp_grid_create",
        "documentation": "With this function you can create an mp\\_grid for the motion planning functions. It returns an index that must be used in all other mp\\_grid function calls. The x and y coordinates indicate the position of the top-left corner of the grid, hcells and vcells indicate the number of horizontal and vertical cells to be created within the grid, and cell width and cell height indicate the size of the cells in pixels. You can create and maintain multiple grid structures at the same moment if you need them for different things, but be aware that these are complex functions and the more you use and the higher the cell resolution then the slower your game could be.",
        "return": "Real."
    },
    "layer_sprite_angle": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "angle",
                "documentation": "The angle of the sprite (default is 0)"
            }
        ],
        "example": {
            "code": "var asset_sprite = layer_sprite_get_id(layer, \"gfc_Trees\");<br> if layer_sprite_get_angle(asset_sprite) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_angle(asset_sprite, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_angle(sprite_element_id, angle);",
        "function": "layer_sprite_angle",
        "documentation": "",
        "return": "N/A"
    },
    "steam_get_user_account_id": {
        "parameters": [],
        "example": {
            "code": "global.user_id = steam_get_user_account_id();<br>",
            "description": ""
        },
        "signature": "steam_get_user_account_id();",
        "function": "steam_get_user_account_id",
        "documentation": "This function is used retrieve the unique User ID that Steam assigns to each user, which is required for using some of the [User Generated Content](user%20generated%20content/index.html) functions.",
        "return": "Real"
    },
    "steam_ugc_set_item_description": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "description",
                "documentation": "The description (a string - max 8000 characters) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_set_item_description(ugc_update_handle, description);",
        "function": "steam_ugc_set_item_description",
        "documentation": "This function will set the description to be used for the given item. The description should be a string and the update handle is the value returned when you called the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html). The function will return true if the API was successfully accessed and false if there was an issue.",
        "return": "Boolean"
    },
    "steam_ugc_unsubscribe_item": {
        "parameters": [
            {
                "label": "published_file_id",
                "documentation": "The unique file ID for the UGC to unsubscribe from."
            }
        ],
        "example": {
            "code": "steam_sub = steam_ugc_subscribe_item(global.pubFileID);",
            "description": ""
        },
        "signature": "steam_ugc_unsubscribe_item(published_file_id);",
        "function": "steam_ugc_unsubscribe_item",
        "documentation": "This function can be used to unsubscribe from a UGC item. You supply the published file ID and then the function returns a unique async ID value which can be used to check that the item has been unsubscribed correctly in the Steam Async event. This event will have the async_load DS map which will be populated with the following key/value pairs:",
        "return": "Async ID"
    },
    "browser_height": {
        "parameters": [],
        "example": {
            "code": "if browser_height &gt; window_get_height() || browser_width &gt; window_get_width()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx, yy;<br> &nbsp;&nbsp;&nbsp;if browser_width &gt; window_get_width()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx = (browser_width - window_get_width()) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;if browser_height &gt; window_get_height()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy = (browser_height - window_get_height()) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;window_set_position(xx, yy);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "browser_height",
        "function": "browser_height",
        "documentation": "This variable holds the height (in pixels) of the browser the game is being run in. If no browser is present then the window size is returned. the following image illustrates how this variable relates to the rest of the positioning functions available through the [Window Functions](../cameras%20and%20display/display/the%20game%20window/index.html).  \n  \n![](../cameras%20and%20display/display/the%20game%20window/images/window_position.png)",
        "return": "Real"
    },
    "view_get_yport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "if view_get_yport(0) != (display_get_height() / 2) - (view_hport[0] / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_yport(0, (display_get_height() / 2) - (view_hport[0] / 2));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_get_yport(view_port)",
        "function": "view_get_yport",
        "documentation": "This function can be used to retrieve the y position of the given view port.",
        "return": "Real"
    },
    "part_emitter_burst": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system that the emitter is in."
            },
            {
                "label": "ind",
                "documentation": "The index of the emitter to burst from."
            },
            {
                "label": "parttype",
                "documentation": "The index (type) of the particles to be created."
            },
            {
                "label": "number",
                "documentation": "The number of particles to create."
            }
        ],
        "example": {
            "code": "part_emitter_burst(global. Sname, p_emit1, p1, 30 + irandom(30));",
            "description": ""
        },
        "signature": "part_emitter_burst(ps, ind, parttype, number);",
        "function": "part_emitter_burst",
        "documentation": "This function allows you to set an emitter to burst a specific type of particle and is typically used in alarms and destroy events as it is a one off code that creates the number of particles specified all at once following the distribution, shape and position set by the function [part\\_emitter\\_region](part_emitter_region.html). Should you need the particles to appear every step, you should be using the function [part\\_emitter\\_stream](part_emitter_stream.html) rather than calling this function every step.",
        "return": "N/A"
    },
    "vertex_argb": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "a",
                "documentation": "The alpha value for the colour (0 - 255)."
            },
            {
                "label": "r",
                "documentation": "The red component part of a colour (0 - 255)."
            },
            {
                "label": "g",
                "documentation": "The green component part of a colour (0 - 255)."
            },
            {
                "label": "b",
                "documentation": "The blue component part of a colour (0 - 255)."
            }
        ],
        "example": {
            "code": "vertex_argb(buff, $FFFFFFFF);",
            "description": ""
        },
        "signature": "vertex_argb(buffer, argb);",
        "function": "vertex_argb",
        "documentation": "This function will set the ARGB values for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the red, green, blue and alpha values that you wish to use as a single 32-bit unsigned integer - alpha sample in the highest 8 bits, followed by the red sample, green sample and finally the blue sample in the lowest 8 bits. You can use hex notation ($AARRGGBB) a real number or use any of the make\\_colour\\_*() functions to define the colour value.",
        "return": "N/A"
    },
    "audio_emitter_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the emitter to check the existence of."
            }
        ],
        "example": {
            "code": "if audio_emitter_exists(s_emit)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound_on(s_emit, snd_Explode, false, 1);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;s_emit = audio_emitter_create();<br> &nbsp;&nbsp;&nbsp;audio_play_sound_on(s_emit, snd_Explode, false, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_exists(index);",
        "function": "audio_emitter_exists",
        "documentation": "This function returns whether an audio emitter exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent indices.",
        "return": "Boolean"
    },
    "window_views_mouse_get_y": {
        "parameters": [],
        "example": {
            "code": "myy = window_views_mouse_get_y();",
            "description": ""
        },
        "signature": "window_views_mouse_get_y();",
        "function": "window_views_mouse_get_y",
        "documentation": "This function returns the y-coordinate of the mouse with respect to all the active views and returns the same value [mouse_y](../../../controls/mouse%20input/mouse_y.html).",
        "return": "Real"
    },
    "device_mouse_raw_x": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left) &amp;&amp; device_mouse_check_button(1, mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x_av = mean(device_mouse_raw_x(0), device_mouse_raw_x(1));<br> &nbsp;&nbsp;&nbsp;y_av = mean(device_mouse_raw_y(0), device_mouse_raw_y(1));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_raw_x(device);",
        "function": "device_mouse_raw_x",
        "documentation": "This function returns the raw x position of a touch on the device. What this means is that it returns the actual device definition of the x position that is being touched, _not_ the _GameMaker Studio 2_ one, and as such will ignore things like view position and scaling. Note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.  \n  \n_**Note:** This function is very much device dependant and you should experiment first with the desired target module and device to see what exactly is returned._",
        "return": "Real"
    },
    "draw_light_enable": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index number of the light (from 0 to 7)"
            },
            {
                "label": "enable",
                "documentation": "Enable or disable all lighting (true or false)"
            }
        ],
        "example": {
            "code": "draw_set_lighting(true);<br> draw_light_define_direction(1, 0, 1, 0, c_white);<br> draw_light_enable(1, true);<br>",
            "description": ""
        },
        "signature": "draw_light_enable(ind, enable)",
        "function": "draw_light_enable",
        "documentation": "This function is used to enable a defined light. When you define a positional or a directional light you must assign it an index number which is then used by this function to switch the light on or off. Default is disabled (false).",
        "return": "N/A"
    },
    "part_particles_create": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to create the particles."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to create the particles."
            },
            {
                "label": "parttype",
                "documentation": "The index (type) of the particles to be created."
            },
            {
                "label": "number",
                "documentation": "The number of particles to create."
            }
        ],
        "example": {
            "code": "if mouse_check_button(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_particles_create(sname, mouse_x, mouse_y, p_CursorEffect, 5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_particles_create(ind, x, y, parttype, number);",
        "function": "part_particles_create",
        "documentation": "This function is ideal for those effects that do not require any of the functionality offered by [particle emitters](../particle%20emitters/index.html) (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. Note that you must have created the particle system and the particle type previously for this function to be used.",
        "return": "N/A"
    },
    "delta_time": {
        "parameters": [],
        "signature": "delta_time",
        "function": "delta_time",
        "documentation": "The purpose of delta timing is to eliminate the effects of the lag or slowness of computers that try to handle complex graphics or a lot of code. It is a value that can be added on to the speed of objects so that they will eventually move at the same speed, regardless of lag. This is achieved in _GameMaker Studio 2_ by using the **read only** variable delta_time every step as it measures the time that has passed between one step and the next in microseconds (1microsecond is 1,000,000th of a second). Therefore the variable delta_time can be used to calculate how much faster (for example) a game character has to move to make up for a lag spike in the game.",
        "return": "Real"
    },
    "place_empty": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check."
            },
            {
                "label": "y",
                "documentation": "The y position to check."
            }
        ],
        "example": {
            "code": "if place_empty(mouse_x, mouse_y)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = mouse_x;<br> &nbsp;&nbsp;&nbsp;y = mouse_y;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "place_empty(x, y);",
        "function": "place_empty",
        "documentation": "You can use this function to check and see if the calling instance would collide with _any other instance_ in your game. Now, it should be noted that for this to work, the instance running the code must have a valid collision mask (either for the sprite itself, or through the [mask_index](../../instances/instance_variables/mask_index.html)) and it will only register collisions with those instances that also have a valid mask.  \n  \nThe function itself basically works by taking the instance and testing for collisions when placed at the position specified by the x/y arguments. The collision checking can be either precise or based on the bounding box of the instance, depending on what kind of collision mask has been selected.  \n  \nNote that the given x/y coordinates will be floored to the nearest integer before the check is performed.",
        "return": "Boolean."
    },
    "mp_potential_path_object": {
        "parameters": [
            {
                "label": "path",
                "documentation": "index of the path that is to be used by the function"
            },
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "factor",
                "documentation": "This number is used to prevent an infinite loop. It should be larger than 1. See the function description for more information."
            },
            {
                "label": "obj",
                "documentation": "The object that is to block the path. Can be an object index, an instance id or the special keyword ,all"
            }
        ],
        "example": {
            "code": "path = path_add();<br> mp_potential_path_object(path, obj_Player.x, obj_Player.y, 3, 4, obj_Wall);<br> path_start(path, 3, 0, 0);<br>",
            "description": ""
        },
        "signature": "mp_potential_path_object(path, xgoal, ygoal, stepsize, factor, obj)",
        "function": "mp_potential_path_object",
        "documentation": "This function computes a path for the instance from its current position _and orientation_ to the position specified by the xgoal, ygoal arguments. It uses the indicated step size while trying to avoid collision with instances of the object specified by the \"obj\" argument. Like in the function [mp\\_potential\\_step](mp_potential_step.html) it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function [mp\\_potential\\_settings](mp_potential_settings.html). The indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).  \n  \nTo avoid the function continuing to compute forever you need to provide a factor of larger than 1 - the function will stop and report failure if it cannot find a path shorter than this factor times the distance between start and goal. A factor of 4 is normally good enough but if you expect long detours you might make it longer. If it fails a path is still created that runs in the approximate direction of the goal but it will not reach it.  \n  \n_**Note:** This function does not move the instance. It sets a path only, and you must use the [Path](../../paths/index.html) functions for movement._",
        "return": "Boolean."
    },
    "layer_background_get_xscale": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_xscale(back_id) != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_xscale(back_id, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_xscale(background_element_id);",
        "function": " layer_background_get_xscale",
        "documentation": "",
        "return": "Real"
    },
    "room_restart": {
        "parameters": [],
        "example": {
            "code": "if lives &lt; 1 room_restart();",
            "description": ""
        },
        "signature": "room_restart();",
        "function": "room_restart",
        "documentation": "This function will restart the current room, as if it had just been entered.",
        "return": "N/A"
    },
    "audio_play_sound_on": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            },
            {
                "label": "sound",
                "documentation": "The index of the sound to use."
            },
            {
                "label": "loop",
                "documentation": "Flags the sound as looping or not."
            },
            {
                "label": "priority",
                "documentation": "Set the channel priority for the sound."
            }
        ],
        "example": {
            "code": "if global.SFX<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound_on(s_emit, snd_Explode, false, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_play_sound_on(emitter, sound, loop, priority);",
        "function": "audio_play_sound_on",
        "documentation": "With this function you can play any sound resource through an emitter, with any changes to the emitter gain, position, pitch or velocity affecting how the user hears the final sound being played. You provide the emitter index to use, the sound index of the sound to be played and then specify whether the sound is to loop or not. Finally you can assign a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function [audio\\_channel\\_num](audio_channel_num.html). Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as _GameMaker Studio 2_ will prioritize them the same).",
        "return": "Index"
    },
    "buffer_resize": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to change the size of."
            },
            {
                "label": "newsize",
                "documentation": "The new size of the buffer (in bytes)."
            }
        ],
        "example": {
            "code": "if buffer_get_size(buff) &lt; 16384<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;buffer_resize(buff, 16384);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "buffer_resize(buffer, newsize);",
        "function": "buffer_resize",
        "documentation": "With this function you can resize a given buffer to be the size (in bytes) that you specify.",
        "return": "N/A"
    },
    "view_set_camera": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var cam = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1);<br> view_set_camera(0, cam);<br>",
            "description": ""
        },
        "signature": "view_set_camera(view_port, camera_id)",
        "function": "view_set_camera",
        "documentation": "This function will set a camera to a specific view port. You give the view port to set (from 0 to 7), and supply the unique camera ID value (as returned by the camera_create functions or when you use view\\_get\\_camera()). If you give a value of -1 as the camera ID then you are removing a camera from the view port and note that if that view port is enabled and visible you may get some unpredictable results.",
        "return": "N/A"
    },
    "ds_priority_empty": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if count == 15 &amp;&amp; !ds_priority_empty(command_queue)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_priority_clear(command_queue);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_empty(id);",
        "function": "ds_priority_empty",
        "documentation": "With this function you can check the given ds_priority queue to see if it is empty (returns true) or not (returns false).",
        "return": "Boolean"
    },
    "ef_smoke": {
        "parameters": [],
        "example": {
            "code": "if speed &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_below(ef_smoke, x, y, choose(0, 1, 2), c_gray);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_smoke;",
        "function": "ef_smoke;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a smoke effect as illustrated in the image below:  \n  \n![](images/ef_smoke.png)",
        "return": "N/A."
    },
    "directory_create": {
        "parameters": [
            {
                "label": "dname",
                "documentation": "The name of the directory to create."
            }
        ],
        "example": {
            "code": "if !directory_exists(\"Games\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;directory_create(\"Games\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "directory_create(dname)",
        "function": "directory_create",
        "documentation": "This function will creates a directory with the given name in the sandboxed local save area.",
        "return": "N/A"
    },
    "mp_potential_step_object": {
        "parameters": [
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "obj",
                "documentation": "The object that is to block the path of the instance running the function. Can be an object index, an instance id or the special keyword ,all."
            }
        ],
        "example": {
            "code": "if instance_exists(obj_Enemy)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var inst;<br> &nbsp;&nbsp;&nbsp;inst = instance_nearest(x, y, obj_Enemy);<br> &nbsp;&nbsp;&nbsp;mp_potential_step_object(inst.x, inst.y, 5, obj_Wall);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_potential_step_object(xgoal, ygoal, stepsize, obj)",
        "function": "mp_potential_step_object",
        "documentation": "This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into an instance of the object specified by the \"obj\" argument it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.",
        "return": "Boolean."
    },
    "sprite_prefetch": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The sprite index to fetch"
            }
        ],
        "example": {
            "code": "sprite_prefetch(spr_Player_Aura);",
            "description": ""
        },
        "signature": "sprite_prefetch(ind)",
        "function": "sprite_prefetch",
        "documentation": "This function can be used to prefetch (place into texture memory) a texture page with the given sprite. You supply the sprite index as defined when you created the sprite asset, and the texture page it is on will be loaded into memory.",
        "return": "N/A"
    },
    "window_set_min_height": {
        "parameters": [
            {
                "label": "height",
                "documentation": "The minimum height in pixels for the game window."
            }
        ],
        "example": {
            "code": "window_set_min_width(640);<br> window_set_min_height(480);<br> window_set_max_width(1280);<br> window_set_max_height(960);<br>",
            "description": ""
        },
        "signature": "window_set_min_height(height);",
        "function": "window_set_min_height",
        "documentation": "",
        "return": "N/A"
    },
    "surface_getpixel_ext": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to use."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of the pixel to check"
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the pixel to check"
            }
        ],
        "example": {
            "code": "col = surface_getpixel_ext(mouse_x, mouse_y);<br> alpha = (col &gt;&gt; 24) &amp; 255;<br> blue = (col &gt;&gt; 16) &amp; 255;<br> green = (col &gt;&gt; 8) &amp; 255;<br> red = col &amp; 255;<br>",
            "description": ""
        },
        "signature": "surface_getpixel_ext(surface_id, x, y);",
        "function": "surface_getpixel_ext",
        "documentation": "With this function you can get the full **abgr 32bit** value of any pixel of a (previously created) surface.",
        "return": "Real"
    },
    "font_texture_page_size": {
        "parameters": [],
        "example": {
            "code": "font_texture_page_size = 512;<br> newfont = font_add( 'Arial', 24, true, true, 32, 128);<br>",
            "description": ""
        },
        "signature": "font_texture_page_size;",
        "function": "font_texture_page_size;",
        "documentation": "This **built-in variable** can be used to either get or set the texture page size when using the function [font_add](font_add.html). On adding a font using that function, _GameMaker Studio 2_ will create a texture page cache of the required glyphs up to the size defined by this variable. The process is as follows:",
        "return": "Real (maximum width/height in pixels)"
    },
    "current_weekday": {
        "parameters": [],
        "example": {
            "code": "var day;<br> switch(current_weekday)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 0: day = \"Sunday\"; break;<br> &nbsp;&nbsp;&nbsp;case 1: day = \"Monday\"; break;<br> &nbsp;&nbsp;&nbsp;case 2: day = \"Tuesday\"; break;<br> &nbsp;&nbsp;&nbsp;case 3: day = \"Wednesday\"; break;<br> &nbsp;&nbsp;&nbsp;case 4: day = \"Thursday\"; break;<br> &nbsp;&nbsp;&nbsp;case 5: day = \"Friday\"; break;<br> &nbsp;&nbsp;&nbsp;case 6: day = \"Saturday\"; break;<br> &nbsp;&nbsp;&nbsp;}<br> draw_text(32, 32, \"Today is \" + day +\".\");<br>",
            "description": ""
        },
        "signature": "current_weekday;",
        "function": "current_weekday;",
        "documentation": "This **read only** variable will return the weekday as a value, where Sunday is 0 and Saturday is 6.",
        "return": "Real"
    },
    "date_compare_datetime": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "d = date_compare_datetime(date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime());",
            "description": ""
        },
        "signature": "date_compare_datetime(date1, date2);",
        "function": "date_compare_datetime",
        "documentation": "With this function you can check two dates and times to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 1 if date1 is later and 0 if they are the same, although since this takes time into account as well, a 0 for matching is very rare (it literally has to be the same second of the same day of the same month of the same year to return a 0).",
        "return": "Real"
    },
    "physics_fixture_set_box_shape": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "halfWidth",
                "documentation": "the half width of the box"
            },
            {
                "label": "halfHeight",
                "documentation": "the half height of the box"
            }
        ],
        "example": {
            "code": "physics_fixture_set_box_shape(fix_Border, room_width/2, 10);",
            "description": ""
        },
        "signature": "physics_fixture_set_box_shape(fixture, halfWidth, halfHeight)",
        "function": "physics_fixture_set_box_shape",
        "documentation": "This function defines a box shape for your fixture. It takes the _half_ width and height as the physics world uses this value far more than whole width/height values to determine things like collisions.",
        "return": "N/A"
    },
    "physics_fixture_set_circle_shape": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "rad",
                "documentation": "radius of the circle"
            }
        ],
        "example": {
            "code": "physics_fixture_set_circle_shape(fix_Ball, sprite_get_width(spr_Ball) / 2);",
            "description": ""
        },
        "signature": "physics_fixture_set_circle_shape(fixture, rad)",
        "function": "physics_fixture_set_circle_shape",
        "documentation": "This function defines a circle shape for your fixture with a radius defined by the argument \"rad\".",
        "return": "N/A"
    },
    "physics_particle_set_flags": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the particle."
            },
            {
                "label": "flags",
                "documentation": "The flags to set on the particle."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> physics_particle_set_flags(p, flags);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_flags(index, flags)",
        "function": "physics_particle_set_flags",
        "documentation": "With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function [physics\\_particle\\_create](physics_particle_create.html), while the flags are the return value of a combination of the following **constants**:",
        "return": "Real"
    },
    "steam_ugc_download": {
        "parameters": [
            {
                "label": "ugc_handle",
                "documentation": "The unique handle for the preview to be downloaded."
            },
            {
                "label": "dest_filename",
                "documentation": "The file name to save the preview with."
            }
        ],
        "signature": "steam_ugc_download(ugc_handle, dest_filename);",
        "function": "steam_ugc_download",
        "documentation": "With this function you can download a preview image for any given UGC item. The ugc_handle is the unique identifying value for the image (which you can get using the function [steam\\_ugc\\_send_query()](steam_ugc_send_query.html)), and the destination filename is the name (and local path within the Steam sandbox) that you wish to give the image file when the download is complete.  \n  \nWhen using this function it will trigger an [Steam Asynchronous](../../../../2_interface/1_editors/events/async_events.html) event to report the details of the image file requested containing the following key/value pairs in the async_load ds_map:",
        "return": "Async ID"
    },
    "steam_ugc_set_item_title": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "title",
                "documentation": "The title (a string - max 128 characters) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_set_item_title(ugc_update_handle, title);",
        "function": "steam_ugc_set_item_title",
        "documentation": "This function will set the title to be used for the given item. The title should be a string and the update handle is the value returned when you called the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html). The function will return true if the API was successfully accessed and false if there was an issue.",
        "return": "Boolean"
    },
    "clipboard_set_text": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The text (as a string) to set the clipboard to hold."
            }
        ],
        "example": {
            "code": "if clipboard_has_text()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;str = clipboard_get_text();<br> &nbsp;&nbsp;&nbsp;clipboard_set_text(\"\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "clipboard_set_text(string);",
        "function": "clipboard_set_text",
        "documentation": "This function will set the clipboard to hold the defined string. You can set it to an empty string \"\" to effectively clear the clipboard of text.",
        "return": "N/A"
    },
    "draw_set_colour": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to set for drawing."
            }
        ],
        "example": {
            "code": "draw_set_alpha(0.5);<br> draw_set_colour(c_black);<br> draw_text(x+5, y+5, \"LEVEL 1\");<br> draw_set_alpha(1);<br> draw_set_colour(c_white);<br> draw_text(x, y, \"LEVEL 1\");<br>",
            "description": ""
        },
        "signature": "draw_set_colour(col);",
        "function": "draw_set_colour",
        "documentation": "With this function you can set the base draw colour for the game. This value will affect all further drawing where appropriate, including fonts, forms, primitives and 3D. If any of those assets are drawn with their own colour value changed, this value will be ignored.",
        "return": "N/A"
    },
    "part_emitter_stream": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system that the emitter is in."
            },
            {
                "label": "ind",
                "documentation": "The index of the emitter to burst from."
            },
            {
                "label": "parttype",
                "documentation": "The index (type) of the particles to be created."
            },
            {
                "label": "number",
                "documentation": "The number of particles to create per step."
            }
        ],
        "example": {
            "code": "part_emitter_stream(global. Sname, p_emit1, p1, 1);",
            "description": ""
        },
        "signature": "part_emitter_stream(ps, ind, parttype, number);",
        "function": "part_emitter_stream",
        "documentation": "This function allows you to set an emitter to stream a specific type of particle and is typically used the create event as it is a one off code that sets the emitter to generate the number of particles specified every step of the game there-after. The particles are emitted following the distribution, shape and position set by the function [part\\_emitter\\_region](part_emitter_region.html). You can set the number of particles being streamed to zero and call this function again to \"switch off\" the particle streaming, and the function will also accept negative numbers for the amount, in which case the emitter will produce particles based on random chance. For example, if you have the particle number set to -5, there is a 1:5 chance that a particle will be produced every step. Should you need the particles to appear all at once rather than every step, you should be using the function [part\\_emitter\\_burst](part_emitter_burst.html).",
        "return": "N/A"
    },
    "draw_surface_stretched": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            },
            {
                "label": "w",
                "documentation": "The width at which to draw the surface."
            },
            {
                "label": "h",
                "documentation": "The height at which to draw the surface."
            }
        ],
        "example": {
            "code": "draw_surface_stretched(surf, 10, 10, 100, 100);",
            "description": ""
        },
        "signature": "draw_surface_stretched(id, x, y, w, h);",
        "function": "draw_surface_stretched",
        "documentation": "This function simply takes a surface and stretches it over the given width and height so that it occupies the area. As with [draw_surface](draw_surface.html) you can specify a surface and then the x / y position in the room for the surface to be drawn at and finally a width and a height (which must be pixel values).",
        "return": "N/A"
    },
    "cursor_sprite": {
        "parameters": [],
        "example": {
            "code": "cursor_sprite = spr_CustomCursor;",
            "description": ""
        },
        "signature": "cursor_sprite;",
        "function": "cursor_sprite;",
        "documentation": "Setting this variable will instruct _GameMaker Studio 2_ to use the designated sprite as a cursor (basically setting it to the current mouse x/y position every step). The default value is -1 which is no sprite for the cursor, but you can assign any sprite index from the game assets or that has been imported from an external resource. Please note that there is no way to control the animation speed or image_index, so if the sprite has sub-images, these will be cycled at the same speed as the room speed. To remove the cursor sprite, you can set this variable to -1 again.  \n  \nIt is also worth noting that this variable does _not_ replace the game window cursor, and that it will still be drawn as normal. To avoid this you can use the function [window\\_set\\_cursor](../cameras%20and%20display/display/the%20game%20window/window_set_cursor.html) and set it to the constant cr_none which will make the standard cursor invisible.",
        "return": "Real"
    },
    "external_free": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The name of the dll or dylib that you want to free"
            }
        ],
        "example": {
            "code": "external_free(\"MyDLL.dll\");<br>",
            "description": ""
        },
        "signature": "external_free(id);",
        "function": "external_free",
        "documentation": "This function frees the memory associated with the dll or dylib with the given name. This should be done whenever the file in question is no longer needed in the game, normally (for example) in a Game End event.",
        "return": "N/A"
    },
    "mp_grid_clear_rectangle": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the left side of the rectangle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top side of the rectangle to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right side of the rectangle to check."
            },
            {
                "label": "y2",
                "documentation": "The x coordinate of the bottom side of the rectangle to check."
            }
        ],
        "example": {
            "code": "mp_grid_clear_rectangle(grid, 0, 0, 100, 200);<br>",
            "description": ""
        },
        "signature": "mp_grid_clear_rectangle(id, x1, y1, x2, y2);",
        "function": "mp_grid_clear_rectangle",
        "documentation": "With this function you can define an area _in room coordinates_ which will then clear the corresponding cells in the specified mp_grid. Even if a cell partially falls within the defined rectangular region it will be cleared.",
        "return": "Boolean."
    },
    "physics_fixture_set_angular_damping": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "damping",
                "documentation": "the angular damping of the fixture, usually between 0 and 1"
            }
        ],
        "example": {
            "code": "physics_fixture_set_angular_damping(fix_Ball, 0.1);",
            "description": ""
        },
        "signature": "physics_fixture_set_angular_damping(fixture, damping)",
        "function": "physics_fixture_set_angular_damping",
        "documentation": "If you think about any rotating object in the \"real world\", unless it has a motor or is in space, it slows down over time due to the influence of external forces (like friction with the air around it). We can use the function physics\\_fixture\\_set\\_angular\\_damping() in _GameMaker Studio 2_ to simulate this effect and reduce the velocity of rotation of instances in the physics world, as, without it, any rotating instance would continue to rotate infinitely. Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 1, but you can use any non-negative value if required.",
        "return": "N/A"
    },
    "room_goto": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to go to."
            }
        ],
        "example": {
            "code": "switch (global.rm)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 0: room_goto(rm_level1); break;<br> &nbsp;&nbsp;&nbsp;case 1: room_goto(rm_level2); break;<br> &nbsp;&nbsp;&nbsp;case 2: room_goto(rm_level3); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_goto(index);",
        "function": "room_goto",
        "documentation": "",
        "return": "N/A"
    },
    "window_set_cursor": {
        "parameters": [
            {
                "label": "cursor",
                "documentation": "The cursor to set for the game window."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;window_set_cursor(cr_drag);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_set_cursor(cursor);",
        "function": "window_set_cursor",
        "documentation": "",
        "return": "N/A"
    },
    "draw_primitive_end": {
        "parameters": [],
        "example": {
            "code": "var tex;<br> tex = background_get_texture(back);<br> draw_primitive_begin_texture(pr_trianglestrip, tex);<br> draw_vertex_texture(0, 480, 0, 0);<br> draw_vertex_texture(640, 480, 1, 0);<br> draw_vertex_texture(640, 480, 1, 1);<br> draw_vertex_texture(0, 480, 0, 1);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_primitive_end()",
        "function": "draw_primitive_end",
        "documentation": "This function must be called when you have finished defining the points of your primitive. If you do not call this function, _nothing will be drawn_ as this effectively tells _GameMaker Studio 2_ that you have finished and that it can now draw the defined primitive.",
        "return": "N/A"
    },
    "draw_sprite_stretched_ext": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "w",
                "documentation": "The width of the area the stretched sprite will occupy."
            },
            {
                "label": "h",
                "documentation": "The height of the area the stretched sprite will occupy."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite. c_white is to display it normally."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_sprite_stretched_ext(sprite_index, image_index, x, y, sprite_width / 2, sprite_height / 2, c_white, 0.5);",
            "description": ""
        },
        "signature": "draw_sprite_stretched_ext(sprite, subimg, x, y, w, h, colour, alpha);",
        "function": "draw_sprite_stretched_ext",
        "documentation": "This function does exactly the same as the [draw\\_sprite\\_stretched](draw_sprite_stretched.html) function with the added ability to set the colour blending and alpha value for the sprite when it is drawn (similar to the function [draw\\_sprite\\_ext](draw_sprite_ext.html)).",
        "return": "N/A"
    },
    "date_get_timezone": {
        "parameters": [
            {
                "label": "timezone_local",
                "documentation": "use the local time zone as set by the system"
            },
            {
                "label": "timezone_utc",
                "documentation": "use Coordinated Universal Time"
            }
        ],
        "example": {
            "code": "if date_get_timezone() != timezone_utc<br> &nbsp;&nbsp;&nbsp;br&gt; &nbsp;&nbsp;&nbsp;date_set_timezone(timezone_utc);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "date_get_timezone();",
        "function": "date_get_timezone",
        "documentation": "Gets the base time zone being used for all the rest of the date and time functions. This time zone can either be _local_ (as set by the system) or _UTC_, and the function will return one of the following constants:",
        "return": "Constant"
    },
    "point_distance": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the first component of the vector"
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first component of the vector"
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second component of the vector"
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second component of the vector"
            }
        ],
        "example": {
            "code": "var ex, ey;<br> ex = instance_nearest(x, y, enemy).x;<br> ey = instance_nearest(x, y, enemy).y;<br> if point_distance(x, y, ex, ey) &lt; 200<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Bullets\", obj_Missile)<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "point_distance(x1, y1, x2, y2);",
        "function": "point_distance",
        "documentation": "This function returns the length of a vector formed by the specified components \\[x1,y1\\] and \\[x2,y2\\]. For example, in the image below if we want to get the distance between the player ship position and the enemy position so that we can calculate if the enemy is close enough to shoot at then we would use this function (the exact code is in the example below the image):  \n  \n![](images/point_distance.png)",
        "return": "Real"
    },
    "collision_point": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the point to check."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the point to check."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instance collisions."
            },
            {
                "label": "prec",
                "documentation": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
            },
            {
                "label": "notme",
                "documentation": "Whether the calling instance, if relevant, should be excluded (true) or not (false)."
            }
        ],
        "example": {
            "code": "if collision_point(x, y, obj_Cursor, false, true)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;Score += 10S;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "collision_point( x, y, obj, prec, notme );",
        "function": "collision_point",
        "documentation": "Collision point checks the point specified by the arguments x1,y1 for a collision with **any** instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for _must_ also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:  \n  \n![](images/collision_point_illustration.png)",
        "return": "Instance id or <b>noone</b>"
    },
    "buffer_copy_from_vertex_buffer": {
        "parameters": [
            {
                "label": "vertex_buffer",
                "documentation": "The index of the vertex buffer to copy from."
            },
            {
                "label": "start_vertex",
                "documentation": "The starting vertex."
            },
            {
                "label": "num_vertices",
                "documentation": "The total number of vertices to use."
            },
            {
                "label": "dest_buffer",
                "documentation": "The index of the buffer to copy to."
            },
            {
                "label": "dest_offset",
                "documentation": "The offset position to copy the data to (in bytes)."
            }
        ],
        "example": {
            "code": "var v_num = vertex_get_number(model_buff); buffer_copy_from_vertex_buffer(model_buffer, 0, v_num - 1, player_buffer, 0);<br>",
            "description": ""
        },
        "signature": "buffer_copy_from_vertex_buffer(vertex_buffer, start_vertex, num_vertices, dest_buffer, dest_offset);",
        "function": "buffer_copy_from_vertex_buffer",
        "documentation": "This function can be used to copy some (or all) of the vertex data stored in one vertex buffer into a previously created regular buffer. When copying from a vertex buffer into a regular buffer with this function, both buffers must have previously been created (using the [vertex\\_create\\_buffer()](../drawing/primitives/primitive%20building/vertex_create_buffer.html) and [buffer_create](buffer_create.html) functions, for example). You can specify the range of vertex data that you wish to copy into the buffer, where the start vertex can be anywhere between 0 and the number of vertices -1, and you can give the number of vertices from that point on to copy. You can use the function [vertex\\_get\\_number()](../drawing/primitives/primitive%20building/vertex_get_number.html) on the vertex buffer to get the total number of vertices stored. Finally you give the buffer index to copy the vertex data into, as well as a data offset to define the position to copy the vertex data to in the destination buffer.",
        "return": "N/A"
    },
    "instance_count": {
        "parameters": [],
        "example": {
            "code": "if (instance_count &lt; 100)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var dif = 100 - instance_count;<br> &nbsp;&nbsp;&nbsp;while (--dif &gt; 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(random(room_width), random(room_height), \"Effects\", obj_Star);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_count;",
        "function": "instance_count;",
        "documentation": "",
        "return": "Real"
    },
    "timeline_running": {
        "parameters": [],
        "example": {
            "code": "if !timeline_running<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_position = 0;<br> &nbsp;&nbsp;&nbsp;timeline_running = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_running;",
        "function": "timeline_running;",
        "documentation": "This variable holds current state of the assigned time line and will return true if it is running and false if it is not. You can also set this variable to either true or false to start and stop the time line at any time. it should be noted that a stopped time line is _not_ reset, and so starting it again at a later time will start it from the exact moment that it was stopped at.",
        "return": "Boolean"
    },
    "current_month": {
        "parameters": [],
        "example": {
            "code": "draw_text((32, 32, \"Today is \" + string(current_day) + \"/\" + string (current_month) + \"/\" + string(current_year) +\".\");",
            "description": ""
        },
        "signature": "current_month;",
        "function": "current_month;",
        "documentation": "This **read only** variable returns the current month as a numeric value where 1 is January and 12 is December.",
        "return": "Real"
    },
    "mp_grid_get_cell": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the grid to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the grid to check."
            }
        ],
        "example": {
            "code": "if mp_grid_get_cell(grid, mouse_x div 16, mouse_y div 16) == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_blend = c_red;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_blend = c_lime;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_grid_get_cell(id, x , y);",
        "function": "mp_grid_get_cell",
        "documentation": "With this function you can check any given cell of the mp\\_grid to see if it has been flagged as occupied or not, giving the index of the (previously created) mp\\_grid and the x an y coordinates of the cell to check. If it has been occupied or the position being checked is out of the grids bounds then the function will return -1 otherwise it will return 0.",
        "return": "Real"
    },
    "move_contact_solid": {
        "parameters": [
            {
                "label": "dir",
                "documentation": "The direction to move in."
            },
            {
                "label": "maxdist",
                "documentation": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
            }
        ],
        "example": {
            "code": "if !place_meeting(x, y + 1, obj_Floor)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;move_contact_solid(270, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "move_contact_solid( dir, maxdist );",
        "function": "move_contact_solid",
        "documentation": "This function will move the instance running the code a set number of pixels in the specified direction until it meets an instance with **solid** flagged as true. You can use -1 or 0 for the maxdist being a default 1000px, ie: _GameMaker Studio 2_ will move the instance continually up 1000 pixels until it is out of collision.",
        "return": "N/A"
    },
    "event_action": {
        "parameters": [],
        "example": {
            "code": "num = event_action;",
            "description": ""
        },
        "signature": "event_action;",
        "function": "event_action;",
        "documentation": "This **read-only** variable returned the index of the action currently being executed, starting at 0 on previous versions of GameMaker. However, this is **now an obsolete function** in _GameMaker Studio 2_. It has been left in for legacy support only, and will **always return 0** as all actions are concatenated together to improve execution speed.",
        "return": "Real"
    },
    "event_user": {
        "parameters": [
            {
                "label": "numb",
                "documentation": "The number of event to call, between 0 and 15."
            }
        ],
        "example": {
            "code": "event_user(4);",
            "description": ""
        },
        "signature": "event_user(numb);",
        "function": "event_user",
        "documentation": "With this function you tell the instance to run the actions or code that has been placed within one of the 16 user defined events. These events can _only_ be called in this way, or using the [event_perform](event_perform.html) function.",
        "return": "N/A"
    },
    "sprite_get_width": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to find the width of."
            }
        ],
        "example": {
            "code": "if sprite_width != sprite_get_width(sprite_index)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_xscale = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_get_width(index);",
        "function": "sprite_get_width",
        "documentation": "With this function you can find the width of the base resource sprite, with no transforms, in pixels.",
        "return": ""
    },
    "buffer_fill": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to fill."
            },
            {
                "label": "offset",
                "documentation": "The data offset value (in bytes)."
            },
            {
                "label": "type",
                "documentation": "The type of data that is to be written to the buffer (see the list of constants here)."
            },
            {
                "label": "value",
                "documentation": "The data to write."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer (in bytes) that you wish to fill."
            }
        ],
        "example": {
            "code": "map_buffer = buffer_create(16384, buffer_fixed, 0);<br> buffer_fill(map_buffer, 0, buffer_u16, 0, 16384);",
            "description": ""
        },
        "signature": "buffer_fill(buffer, offset, type, value, size);",
        "function": "buffer_fill",
        "documentation": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the [buffer_read](buffer_read.html) and [buffer_write](buffer_write.html) functions. The \"size\" is the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
        "return": "N/A"
    },
    "camera_set_view_border": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "x_border",
                "documentation": "The border (in pixels) for the view camera along the horizontal axis"
            },
            {
                "label": "y_border",
                "documentation": "The border (in pixels) for the view camera along the vertical axis"
            }
        ],
        "example": {
            "code": "camera_set_view_border(view_camera[0], 64, 64);",
            "description": ""
        },
        "signature": "camera_set_view_border(camera_id, x_border, y_border)",
        "function": "camera_set_view_border",
        "documentation": "You can use this function to set the follow border of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the x border size and the y border size (horizontal and vertical). These values will only be used when the view camera has been assigned an instance target to follow (either in the Room Editor or using the function [camera\\_set\\_view_target](camera_set_view_target.html)) and relate to how far from the border of the view the instance needs to be before the view will update its position to follow.",
        "return": "N/A"
    },
    "view_yport": {
        "parameters": [],
        "example": {
            "code": "view_xport[0] = 0;<br> view_yport[0] = 0;<br>",
            "description": ""
        },
        "signature": "view_yport[0 .. 7];",
        "function": "view_yport[0 .. 7];",
        "documentation": "",
        "return": "Real"
    },
    "window_has_focus": {
        "parameters": [],
        "example": {
            "code": "if !window_has_focus()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;scr_PauseGame();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_has_focus();",
        "function": "window_has_focus",
        "documentation": "",
        "return": "Boolean"
    },
    "surface_get_width": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to get the width of."
            }
        ],
        "example": {
            "code": "sw = surface_get_width(surf);",
            "description": ""
        },
        "signature": "surface_get_width(surface_id);",
        "function": "surface_get_width",
        "documentation": "This function simply returns the width, in pixels, of the indexed surface.",
        "return": "Real"
    },
    "string_copy": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to copy from."
            },
            {
                "label": "index",
                "documentation": "The position of the first character in the string to copy from (numbered from 1)"
            },
            {
                "label": "count",
                "documentation": "The number of characters, starting from the position of the first, to copy"
            }
        ],
        "example": {
            "code": "name = keyboard_string;<br> if string_length(name) &gt; 15 )<br> &nbsp; &nbsp; &nbsp; {<br> &nbsp; &nbsp; &nbsp; keyboard_string = string_copy(name, 1, 15 );<br> &nbsp; &nbsp; &nbsp; }<br>",
            "description": ""
        },
        "signature": "string_copy(str, index, count);",
        "function": "string_copy",
        "documentation": "With this function you can easily select a number of characters from within a string to be copied to another one. The first character in a string is always numbered as \"1\", so to copy (for example) the first five characters of string you would have string_copy(str, 1, 5). A further example is provided below.",
        "return": "String"
    },
    "ds_queue_create": {
        "parameters": [],
        "example": {
            "code": "queue = ds_queue_create();",
            "description": ""
        },
        "signature": "ds_queue_create();",
        "function": "ds_queue_create",
        "documentation": "This function will create a new queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the queue.",
        "return": "Real"
    },
    "alarm_set": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The alarm index to set, from 0 to 11."
            },
            {
                "label": "value",
                "documentation": "The value (an integer) to set the alarm to."
            }
        ],
        "example": {
            "code": "for (var i = 0; i &lt; 12; i++)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if alarm_get(i) &gt; 0 alarm_set(i, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "alarm_set(index, value);",
        "function": "alarm_set",
        "documentation": "This function can be used to set an alarm. You supply the alarm number from 0 to 11, and then the value to set the alarm to. The value must be an integer value, and you can set it to -1 to stop the alarm. This is an alternative method to setting the [alarm array](../instances/instance_variables/alarm.html) directly.",
        "return": "N/A"
    },
    "layer_get_depth": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the depth of (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "if layer_get_depth(global.temp_layer) != -100<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_destroy(global.temp_layer);<br> &nbsp;&nbsp;&nbsp;global.temp_layer = layer_create(-100);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_depth(layer_id)",
        "function": "layer_get_depth",
        "documentation": "You can use this function to get the _depth_ value associated with a given layer. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function will return that layers depth as a real number. Note that depth is defined as being higher the \"further away\" from the camera and lower the \"closer\" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the \"top\" layer (ie, the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.",
        "return": "Real"
    },
    "layer_sprite_get_speed": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_speed(spr_id) &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_speed(spr_id, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_speed(sprite_element_id);",
        "function": "layer_sprite_get_speed",
        "documentation": "",
        "return": "Real"
    },
    "buffer_create_from_vertex_buffer_ext": {
        "parameters": [
            {
                "label": "vertex_buffer",
                "documentation": "The vertex buffer index to use."
            },
            {
                "label": "type",
                "documentation": "The type of buffer to create (see the constants list below)."
            },
            {
                "label": "alignment",
                "documentation": "The byte alignment for the buffer"
            },
            {
                "label": "start_vertex",
                "documentation": "The starting vertex."
            },
            {
                "label": "num_vertices",
                "documentation": "The total number of vertices to copy."
            }
        ],
        "example": {
            "code": "var v_num = vertex_get_number(model_buff); player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1, 0, v_num - 1);<br>",
            "description": ""
        },
        "signature": "buffer_create_from_vertex_buffer_ext(vertex_buffer, type, alignment, start_vertex, num_vertices)",
        "function": "buffer_create_from_vertex_buffer_ext",
        "documentation": "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created [vertex buffer](../drawing/primitives/primitive%20building/index.html). The function returns a unique _buffer id_ that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function [vertex\\_create\\_buffer()](../drawing/primitives/primitive%20building/vertex_create_buffer.html), for example) with the following constants being used to define the buffer type:",
        "return": "Real"
    },
    "device_mouse_check_button": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left) &amp;&amp; device_mouse_check_button(1, mb_left)<br> {<br> room_goto(rm_Menu);<br> }<br>",
            "description": ""
        },
        "signature": "device_mouse_check_button(device, button);",
        "function": "device_mouse_check_button",
        "documentation": "This function returns true (1) or false (0) depending on whether the device that you specify is being used or not. Now, the _device_ refers to the mouse number, which can be from 0 to 4 and this event is triggered when the touch screen of a mobile device is touched, so in this way you can test for up to _n_ different screen touches (the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs). This function constantly updates every step, and the standard constants of mb_left and mb_right can be used to check for either button.",
        "return": "Boolean"
    },
    "ds_list_clear": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to clear."
            }
        ],
        "example": {
            "code": "if count = 15 &amp;&amp; !ds_list_empty(command_list)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_clear(command_list);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_clear(id);",
        "function": "ds_list_clear",
        "documentation": "With this function you can clear all data from the given list data-structure. This does _NOT_ destroy the data-structure (for that you should use [ds\\_list\\_destroy](ds_list_destroy.html)) it only wipes all data from it and returns an empty list.",
        "return": "N/A"
    },
    "draw_rectangle": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the top left corner of the rectangle."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top left corner of the rectangle."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the bottom right corner of the rectangle."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom right corner of the rectangle."
            },
            {
                "label": "outline",
                "documentation": "Whether the rectangle is drawn filled (false) or as a one pixel wide outline (true)."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_yellow);<br> draw_rectangle(100, 100, 300, 200, true);<br>",
            "description": ""
        },
        "signature": "draw_rectangle(x1, y1, x2, y2, outline);",
        "function": "draw_rectangle",
        "documentation": "With this function you can draw either an outline of a rectangle or a filled rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner.",
        "return": "N/A"
    },
    "gpu_get_blendmode_src": {
        "parameters": [],
        "example": {
            "code": "var bm;<br> bm[0] = gpu_get_blendmode_src();<br> bm[1] = gpu_get_blendmode_dest();<br> gpu_set_blendmode_ext_sepalpha(bm[0], bm[1], bm_inv_src_alpha, bm_inv_dest_colour);<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode_src();",
        "function": "gpu_get_blendmode_src",
        "documentation": "This function can be used to retrieve the current _source_ extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
        "return": "Constant (see above table)"
    },
    "dcos": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in degrees) to return the cosine of."
            }
        ],
        "example": {
            "code": "val = dcos(45);",
            "description": ""
        },
        "signature": "dcos(val);",
        "function": "dcos",
        "documentation": "In a right angled triangle _cos(val) = Adjacent / Hypotenuse_ where val is one of the three angles. This function will always return a number between 1 and -1.",
        "return": "Real"
    },
    "path_duplicate": {
        "parameters": [],
        "example": {
            "code": "mypath = path_duplicate(choose(path_1, path_2, path_3, path_4));",
            "description": ""
        },
        "signature": "path_duplicate(index);",
        "function": "path_duplicate",
        "documentation": "This function takes a path and copies it into a new path. The new path is created in the process, and the index is returned to be used in all further calls to use this new path.",
        "return": "Real"
    },
    "steam_ugc_query_set_cloud_filename_filter": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "match_cloud_filename",
                "documentation": "Sets whether the UGC item file name should match or not."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);<br> steam_ugc_query_set_cloud_filename_filter(query_handle, true);<br> steam_ugc_query_add_excluded_tag(query_handle, \"nasty chips\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": " steam_ugc_query_set_cloud_filename_filter(ugc_query_handle , match_cloud_filename);",
        "function": " steam_ugc_query_set_cloud_filename_filter",
        "documentation": "This function can be used to further filter any given UGC query, specifically to check and see if a Workshop item file name must match or not. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is either true or false depending on whether you require the file names to match. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "clickable_change": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the clickable icon to change."
            },
            {
                "label": "tpe",
                "documentation": "The texture page entry for the sprite to be used (use sprite_get_tpe)."
            },
            {
                "label": "x",
                "documentation": "The new x position within the window."
            },
            {
                "label": "y",
                "documentation": "The new y position within the window."
            }
        ],
        "example": {
            "code": "switch (room)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case rm_Menu: clickable_change(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 1), 32, 32); break;<br> &nbsp;&nbsp;&nbsp;case rm_Game: clickable_change(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 0), 200, 32); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "clickable_change(index, tpe, x, y)",
        "function": "clickable_change",
        "documentation": "With this function you can change the sprite and position of a clickable icon previously created with [clickable_add](clickable_add.html). Please note that the position is based on the window, _not_ the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: [sprite\\_get\\_tpe](../sprites/sprite_get_tpe.html)).",
        "return": "N/A"
    },
    "buffer_compress": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to compress."
            },
            {
                "label": "offset",
                "documentation": "The offset within the buffer to compress (in bytes)."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer area to compress (in bytes)."
            }
        ],
        "example": {
            "code": "var srcBuff = buffer_create(1024, buffer_grow, 1);<br> buffer_write(srcBuff, global.DataString);<br> var cmpBuff = buffer_compress(srcBuff, 0, buffer_tell(srcBuff));<br> buffer_save(cmpBuff, \"Player_Save.sav\");<br> buffer_delete(srcBuff);<br> buffer_delete(cmpBuff);<br>",
            "description": ""
        },
        "signature": "buffer_compress(buffer, offset, size);",
        "function": "buffer_compress",
        "documentation": "With this function you can compress part (or all) of a buffer using zlib compression. You supply the ID of the buffer to compress (as returned by [buffer_create()](buffer_create.html)), the offset within the buffer to use in bytes, and the size of the buffer data to compress (also in bytes). The function will return a new buffer ID value for the compressed buffer, or a value less than 0 if it has failed for any reason. This function will not alter the original buffer.",
        "return": "Buffer Index"
    },
    "part_type_life": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "life_min",
                "documentation": "The minimum lifespan of the particles."
            },
            {
                "label": "life_max",
                "documentation": "The maximum lifespan of the particles."
            }
        ],
        "example": {
            "code": "part_type_life(part_Flare, room_speed, room_speed * 2);",
            "description": ""
        },
        "signature": "part_type_life(ind, life_min, life_max);",
        "function": "part_type_life",
        "documentation": "This is the function that governs how long each individual particle of the indicated type remains on the screen. As with other particle functions, you provide a minimum and a maximum value (in steps)and each particle lifespan will be a random number of steps from within the specified range. To have all particles with the same lifetime, set the two values to be the same.",
        "return": "N/A"
    },
    "matrix_build_projection_perspective_fov": {
        "parameters": [
            {
                "label": "fov",
                "documentation": "The angle of the field of view."
            },
            {
                "label": "aspect",
                "documentation": "The aspect ratio of the field of view."
            },
            {
                "label": "znear",
                "documentation": "The near clipping plane."
            },
            {
                "label": "zfar",
                "documentation": "The far clipping plane."
            }
        ],
        "example": {
            "code": "projmat = matrix_build_projection_perspective_fov(60, 320/240, 1.0, 32000.0);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "matrix_build_projection_perspective_fov(fov_y, aspect, znear, zfar);",
        "function": "matrix_build_projection_perspective_fov",
        "documentation": "This function builds a perspective projection matrix matrix based on field of view, using the specified parameters listed below.",
        "return": "Matrix index"
    },
    "physics_fixture_create": {
        "parameters": [],
        "example": {
            "code": "fix_Ball = physics_fixture_create();",
            "description": ""
        },
        "signature": "physics_fixture_create()",
        "function": "physics_fixture_create",
        "documentation": "The first step in setting up a fixture is creating it with this function. The returning index should be stored in a variable to be used in all further functions that are used to define and use this fixture.",
        "return": "Index of the fixture"
    },
    "surface_set_target": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to set as the drawing target."
            }
        ],
        "example": {
            "code": "if view_current = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_set_target(surf);<br> &nbsp;&nbsp;&nbsp;with (obj_Effect)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_self();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;surface_reset_target();<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_surface(surf, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_set_target(surface_id);",
        "function": "surface_set_target",
        "documentation": "With this function you set all further drawing to the target surface rather than the screen and in this way you can tell _GameMaker Studio 2_ to only draw specific things to the specified surface. Please note that if you do not call [surface\\_reset\\_target](surface_reset_target.html) after you have finished, nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance. You can check the return value of this function too as a debug tool to check whether the surface target was set or not, with a return value of 0 being a failure to set the target and any other positive value being a success.",
        "return": "Boolean"
    },
    "file_text_open_read": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to read from."
            }
        ],
        "example": {
            "code": "file = file_text_open_read(working_directory + \"level.txt\");",
            "description": ""
        },
        "signature": "file_text_open_read(fname);",
        "function": "file_text_open_read",
        "documentation": "This function opens the text file with the indicated filename for _reading only_, returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. If the file does not exists then the function will return the value -1.  \n  \n  \n_**NOTE:** You can only have a maximum of 32 files open at any one time. You should also **always** close files when finished as this frees the memory associated with the file._  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "Real"
    },
    "game_save_buffer": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer id to save to."
            }
        ],
        "signature": "game_save_buffer(buffer);",
        "function": "game_save_buffer",
        "documentation": "With this function you can save the current state of the game to a previously created \"grow\" buffer (see [Buffers](../buffers/index.html)) which can then be loaded again at any time using [game\\_load\\_buffer](game_load_buffer.html) function. This function is designed for use in a single room at a time (ie: it's not advised to do a buffer save in one room, then try and load the buffer from another one) and should ideally be used only for checkpoints or level restarts.  \n  \n_**NOTE:** This function is_ very limited and it is designed for the beginner to get a checkpoint system up and running quickly, but more advanced users may prefer to code their own system using the [File](../file%20handling/index.html) functions, due to the fact that the game will _not_ save any of the dynamic resources like data structures, surfaces, added backgrounds and sprites etc..",
        "return": "N/A"
    },
    "instance_nearest": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check from."
            },
            {
                "label": "y",
                "documentation": "The y position to check from."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instances of."
            }
        ],
        "example": {
            "code": "var inst, xx;<br> xx = x;<br> x -= 10000;<br> inst = instance_nearest(xx, y, object_index);<br> if inst != id<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_line(x, y, inst.x, inst.y);<br> &nbsp;&nbsp;&nbsp;}<br> x += 10000;<br>",
            "description": ""
        },
        "signature": "instance_nearest(x, y, obj);",
        "function": "instance_nearest",
        "documentation": "This function will check all the instances of the given object to see which is nearest to the given point of origin. If no instances of the object exist, the function will return the keyword _noone_, but if there are instances then it will return the [id](../instance_variables/id.html) of the instance found. Please note that if the instance running the code was created as an instance of the object being checked, then it will be included in the check.",
        "return": "Real (either an instance ID value or the keyword <tt>noone</tt>)"
    },
    "network_send_raw": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "buffer",
                "documentation": "The id of the buffer to get the data from."
            },
            {
                "label": "size",
                "documentation": "The size (in bytes) of the data."
            }
        ],
        "example": {
            "code": "buff = buffer_load(\"player_save.dat\");<br> network_send_raw(sock, buff, buffer_get_size(buff));<br>",
            "description": ""
        },
        "signature": "network_send_raw(socket, buffer, size);",
        "function": "network_send_raw",
        "documentation": "With this function you can send a \"raw\" data packet through the network. The function takes the _socket id_ to connect through and then you must supply the _buffer id_ which contains the data to be sent (for more information on buffers see [Reference - Buffers](../buffers/index.html)) and finally the size (in bytes) of the data packet. The data sent is not formatted by _GameMaker Studio 2_ in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
        "return": "Real"
    },
    "physics_fixture_set_collision_group": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the fixture that is to be bound"
            },
            {
                "label": "group",
                "documentation": "the group that this fixture is assigned to (either a positive value, 0, or a negative value)"
            }
        ],
        "example": {
            "code": "physics_fixture_set_collision_group(fix_Wheel, -1);",
            "description": ""
        },
        "signature": "physics_fixture_set_collision_group(fixture, group)",
        "function": "physics_fixture_set_collision_group",
        "documentation": "Once you have created your fixture you can define it as being part of a collision group. This means that you can tell instances with that fixture to _always_ collide or _never_ collide with other instance that have fixtures bound to them with the same collision group. The values that can be assigned are based on positive or negative numbers, with 0 being the default value (meaning that the instance with this fixture setting is ignored unless a collision event is created for it). Here is an image to help explain:  \n  \n  \n![](images/physics_fixture_set_collision_group_image.png)",
        "return": ""
    },
    "physics_fixture_set_polygon_shape": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            }
        ],
        "example": {
            "code": "physics_fixture_set_polygon_shape(fix_Ship);<br> physics_fixture_add_point(fix_Ship, 0,0);<br> physics_fixture_add_point(fix_Ship, -40, 100);<br> physics_fixture_add_point(fix_Ship, 40, 100);<br>",
            "description": ""
        },
        "signature": "physics_fixture_set_polygon_shape(fixture)",
        "function": "physics_fixture_set_polygon_shape",
        "documentation": "This function sets a polygon shape for your fixture, but you will need to use [physics\\_fixture\\_add_point](physics_fixture_add_point.html) to actually define the shape of this polygon relative to the origin of the fixture. The polygon is closed when the fixture is bound to an instance. You should note too that this function _must_ be called before defining any points, and you must also have at least three points defined for your polygon before binding it to an instance or you will get an error.",
        "return": "N/A"
    },
    "phy_speed_y": {
        "parameters": [],
        "example": {
            "code": "if phy_speed_y != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_speed_y = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_speed_y;",
        "function": "phy_speed_y;",
        "documentation": "This variable can be used to get or to change the y component the instances linear speed vector and is defined in pixels per step (for pixels per second, see [phy\\_linear\\_velocity_y](phy_linear_velocity_y.html)). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
        "return": "Real"
    },
    "physics_particle_draw": {
        "parameters": [
            {
                "label": "typemask",
                "documentation": "The mask to compare the particles flags with."
            },
            {
                "label": "category",
                "documentation": "The user defined category to draw (use 0 to draw all categories)."
            },
            {
                "label": "sprite",
                "documentation": "The sprite to use for each particle."
            },
            {
                "label": "subimg",
                "documentation": "The image_index of the sprite to draw."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> physics_particle_draw(flags, 2, sprBlob, 0);<br>",
            "description": ""
        },
        "signature": "physics_particle_draw(typemask, category, sprite, subimg)",
        "function": "physics_particle_draw",
        "documentation": "This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the flags when creating the particle (see the function [physics\\_particle\\_create](physics_particle_create.html) for an example), ie: using the bitwise _or_ \"|\" to mask off the appropriate bits for each flag.",
        "return": "N/A"
    },
    "buffer_get_alignment": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to check."
            }
        ],
        "example": {
            "code": "alignment = buffer_get_alignment(buff);<br>",
            "description": ""
        },
        "signature": "buffer_get_alignment(buffer);",
        "function": "buffer_get_alignment",
        "documentation": "With this function you can get the a _byte alignment_ for the given buffer ID.",
        "return": "Real"
    },
    "ds_grid_value_disk_x": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            },
            {
                "label": "val",
                "documentation": "The value to find."
            }
        ],
        "example": {
            "code": "if ds_grid_value_disk_exists(grid, 5, 5, 5, val)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;xpos = ds_grid_value_disk_x(grid, 5, 5, 5, val);<br> &nbsp;&nbsp;&nbsp;ypos = ds_grid_value_disk_y(grid, 5, 5, 5, val);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_value_disk_x(index, xm, ym, r, val);",
        "function": "ds_grid_value_disk_x",
        "documentation": "With this function you can get the x coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by [ds\\_grid\\_create](ds_grid_create.html)) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
        "return": "Real"
    },
    "part_type_alpha1": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "alpha1",
                "documentation": "The alpha of the particle."
            }
        ],
        "example": {
            "code": "part_type_alpha1(global.Snow_Part, 0.5);",
            "description": ""
        },
        "signature": "part_type_alpha1(ind, alpha1);",
        "function": "part_type_alpha1",
        "documentation": "This function is used to set a particle type to have a single alpha value (transparency) for the total duration of the lifetime of each individual particle, and this can be from 0 (transparent) to 1 (opaque).",
        "return": "N/A"
    },
    "draw_skeleton": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "animname",
                "documentation": "The name of the animation to get the frame from (a string)."
            },
            {
                "label": "skinname",
                "documentation": "The name of the skin to use (a string)."
            },
            {
                "label": "frame",
                "documentation": "The animation frame to draw (from 0 to image_number - 1)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_skeleton(spr_Jump, \"jump\", \"skin1\", 0, x, y, image_xscale, image_yscale, image_angle, c_white, 0.5);",
            "description": ""
        },
        "signature": "draw_skeleton(sprite, animname, skinname, frame, x, y, xscale, yscale, rot, colour, alpha);",
        "function": "draw_skeleton",
        "documentation": "This function is _only_ for use with sprites that have been created using a skeletal animation program like Spine. While you can draw these sprites using the normal draw functions (like [draw_self()](draw_self.html)), there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties. In these cases you can draw the sprite with this function, where you give the sprite index and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling _GameMaker Studio 2_ what part of the animation to show and is a value between 0 and the [image_number](../../instances/instance_variables/image_number.html). The rest of the arguments are the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.",
        "return": "N/A"
    },
    "draw_sprite_stretched": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "w",
                "documentation": "The width of the area the stretched sprite will occupy."
            },
            {
                "label": "h",
                "documentation": "The height of the area the stretched sprite will occupy."
            }
        ],
        "example": {
            "code": "draw_sprite_stretched(sprite_index, image_index, x, y, sprite_width / 2, sprite_height / 2);",
            "description": ""
        },
        "signature": "draw_sprite_stretched(sprite, subimg, x, y, w, h);",
        "function": "draw_sprite_stretched",
        "documentation": "This function simply takes a sprite resource and stretches it over the given width and height so that it occupies the area. As with [draw_sprite](draw_sprite.html) you can specify a sprite and a sub-image for drawing, then the x / y position in the room for the sprite to be drawn at and finally a width and a height (which must be pixel values). The image below illustrates how this function works: ![](images/spr_stretch.png)",
        "return": "N/A"
    },
    "xstart": {
        "parameters": [],
        "example": {
            "code": "if place_meeting(x, y, obj_spike)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score -= 100;<br> &nbsp;&nbsp;&nbsp;x = xstart;<br> &nbsp;&nbsp;&nbsp;y = ystart;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "xstart;",
        "function": "xstart;",
        "documentation": "",
        "return": "Real"
    },
    "os_powersave_enable": {
        "parameters": [],
        "example": {
            "code": "if os_type == os_android || os_type == os_ios<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;os_powersave_enable(false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_powersave_enable(flag)",
        "function": "os_powersave_enable",
        "documentation": "With this function you can turn on or off the power saving features of the device. This is important as certain games (for example those that use the tilt functions) may not generate events that the OS can interpret as being user input and so shut down the screen or exit the game. By setting this function to false you can disable the power saving features and ensure that the screen (and game) are always functioning.  \n  \n_**NOTE:** This is limited to iOS and Android targets._",
        "return": "N/A"
    },
    "layer_has_instance": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "instance_id",
                "documentation": "The unique instance ID or the object index of the instance to check for"
            }
        ],
        "example": {
            "code": "if !layer_has_instance(global.Bullet_Layer, obj_Bullet_Parent)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_destroy(global.Bullet_Layer);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_has_instance(layer_id, instance_id)",
        "function": "layer_has_instance",
        "documentation": "",
        "return": "Boolean"
    },
    "layer_sprite_get_sprite": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_sprite(spr_id) != spr_Clouds<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_change(spr_id, spr_Clouds);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_sprite(sprite_element_id);",
        "function": "layer_sprite_get_sprite",
        "documentation": "",
        "return": "Sprite Index (Real) or -1"
    },
    "sprite_save_strip": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to change the transparency map of."
            },
            {
                "label": "filename",
                "documentation": "The filename for the saved sprite strip."
            }
        ],
        "example": {
            "code": "var spr, i;<br> spr = sprite_create_from_surface(0, 0, 32, 32, true, true, 16, 16);<br> for (i = 1; i &lt; 8; i +=1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;sprite_add_from_surface(spr, i, 0, 32, 32, true, true, 16, 16);<br> &nbsp;&nbsp;&nbsp;}<br> sprite_save_strip(spr, \"Custom_Player_Sprite.png\");<br> sprite_delete(spr);<br>",
            "description": ""
        },
        "signature": "sprite_save_strip(ind, filename);",
        "function": "sprite_save_strip",
        "documentation": "This function will create a strip image of all sub-images from a sprite. You can specify the name of the file to be saved, but the actual file type _must_ be *.png.",
        "return": ""
    },
    "sprite_set_alpha_from_sprite": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to change the transparency map of."
            },
            {
                "label": "spr",
                "documentation": "The index of the sprite to take the transparency map data from."
            }
        ],
        "signature": "sprite_set_alpha_from_sprite(ind, spr);",
        "function": "sprite_set_alpha_from_sprite",
        "documentation": "This function uses the value/saturation of one sprite and multiplies it with the alpha of the target sprite. Ideally the sprite being used to generate the new alpha map should be greyscale, with the white areas having an equivalent alpha value of 1 (opaque), the black areas being equivalent to alpha 0 (transparent), and the grey areas being an alpha in between 0 and 1. The sprite that you are setting the alpha of _cannot be a permanent resource_, nor can the sprite you use to set the alpha, as this will give an error. This means that you must create two completely new sprites \"on the fly\" in some way for the function to work correctly. This can be achieved by using surfaces, or by creating a sprite from the screen (the code example below shows how the effect can be achieved with surfaces).",
        "return": ""
    },
    "steam_ugc_query_set_ranked_by_trend_days": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "days",
                "documentation": "The number of days to query."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1);<br> steam_ugc_query_set_ranked_by_trend_days(query_handle, 5);<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": " steam_ugc_query_set_ranked_by_trend_days(ugc_query_handle , days);",
        "function": " steam_ugc_query_set_ranked_by_trend_days",
        "documentation": "This function can be used to further filter any UGC query made using the ugc\\_query\\_RankedByTrend constant, specifically to search over a number of days. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is the number of days over which you want the query to run. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "string_letters": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to convert to letters."
            }
        ],
        "example": {
            "code": "username = string_letters(username);<br>",
            "description": ""
        },
        "signature": "string_letters(string);",
        "function": "string_letters",
        "documentation": "With this function you can remove all characters that are not classed as letters. This is handy for preventing people from entering unwanted characters into a text entry (like entering \"#\" to force a new line).",
        "return": "String"
    },
    "view_get_hport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "if view_get_hport(0) != (display_get_height () / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_hport(0, display_get_height() / 2);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_get_hport(view_port)",
        "function": "view_get_hport",
        "documentation": "This function can be used to retrieve the height of the given view port.",
        "return": "Real"
    },
    "ef_smokeup": {
        "parameters": [],
        "example": {
            "code": "effect_create_below(ef_smokeup, x, y, choose(0, 1, 2), c_gray);<br>",
            "description": ""
        },
        "signature": "ef_smokeup;",
        "function": "ef_smokeup;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a rising smoke effect as illustrated in the image below:  \n  \n![](images/ef_smokeup.png)",
        "return": "N/A."
    },
    "gml_release_mode": {
        "parameters": [
            {
                "label": "flag",
                "documentation": "Either true to set release mode or false for general development."
            }
        ],
        "example": {
            "code": "gml_release_mode(true);<br>",
            "description": ""
        },
        "signature": "gml_release_mode(flag);",
        "function": "gml_release_mode",
        "documentation": "When your game is compiled, it also includes certain internal functions to error check while running. These internal checks cover many aspects of a games code, including ranges, parameters and some general aspects of the internal GML compiler and are what spawn the final error messages in many cases. However this function can be used to switch these internal checks off (ie: remove them completely from the compiled game), giving a speed boost to your final project.  \n  \nPlease note that this means that should you do something in your game code that is incorrect, the compiled game _may simply crash_, or it may experience some _very unexpected behaviour_. For example, if a ds_grid is accessed at a coordinate outside of the defined size, in developer mode you would get a compiler window error message but the checks in place would permit the game to continue running. However in release mode these checks will not be there and so the code could return either a NULL pointer, or a bad pointer which in turn will point to some random memory. So at best you could get the wrong data returned, or at worst you could overwrite something in memory - data, graphics, or even code itself. Another example would be when building primitives - if you supply the colour, position, texture, etc... data in a different order to that which you defined when you created the vertex format, then the game may crash or produce unexpected results when release mode is on.",
        "return": "N/A"
    },
    "os_device": {
        "parameters": [],
        "example": {
            "code": "if os_browser = browser_not_a_browser<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;switch (os_device)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case device_ios_ipad: global.Config = 2; break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case device_ios_iphone: global.Config = 3; break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case device_ios_iphone_retina: global.Config = 4; break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case device_ios_unknown: global.Config = 5; break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Config = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_device",
        "function": "os_device",
        "documentation": "This variable holds one of various constant _GameMaker Studio 2_ has to tell you which device you are currently running the game on. The following constants can be returned:",
        "return": "Constant"
    },
    "path_get_kind": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            }
        ],
        "example": {
            "code": "kind = path_get_kind(c_path);",
            "description": ""
        },
        "signature": "path_get_kind(index);",
        "function": "path_get_kind",
        "documentation": "Paths can be either _smooth_ or _straight_ (a smooth path calculates a curved path around the defining points, whereas a straight path just goes straight from one point to another). This function can be used to find out whether the given path is smooth (true) or not (false).",
        "return": "Boolean."
    },
    "phy_inertia": {
        "parameters": [],
        "example": {
            "code": "physics_mass_properties(70, -10, -10, phy_inertia);",
            "description": ""
        },
        "signature": "phy_inertia;",
        "function": "phy_inertia;",
        "documentation": "Inertia is the measure of how hard it is to make something start or stop moving, so the lower the value for this **read-only** variable and the easier it will be to set the instance in motion, while higher values will require more force to start it moving.",
        "return": "Real"
    },
    "phy_position_y": {
        "parameters": [],
        "example": {
            "code": "xx = phy_position_x;<br> yy = phy_position_y;<br>",
            "description": ""
        },
        "signature": "phy_position_y;",
        "function": "phy_position_y;",
        "documentation": "This variable can be used to get (or to set) the y position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the continuous simulation.",
        "return": "Real"
    },
    "view_get_visible": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "if !view_get_visible(0) &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_visible(0, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_get_visible(view_port)",
        "function": "view_get_visible",
        "documentation": "This function can be used to check the visibility of the given view port. The function will return true if it is visible and false if it is not.",
        "return": "Boolean"
    },
    "device_mouse_x": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if device_mouse_x(0) &gt; x-32 &amp;&amp; device_mouse_x(0) &lt; x+32<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_x(device);",
        "function": "device_mouse_x",
        "documentation": "This function returns the x position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
        "return": "Real"
    },
    "ds_priority_size": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if !ds_priority_empty(control_priority)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;num = ds_priority_size(control_priority);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_size(id);",
        "function": "ds_priority_size",
        "documentation": "This function will return the \"size\" of the priority queue, ie: the number of items that have been prioritized in it.",
        "return": "Real"
    },
    "path_assign": {
        "parameters": [],
        "example": {
            "code": "mypath = path_add();<br> path_assign(mypath, choose(path_1, path_2, path_3));<br>",
            "description": ""
        },
        "signature": "path_assign(index, path);",
        "function": "path_assign",
        "documentation": "With this function you can copy the path data from one path to another. The path being copied _to_ will be cleared first (should it have any path points) and be completely overwritten by the path being copied from. Neither path is deleted in the process and the result is two paths, with two different indexes, but the exact same form and points.",
        "return": "N/A"
    },
    "path_get_point_x": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            },
            {
                "label": "n",
                "documentation": "The point identity to check."
            }
        ],
        "example": {
            "code": "if path_position = 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var i;<br> &nbsp;&nbsp;&nbsp;i = floor(random(path_get_number(mypath)));<br> &nbsp;&nbsp;&nbsp;x = path_get_point_x(mypath, i);<br> &nbsp;&nbsp;&nbsp;y = path_get_point_y(mypath, i);<br> &nbsp;&nbsp;&nbsp;path_position = (1 / path_get_number(mypath)) * i;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_get_point_x(index, n);",
        "function": "path_get_point_x",
        "documentation": "This function will return the x position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the x position of point 10) then a value of 0 will be returned.",
        "return": "Real."
    },
    "layer_background_create": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "sprite",
                "documentation": "The sprite index to be used"
            }
        ],
        "example": {
            "code": "global.back_layer = layer_create(10000);<br> global.back_trees = layer_background_create(global.back_layer, spr_Trees);<br>",
            "description": ""
        },
        "signature": "layer_background_create(layer_id, sprite)",
        "function": "layer_background_create",
        "documentation": "",
        "return": "Background element ID (Real)"
    },
    "layer_get_hspeed": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the horizontal speed from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_hspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_vspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_hspeed(layer_id)",
        "function": "layer_get_hspeed",
        "documentation": "You can use this function to retrieve the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the horizontal speed, where a positive value is to the right and a negative value to the left. Default is 0 (unless set in the room editor).",
        "return": "N/A"
    },
    "layer_get_visible": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Instances\");<br> if layer_get_visible(lay_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_set_visible(lay_id, false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_set_visible(lay_id, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_visible(layer_id)",
        "function": "layer_get_visible",
        "documentation": "",
        "return": "Boolean"
    },
    "layer_sprite_create": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target"
            },
            {
                "label": "x",
                "documentation": "The x position to use"
            },
            {
                "label": "y",
                "documentation": "The y position to use"
            },
            {
                "label": "sprite",
                "documentation": "The sprite index to be used"
            }
        ],
        "example": {
            "code": "global.asset_layer = layer_create(10000);<br> for (var i = 0; i&lt; 10; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.asset_spr_trees[i] = layer_sprite_create(global.asset_layer, random(room_width), room_height - 100, spr_Trees);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_create(layer_id, x, y, sprite)",
        "function": "layer_sprite_create",
        "documentation": "",
        "return": "Sprite element ID (Real)"
    },
    "ds_list_mark_as_map": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to mark."
            },
            {
                "label": "pos",
                "documentation": "The position within the list to mark."
            }
        ],
        "example": {
            "code": "var sub_map = ds_map_create();<br> ds_map_add(sub_map, \"player\", player_array);<br> ds_map_add(sub_map, \"enemy\", enemy_array);<br> ds_list_add(j_list, sub_map);<br> ds_list_mark_as_map(j_list, 0);<br>",
            "description": ""
        },
        "signature": "ds_list_mark_as_map(id, pos);",
        "function": "ds_list_mark_as_map",
        "documentation": "This function will \"mark\" (or \"flag\") a given position within a previously created ds\\_list as holding a previously created ds\\_map. This functionality is designed only for use when encoding JSON strings (which you can create using [json_encode](../../file%20handling/json_encode.html)) and the complimentary [ds map functions](../ds%20maps/index.html).  \n  \n_**NOTE:** Once a ds_list has had a value within it flagged as another list or map, destroying the list will also destroy the marked lists and maps too. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list._",
        "return": "N/A"
    },
    "physics_draw_debug": {
        "parameters": [],
        "example": {
            "code": "draw_set_colour(c_red);<br> physics_draw_debug();<br>",
            "description": ""
        },
        "signature": "physics_draw_debug()",
        "function": "physics_draw_debug",
        "documentation": "When creating a physics system in _GameMaker Studio 2_, it is often important to have a visual representation of what is actually happening with an instance. This can be achieved by using physics\\_draw\\_debug, which draws a schematic outline of the physical properties associated with the instance running the code. Here is an image of how it looks:  \n![](images/physics_draw_debug_instance_image.png)",
        "return": ""
    },
    "skeleton_animation_set": {
        "parameters": [
            {
                "label": "animname",
                "documentation": "The name (a string) of the animation set to use."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if skeleton_animation_get() != \"jump\"<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skeleton_animation_set(\"jump\");<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_set(animname);",
        "function": "skeleton_animation_set",
        "documentation": "Once you have assigned a skeletal animation sprite to your instance, you can then define which _animation set_ it should use at any given time with this function. When you created your sprite (in Spine) you will have defined multiple animations sets for different states and named each of them appropriately. These names are what you will use to tell _GameMaker Studio 2_ which animation set to use at any time in your game. For example, if your sprite is for a platform game, then you may have a \"jump\" set, a \"run\" set and an \"idle\" set all contained within the one sprite and you can switch between them in your game using this function.",
        "return": "N/A"
    },
    "skeleton_attachment_get": {
        "parameters": [
            {
                "label": "slot",
                "documentation": "The slot name (a string) to get the attachment of."
            }
        ],
        "example": {
            "code": "if skeleton_attachment_get(\"slot_leftHand\") == \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"spear\", \"knife\"));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_attachment_get(slot);",
        "function": "skeleton_attachment_get",
        "documentation": "A skeletal animation sprite may have other sprites added as attachments, with these sprites being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can get the name (as a string) of the attachment for the given slot of the currently assigned sprite. Note that attached sprites are referenced through their _name string_ as assigned in Spine, or when you called [skeleton\\_attachment\\_create](skeleton_attachment_create.html).",
        "return": "String"
    },
    "audio_listener_get_data": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The listener to get the data for (default 0)."
            }
        ],
        "example": {
            "code": "var num = audio_get_listener_count();<br> for(var i = 0; i &lt; num; ++i;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;var data = audio_listener_get_data(info[? \"index\"]);<br> &nbsp;&nbsp;&nbsp;if data[? \"x\"] != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_listener_set_position(info[? \"index\"], 0, 0, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(data);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_listener_get_data(index);",
        "function": "audio_listener_get_data",
        "documentation": "This function will create a ds_map and populate it with the position, velocity and orientation values for the given listener. The default listener index is 0, but you can use the function [audio\\_get\\_listener_info](audio_get_listener_info.html) to get the different indices available for the target platform. If you provide an incorrect listener index then the function will return -1.",
        "return": "ds_map"
    },
    "camera_apply": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            }
        ],
        "example": {
            "code": "if view_current == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_apply(cutscene_cam);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_apply(camera_id)",
        "function": "camera_apply",
        "documentation": "This function will apply the given camera settings to the current camera view being rendered immediately. While you can set any view camera using the specific camera\\_set\\_* functions, the new settings will not be used for rendering until the _next_ game frame, but with this function you can make those changes immediately. If you are using multiple views then the function should be used in the **Draw Event** and you can use the variable [view_current](view_current.html) to selectively apply the given camera only to the camera view currently being rendered. Note that this does NOT change the camera ID value, only the settings for that camera, and that if you use this function on the default camera (ie: the internal camera _GameMaker Studio 2_ uses when no view cameras are active) the changes will be overwritten the very next game frame by the internal settings for drawing the room.",
        "return": "N/A"
    },
    "keyboard_string": {
        "parameters": [],
        "example": {
            "code": "if string_length(keyboard_string) &gt; 15<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;keyboard_string = string_copy(keyboard_string, 1, 15);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_string;",
        "function": "keyboard_string;",
        "documentation": "This variable holds a string containing the last (at most) 1024 characters typed on the keyboard. This string will only contain printable characters typed, but it _will_ correctly respond to pressing the backspace key by erasing the last character. This variable is _not_ read only and you can change it, for example to set it to \"\" (an empty string) if you handled it already, or use the [String Functions](../../strings/index.html) to manipulate it.",
        "return": "String"
    },
    "ef_star": {
        "parameters": [],
        "example": {
            "code": "repeat(10)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_star, x - 32 + random(64), y - 32 + random(64), choose(0, 1, 2), c_yellow);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_star;",
        "function": "ef_star;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a star effect as illustrated in the image below:  \n  \n![](images/ef_star.png)",
        "return": "N/A."
    },
    "iap_acquire": {
        "parameters": [
            {
                "label": "purchase_id",
                "documentation": "The product ID string for the purchase."
            },
            {
                "label": "payload",
                "documentation": "This is a string that can be used for purchase verification on Google Play (use an empty string, \"\", on all other platforms)."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;iap_acquire(\"noads\", \"\")<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "iap_acquire(purchase_id, payload);",
        "function": "iap_acquire",
        "documentation": "This function is the one that you use to acquire a purchase through the target store for the device running your game. This product ID string is that which you specify when activating the IAP using [iap_activate](iap_activate.html), and should be the same as that which you used to identify the product on the target store. This function will return an value as it's \"index\" so that it can be identified when the purchase data comes through and calling the function will trigger an [**IAP Event**](../../../2_interface/1_editors/events/async_events.html) of the \"type\" iap\\_ev\\_purchase, which will contain the following additional key:",
        "return": "Real"
    },
    "phy_kinematic": {
        "parameters": [],
        "example": {
            "code": "if !phy_kinematic<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_speed_x = 5;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_kinematic;",
        "function": "phy_kinematic;",
        "documentation": "This **read-only** variable will return true if the instance is classed as being a kinematic object, or false if it is not. A kinematic instance is one that has infinite mass (a density of 0) but can move. So, to make an instance kinematic, you would first create a static instance and then set one or more of the instance variables related to movement (ie: [phy\\_speed\\_x](phy_speed_x.html)).",
        "return": "Boolean"
    },
    "sprite_set_offset": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to change the offset of."
            },
            {
                "label": "xoff",
                "documentation": "The x position of the origin."
            },
            {
                "label": "yoff",
                "documentation": "The y position of the origin."
            }
        ],
        "example": {
            "code": "sprite_assign(spr_Custom, spr_Base);<br> sprite_set_offset(spr_Custom, sprite_get_xoffset(spr_Base), sprite_get_yoffset(spr_Base));<br>",
            "description": ""
        },
        "signature": "sprite_set_offset(ind, xoff, yoff);",
        "function": "sprite_set_offset",
        "documentation": "This function can be used to set the x and y origin of a sprite, and takes relative values based on the (0,0) position being the upper left corner of the sprite. The following image illustrates this: ![](spr_xyoffset.png)",
        "return": ""
    },
    "steam_ugc_get_subscribed_items": {
        "parameters": [
            {
                "label": "item_list",
                "documentation": "A (previously created) DS list index."
            }
        ],
        "example": {
            "code": "steam_list = ds_list_create();<br> steam_ugc_get_subscribed_items(steam_list);<br>",
            "description": ""
        },
        "signature": "steam_ugc_get_subscribed_items(item_list);",
        "function": "steam_ugc_get_subscribed_items",
        "documentation": "This function will populate a DS list with all the published file IDs for the items that the user is currently subscribed to. You must first create the list and store the index in a variable, then pass this to the function. The function will return true if everything is correct and the Steam API is initialised, or false if there is an error.",
        "return": "Boolean"
    },
    "audio_get_recorder_count": {
        "parameters": [],
        "example": {
            "code": "if audio_get_recorder_count() &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;channel_index = audio_start_recording(0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_get_recorder_count();",
        "function": "audio_get_recorder_count",
        "documentation": "This function will return the number of audio recording sources (like microphones, etc...) currently available to your game. So, if you have a return value of, for example, four, then you will have audio input on the sources 0, 1, 2 and 3, with one of these values being that which you use to start recording from using the function [audio\\_start\\_recording()](audio_start_recording.html). This value can change at any time as people plug/unplug microphones or other input sources to the device. Note that you can use the function [audio\\_get\\_recorder_info](audio_get_recorder_info.html) to get information on each device connected.",
        "return": "Integer"
    },
    "buffer_copy": {
        "parameters": [
            {
                "label": "src_buffer",
                "documentation": "The index of the buffer to copy from."
            },
            {
                "label": "src_offset",
                "documentation": "The data offset to start copying from (in bytes)."
            },
            {
                "label": "size",
                "documentation": "The size of the data to copy (in bytes)."
            },
            {
                "label": "dest_buffer",
                "documentation": "The index of the buffer to copy to."
            },
            {
                "label": "dest_offset",
                "documentation": "The offset position to copy the data to (in bytes)."
            }
        ],
        "example": {
            "code": "buffer_copy(buff1, 0, 2048, buff2, 2048);",
            "description": ""
        },
        "signature": "buffer_copy(src_buffer, src_offset, size, dest_buffer, dest_offset);",
        "function": "buffer_copy",
        "documentation": "This function can be used to copy a segment (or all) of the data stored in one buffer to another. When using two buffers and copying from one to the other, both buffers must have previously been created using the [buffer_create](buffer_create.html) function (for example), and you can specify a data offset (in bytes) for the start point of the data to be copied from the source buffer relative to the start of the buffer, as well as another data offset to define the position to copy the data to in the destination buffer.  \n  \n_**NOTE:** You cannot copy to the same buffer._",
        "return": "N/A"
    },
    "display_get_orientation": {
        "parameters": [
            {
                "label": "display_landscape",
                "documentation": "The device is being held horizontally ie: The longest edge is from left to right, and the menu button is on the right."
            },
            {
                "label": "display_landscape_flipped",
                "documentation": "As above, only now the menu button is on the left."
            },
            {
                "label": "display_portrait",
                "documentation": "The device is being held vertically ie: The longest edge is from top to bottom, and the menu button is at the bottom."
            },
            {
                "label": "display_portrait_flipped",
                "documentation": "As above, only now the menu button is at the top."
            }
        ],
        "example": {
            "code": "if display_get_orientation() = display_landscape<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Config = 0;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Config = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "display_get_orientation()",
        "function": "display_get_orientation",
        "documentation": "This function will return one of two constant _GameMaker Studio 2_ has to tell you whether the device running the game is being held in landscape or portrait mode:",
        "return": "Constant"
    },
    "ds_priority_read": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to write."
            },
            {
                "label": "str",
                "documentation": "The string to write from."
            },
            {
                "label": "legacy (optional)",
                "documentation": "Can be either true or false or omitted completely."
            }
        ],
        "example": {
            "code": "p_queue = ds_priority_create();<br> ini_open(\"save.ini\");<br> var str = ini_read_string(\"P_Queues\", \"0\", \"\");<br> if str != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_priority_read(p_queue, str);<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "ds_priority_read(id, str [, legacy]);",
        "function": "ds_priority_read",
        "documentation": "With this function you can recreate a saved ds_priority (one that has previously been written as a string using [ds\\_priority\\_write](ds_priority_write.html)). You must first create a new ds\\_priority to read the string into, and if the ds\\_priority already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game. Note that if the data structure was created with previous versions of _GameMaker_ you should add the optional argument \"legacy\", setting it to true as the string format has changed with this version.",
        "return": "N/A"
    },
    "merge_colour": {
        "parameters": [
            {
                "label": "col1",
                "documentation": "The first colour to merge"
            },
            {
                "label": "col2",
                "documentation": "The second colour to merge"
            },
            {
                "label": "amount",
                "documentation": "How much of each colour should be merged. For example, 0 will return col1, 1 will return col2, and 0.5 would return a merge of both colours equally"
            }
        ],
        "example": {
            "code": "col = merge_colour(c_lime, c_orange, 0.5);",
            "description": ""
        },
        "signature": "merge_colour(col1, col2, amount);",
        "function": "merge_colour",
        "documentation": "With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the \"amount\" argument, where a value of 0 will return the first colour (col1), a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and blue together: ![](images/merge_colour.png)",
        "return": "value"
    },
    "path_append": {
        "parameters": [],
        "example": {
            "code": "path_append(mypath, mppath); path_delete(mppath);",
            "description": ""
        },
        "signature": "path_append(index, path);",
        "function": "path_append",
        "documentation": "With this code you can append one path onto another one, effectively joining them together, and for this to work, both paths must previously exist (either made in the path editor or created using [path_add](path_add.html)).  \n  \n**_NOTE:_ This will not remove the path being appended from the resources. It is still there, only it now has no points in it and if you no longer wish to use it you should remove it with the function [path_delete](path_delete.html).**",
        "return": "N/A"
    },
    "steam_is_cloud_enabled_for_app": {
        "parameters": [],
        "example": {
            "code": "if steam_is_cloud_enabled_for_app()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;quota = steam_get_quota_total();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_is_cloud_enabled_for_app();",
        "function": "steam_is_cloud_enabled_for_app",
        "documentation": "With this function you can check to make sure that the Steam Cloud service is enabled for your game. It will return true if it is and false otherwise. Note that this does not automatically mean that you can use the Cloud functions as the user can switch off Cloud synchronisation from their Steam Client. You can check this using the function [steam\\_is\\_cloud\\_enabled\\_for_account](steam_is_cloud_enabled_for_account.html), but, even if it is disabled for the user (and enabled for the game), the functions will still work to store and retrieve data from a local copy of all files, it will just not upload them to the cloud on the game end, nor synchronise on the game start.",
        "return": "Boolean"
    },
    "window_center": {
        "parameters": [],
        "example": {
            "code": "if !window_get_fullscreen()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;window_center();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_center();",
        "function": "window_center",
        "documentation": "With this function you can center the game window in the display when the target module is Windows, Ubuntu (Linux) or MacOS, or you can center it in the browser if the target module is HTML5. This function has no effect on any other device.  \n  \n_**NOTE:** If you have resized the game window (for example, by switching from full screen to windowed), and wish to center the new window, this function should be called in an **alarm\\[0\\]** at least one step later than the window size change, otherwise it will not work correctly._",
        "return": "N/A"
    },
    "vertex_format_add_position": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_colour();<br> vertex_format_add_position();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_add_position();",
        "function": "vertex_format_add_position",
        "documentation": "Tell _GameMaker Studio 2_ to accept 2D positional data (x and y) as part of the new vertex format being created.",
        "return": "N/A"
    },
    "date_get_minute_of_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to check."
            }
        ],
        "example": {
            "code": "myminuteyear = date_get_minute_of_year(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_minute_of_year(date);",
        "function": "date_get_minute_of_year",
        "documentation": "This function returns the minute of the given datetime value within the year (from the total number of minutes for the year, taking into account leap years).",
        "return": "Real"
    },
    "physics_fixture_set_edge_shape": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "local_x1",
                "documentation": "start x position for the edge"
            },
            {
                "label": "local_y1",
                "documentation": "start y position for the edge"
            },
            {
                "label": "local_x2",
                "documentation": "end x position for the edge"
            },
            {
                "label": "local_y2",
                "documentation": "end y position for the edge"
            }
        ],
        "example": {
            "code": "var xx = 0;<br> var y1 = room_height - 100;<br> var y2 = room_height - 50 - irandom(100);<br> for (var i = 0; i &lt; 10; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var fix = physics_fixture_create();<br> &nbsp;&nbsp;&nbsp;physics_fixture_set_edge_shape(fix, xx, y1, xx + 50, y2);<br> &nbsp;&nbsp;&nbsp;physics_fixture_bind(fix, id);<br> &nbsp;&nbsp;&nbsp;physics_fixture_delete(fix);<br> &nbsp;&nbsp;&nbsp;xx += 50;<br> &nbsp;&nbsp;&nbsp;y1 = y2;<br> &nbsp;&nbsp;&nbsp;y2 = room_height - 50 - irandom(100);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_fixture_set_edge_shape(fixture, local_x1, local_y1, local_x2, local_y2)",
        "function": "physics_fixture_set_edge_shape",
        "documentation": "This function defines an \"edge\" fixture shape. An edge shape is simply a line that will generate a collision when other fixtures over lap it, and can be very useful for generating (for example) terrain, or for creating borders around a room. The position of the edge is defined using _local_ space, ie: the x/y position of the instance is considered (0,0), so this should be taken into consideration when creating them (in the code example below, the instance would have been placed at (0,0) in the room to avoid complications).",
        "return": "N/A"
    },
    "physics_particle_get_radius": {
        "parameters": [],
        "example": {
            "code": "if physics_particle_get_radius() &lt; 32<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_particle_set_radius(physics_particle_get_radius() + 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_particle_get_radius()",
        "function": "physics_particle_get_radius",
        "documentation": "With this function you can find out what the current radius (in pixels) is for particles in the physics simulation (you can set this value using [physics\\_particle\\_set_radius()](physics_particle_set_radius.html)).",
        "return": "Real"
    },
    "layer_instance_get_instance": {
        "parameters": [
            {
                "label": "element_id",
                "documentation": "The unique ID value of the instance element to get the ID of"
            }
        ],
        "example": {
            "code": "elements = layer_get_all_elements(\"Instances\");<br> for (var i = 0; i &lt; array_length_1d(elements); i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp; if (layer_get_element_type(elements[i]) == layerelementtype_instance)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var layerelement = elements[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inst = layer_instance_get_instance(layerelement);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inst.x = inst.x + 10;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_instance_get_instance(element_id)",
        "function": "layer_instance_get_instance",
        "documentation": "This function can be used to get the unique instance ID of the given instance element. You give the instance _element_ ID (see the code example below for how to get this), and the function will return a real value that represents the unique instance id for the element. If the element is not an instance, the function will return -1.",
        "return": "Real (Unique ID value for an instance)"
    },
    "http_post_string": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The web address of the server that you wish to get information from"
            },
            {
                "label": "string",
                "documentation": "The string you wish to send to the specified URL"
            }
        ],
        "signature": "http_post_string(url, string);",
        "function": "http_post_string",
        "documentation": "In computing, a **post** request is used when the client needs to send data to the server as part of the retrieval request, such as when uploading a file or submitting a completed form, and the same is true of this function in _GameMaker Studio 2_. In contrast to the http_get request method where only a URL is sent to the server, http\\_post\\_string() also includes a string that is sent to the server and may result in the creation of a new resource or the update of an existing resource or both. It should be noted that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function too.",
        "return": "Real"
    },
    "gamepad_button_count": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            }
        ],
        "example": {
            "code": "b_num = gamepad_button_count(0);",
            "description": ""
        },
        "signature": "gamepad_button_count(device);",
        "function": "gamepad_button_count",
        "documentation": "This function will return the _total_ number of buttons available for the gamepad connected to the given device \"slot\".",
        "return": "Real"
    },
    "ds_priority_create": {
        "parameters": [],
        "example": {
            "code": "p_queue = ds_priority_create();",
            "description": ""
        },
        "signature": "ds_priority_create();",
        "function": "ds_priority_create",
        "documentation": "This function will create a new priority queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the priority queue.",
        "return": "Real"
    },
    "date_inc_week": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to."
            },
            {
                "label": "amount",
                "documentation": "The number of weeks (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_week(date_current_datetime(), 52);",
            "description": ""
        },
        "signature": "date_inc_week(date, amount);",
        "function": "date_inc_week",
        "documentation": "With this function you can increment a given datetime value by a specific number of weeks, and it will return the new datetime value.",
        "return": "Real"
    },
    "random": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The upper range from which the random number will be selected."
            }
        ],
        "example": {
            "code": "if random(10) &gt;= 9<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score += 100;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "random(n);",
        "function": "random",
        "documentation": "This function is good for probabilities where returning an integer (whole number) is not necessary. For example, random(100) will return a value from 0 to 99, but that value can be 22.56473! You can also use real numbers and not integers in this function like this - random(0.5), which will return a value between 0 and 0.4999999.",
        "return": "Real"
    },
    "os_is_network_connected": {
        "parameters": [],
        "example": {
            "code": "if os_is_network_connected()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;facebook_init();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_is_network_connected()",
        "function": "os_is_network_connected",
        "documentation": "With this function you can check and see if your device currently has an internet connection and it will return true if it does, or false if it does not.  \n  \n_**NOTE:** This function checks the internal device API that controls connections and so may return true if there is a bluetooth connection, a Wi-Fi connection, or even just a normal network connection that permits internet access._",
        "return": "Boolean"
    },
    "path_get_length": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to measure."
            }
        ],
        "example": {
            "code": "len = path_get_length(c_path);",
            "description": ""
        },
        "signature": "path_get_length(index);",
        "function": "path_get_length",
        "documentation": "You can use this function to get the exact length of a path in pixels. this is _not_ an approximate length from point to point, but rather an exact length along the shape of the path, even when the path is smooth with a high curved precision.",
        "return": "Real."
    },
    "ds_grid_add": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x",
                "documentation": "The x position of the cell in the grid."
            },
            {
                "label": "y",
                "documentation": "The y position of the cell in the grid."
            },
            {
                "label": "val",
                "documentation": "The value to add to the cell."
            }
        ],
        "example": {
            "code": "ds_grid_add(grid, 5, 5, 6)<br>",
            "description": ""
        },
        "signature": "ds_grid_add(index, x, y, val);",
        "function": "ds_grid_add",
        "documentation": "This function can be used to add a given value (real or string) to the value of the given cell within the grid. The value to be added must be the same type as that held within the grid cell, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.",
        "return": "N/A"
    },
    "ds_grid_get_disk_sum": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_disk_sum(grid, 5, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_disk_sum(index, xm, ym, r);",
        "function": "ds_grid_get_disk_sum",
        "documentation": "This function can be used to add all the values all the cells found within the defined disk area of a grid together, as shown in the image below: ![](ds_grid_get_disk_sum.png)",
        "return": "Real or String"
    },
    "draw_highscore": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the highscore rectangle."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the highscore rectangle."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the highscore rectangle."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the highscore rectangle."
            }
        ],
        "example": {
            "code": "draw_highscore(100, 100, room_width - 100, room_height - 100);",
            "description": ""
        },
        "signature": "draw_highscore( x1, y1, x2, y2 );",
        "function": "draw_highscore",
        "documentation": "This simple function will draw the current list of internally stored high scores using the currently set font, colour and alpha values within the specified rectangle. You provide the coordinates for the upper left corner and lower right corner of the rectangular area to draw the text, and _GameMaker Studio 2_ will take care of the rest, with spacing and position being done automatically.",
        "return": "N/A"
    },
    "date_leap_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to use."
            }
        ],
        "example": {
            "code": "if date_leap_year(date_current_datetime())<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !global.ExtraContent<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.ExtraContent = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "date_leap_year(date);",
        "function": "date_leap_year",
        "documentation": "This function will return true if the year component of the given datetime value is a leap year or false otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking special content.",
        "return": "Boolean"
    },
    "layer_background_blend": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "blend",
                "documentation": "The colour to blend with the background sprite (default is c_white)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> layer_background_blend(back_id, c_aqua);<br>",
            "description": ""
        },
        "signature": "layer_background_blend(background_element_id, blend);",
        "function": "layer_background_blend",
        "documentation": "",
        "return": "N/A"
    },
    "layer_background_htiled": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "visible",
                "documentation": "The horizontal tiling toggle, which can be true or false"
            }
        ],
        "example": {
            "code": "var back = layer_background_get_id(layer);<br> if !layer_background_get_htiled(back) || !layer_background_get_vtiled(back)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_htiled(back, true);<br> &nbsp;&nbsp;&nbsp;layer_background_vtiled(back, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_htiled(background_element_id, tiled);",
        "function": "layer_background_htiled",
        "documentation": "",
        "return": "N/A"
    },
    "layer_sprite_get_xscale": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_xscale(spr_id) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_xscale(spr_id, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_xscale(sprite_element_id);",
        "function": "layer_sprite_get_xscale",
        "documentation": "",
        "return": "Real"
    },
    "chr": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The Unicode code value to get the string from"
            }
        ],
        "example": {
            "code": "mystring = chr(53) + chr(48);",
            "description": ""
        },
        "signature": "chr(val);",
        "function": "chr",
        "documentation": "This function returns a string containing the character which relates to the input Unicode code for displaying. This character depends on the current drawing fonts character set codepage and if no font is set, it will use the default code page for the machine.",
        "return": "String"
    },
    "display_get_gui_width": {
        "parameters": [],
        "example": {
            "code": "ads_move(display_get_gui_width() - ads_get_display_width(0), 0, 0);",
            "description": ""
        },
        "signature": "display_get_gui_width();",
        "function": "display_get_gui_width",
        "documentation": "With this function you can get the width (in pixels) of the GUI as used in the [Draw GUI Event](../../../../2_interface/1_editors/events/draw_events.html).",
        "return": "Real"
    },
    "window_set_max_width": {
        "parameters": [
            {
                "label": "width",
                "documentation": "The maximum width in pixels for the game window."
            }
        ],
        "example": {
            "code": "window_set_min_width(640);<br> window_set_min_height(480);<br> window_set_max_width(1280);<br> window_set_max_height(960);<br>",
            "description": ""
        },
        "signature": "window_set_max_width(width);",
        "function": "window_set_max_width",
        "documentation": "",
        "return": "N/A"
    },
    "virtual_key_delete": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the virtual key to delete."
            }
        ],
        "example": {
            "code": "virtual_key_delete(global.Left);",
            "description": ""
        },
        "signature": "virtual_key_delete(index);",
        "function": "virtual_key_delete",
        "documentation": "If your game has different rooms or instances to control menus and game-play and other things, then it is probable that you will need to change the position and key maps of your virtual keys at some point. For that you can use this function to delete the old ones before creating the new ones (if necessary). Note, however, that the virtual keys will be automatically removed from the room at its end, so this function is only necessary when you wish to manually remove the keys before the room itself has finished.",
        "return": "N/A"
    },
    "shaders_are_supported": {
        "parameters": [],
        "example": {
            "code": "global.GFX = false;<br> if shaders_are_supported()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if shader_is_compiled(sh_glass) &amp;&amp; shader_is_compiled(sh_warp)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.GFX = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "shaders_are_supported();",
        "function": "shaders_are_supported",
        "documentation": "This function will do a check to see if the chosen target platform supports shaders, returning true if they do, and false if they do not. It is important to note that on **Android**, if the project does not have any shader resources defined, then the function will _always return false_, regardless of whether the device supports shaders or not.",
        "return": "Boolean"
    },
    "steam_ugc_num_subscribed_items": {
        "parameters": [],
        "example": {
            "code": "numSub = steam_ugc_num_subscribed_items();",
            "description": ""
        },
        "signature": "steam_ugc_num_subscribed_items();",
        "function": "steam_ugc_num_subscribed_items",
        "documentation": "This function can be used to get the number of items that the current user has subscribed to.",
        "return": "Real"
    },
    "draw_line_width_colour": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the start of the line."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the start of the line."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the end of the line."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the end of the line."
            },
            {
                "label": "w",
                "documentation": "The width in pixels of the line."
            },
            {
                "label": "col1",
                "documentation": "The colour of the start of the line."
            },
            {
                "label": "col2",
                "documentation": "The colour of the end of the line."
            }
        ],
        "example": {
            "code": "draw_line_width_colour(50, 50, 300, 50, 4, c_red, c_blue);",
            "description": ""
        },
        "signature": "draw_line_width_colour(x1, y1, x2, y2, w, col1, col2);",
        "function": "draw_line_width_colour",
        "documentation": "With this function you can draw a line of a specific width with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html).",
        "return": "N/A"
    },
    "string_pos": {
        "parameters": [
            {
                "label": "substr",
                "documentation": "The substring to look for in the string."
            },
            {
                "label": "str",
                "documentation": "The string."
            }
        ],
        "example": {
            "code": "if string_pos(\",\", text) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;string_insert(name, text, string_pos(\",\", text));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "string_pos(substr, str);",
        "function": "string_pos",
        "documentation": "This function will return the character position of an instance of a sub-string within a string, or 0 if it's not found at all. One use for this is for filtering words that may be considered offensive, or for finding the correct place to insert some text into another string.",
        "return": "Real"
    },
    "http_get": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The web address of the server that you wish to get information from"
            }
        ],
        "signature": "http_get(url);",
        "function": "http_get",
        "documentation": "With this function, you connect to the specified URL in order to retrieve information. As this is an asynchronous function, _GameMaker Studio 2_ will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an **Async Event** in any instance that has one defined in their object properties. You should also note that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function, for example:",
        "return": "Real"
    },
    "buffer_async_group_option": {
        "parameters": [
            {
                "label": "option",
                "documentation": "The option to set."
            },
            {
                "label": "value",
                "documentation": "The value to set (can be string or real, depending on the option)."
            }
        ],
        "example": {
            "code": "buffer_async_group_begin(\"save_folder_name\");<br> buffer_async_group_option(\"showdialog\", false);<br> buffer_async_group_option(\"slottitle\", \"Catch The Haggis Save\");<br> buffer_async_group_option(\"subtitle\", \"All your haggis are saved here!\");<br> save = buffer_save_async(buff, \"Player_Save.sav\", 0, 16384);<br> buffer_async_group_end();<br>",
            "description": ""
        },
        "signature": "buffer_async_group_option(option, value);",
        "function": "buffer_async_group_option",
        "documentation": "With this function you can set some platform specific options for the buffer group being saved. The options available are as follows:",
        "return": "N/A"
    },
    "display_get_dpi_y": {
        "parameters": [],
        "example": {
            "code": "dpy = display_get_dpi_y();",
            "description": ""
        },
        "signature": "display_get_dpi_y();",
        "function": "display_get_dpi_y",
        "documentation": "Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60 and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.  \n  \nThis function will get the dpi of the device display along the y axis (this value is also dependant on the orientation of the device). Please note that Mac and iOS do not return specific dpi settings but appear to return the same values as the OS, which are not correct (but will have to do) as Apple do not give the correct values.",
        "return": "Real"
    },
    "gpu_get_cullmode": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_cullmode() != cull_clockwise<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_cullmode(cull_clockwise);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_cullmode();",
        "function": "gpu_get_cullmode",
        "documentation": "This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is cull_noculling):",
        "return": "Constant (see above for constants)"
    },
    "application_surface_enable": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Set to enable (true) or disable (false) the application surface."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if application_surface_is_enabled()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application_surface_enable(false);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application_surface_enable(true);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "application_surface_enable(enable);",
        "function": "application_surface_enable",
        "documentation": "With this function you can enable or disable the application surface. By default the application surface is enabled and all drawing for the Draw events will be done to that and the surface drawn to the screen. However on some older devices and specific chipsets this may result in poorer performance. In those cases you can switch off drawing to the application surface and all Draw event drawing will then be done directly to the screen buffer.",
        "return": "N/A"
    },
    "object_set_mask": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the object to change."
            },
            {
                "label": "spr",
                "documentation": "The new sprite to use as the object's mask."
            }
        ],
        "example": {
            "code": "if global.level=10 object_set_mask(obj_Platform, spr_mask_10);",
            "description": ""
        },
        "signature": "object_set_mask(index, spr);",
        "function": "object_set_mask",
        "documentation": "With this function you can set the mask_index of a specific object (for more information on masks see [The Object Editor](../../../2_interface/1_editors/objects.html)). This means that all instances of this object that are created _after the mask has been changed_ will be created with this new mask, while instances that are already in the room may not be affected. You can set this to -1 to remove a mask sprite and so default to the mask defined for the sprite of the object (or no masks if no sprite has been chosen).  \n  \nPlease note that this is not an instance function! You can set the mask index of individual instances using the [mask_index](../instances/instance_variables/mask_index.html) variable and so have ten instances all with a different mask to the object they are created from, and even if you change the mask index of the object using this function, all instances that are currently in the room will remain as they were, and only instances created after calling the function will start with the new mask.",
        "return": "N/A"
    },
    "room_first": {
        "parameters": [],
        "example": {
            "code": "if lives &lt; 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto(room_first);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_first;",
        "function": "room_first;",
        "documentation": "",
        "return": "Index"
    },
    "audio_emitter_set_listener_mask": {
        "parameters": [
            {
                "label": "emitterID",
                "documentation": "The unique ID of the emitter to set the mask of"
            },
            {
                "label": "mask",
                "documentation": "The bitmask data to set for the sound"
            }
        ],
        "example": {
            "code": "s_emit = audio_emitter_create();<br> audio_emitter_set_listener_mask(snd, global.PlayerMask);<br>",
            "description": ""
        },
        "signature": "audio_emitter_set_listener_mask(emitterID, mask);",
        "function": "audio_emitter_set_listener_mask",
        "documentation": "This function can be used to set the the bit-mask for an emitter so that all sounds played through the emitter will play only from those listeners specified. You can create a bit-mask by using the [audio\\_get\\_listener_info()](audio_get_listener_info.html) and then using the bitwise or (\"|\") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the emitter. This mask will over-ride the default mask or that which you may have set using the function [audio\\_set\\_listener_mask()](audio_set_listener_mask.html).",
        "return": "N/A"
    },
    "buffer_load_async": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to load."
            },
            {
                "label": "filename",
                "documentation": "The name of the file to load."
            },
            {
                "label": "offset",
                "documentation": "The offset within the buffer to load to (in bytes)."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer area to load (in bytes)."
            }
        ],
        "signature": "buffer_load_async(buffer, filename, offset, size);",
        "function": "buffer_load_async",
        "documentation": "With this function you can load a file that you have created previously using the [buffer_save](buffer_save.html) function (or any of the other functions for saving buffers) into a buffer. The \"offset\" defines the start position within the buffer for loading (in bytes), and the \"size\" is the size of the buffer area to be loaded from that offset onwards (also in bytes).  \n  \nThe function returns a unique ID value which can then be used to check the [asynchronous event](../../../2_interface/1_editors/events/async_events.html) async_load ID value, as shown in the extended example below. The async_load map in the event will have the following two key/value pairs:",
        "return": "Real"
    },
    "draw_roundrect_colour_ext": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the rounded rectangle."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the rounded rectangle."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the rounded rectangle."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the rounded rectangle."
            },
            {
                "label": "xrad",
                "documentation": "The radius of the curve along the x axis from the rectangle corners."
            },
            {
                "label": "yrad",
                "documentation": "The radius of the curve along the y axis from the rectangle corners."
            },
            {
                "label": "col1",
                "documentation": "The center colour."
            },
            {
                "label": "col2",
                "documentation": "The outside edge colour."
            },
            {
                "label": "outline",
                "documentation": "Whether the rectangle is an outline (true) or filled in (false)."
            }
        ],
        "example": {
            "code": "var dist = point_distance(x, y, mouse_x, mouse_y) / 10;<br> var col = make_colour_hsv(clamp(dist, 0, 255), 255, 255);<br> draw_roundrect_colour_ext(x - 50, y - 50, x + 50, y + 50, dist, dist, col, c_white, 0);<br>",
            "description": ""
        },
        "signature": "draw_roundrect_colour_ext(x1, y1, x2, y2, xrad, yrad, col1, col2, outline);",
        "function": "draw_roundrect_colour_ext",
        "documentation": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If the rectangle is filled, then the colour arguments will be used to generate a colour gradient from the centre to the edges, where colour 1 is the centre colour and colour 2 the edge colour. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html).",
        "return": "N/A"
    },
    "min": {
        "parameters": [
            {
                "label": "val0 ... max_val",
                "documentation": "The values to compare."
            }
        ],
        "example": {
            "code": "x = min(x, room_width);",
            "description": ""
        },
        "signature": "min(val1, val2, ... max_val);",
        "function": "min",
        "documentation": "This function returns the minimum of the input values, of which it can have as many as you require (note that more arguments will mean that the function will be slower to parse). For example min(12, 96, 32, 75) will return 12 as that is the lowest of all the input values.",
        "return": "Real"
    },
    "physics_fixture_set_restitution": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "The index of the fixture"
            },
            {
                "label": "restitution",
                "documentation": "The restitution of the fixture (usually between 0 and 1)"
            }
        ],
        "example": {
            "code": "physics_fixture_set_restitution(fix_Ball, 0.9);",
            "description": ""
        },
        "signature": "physics_fixture_set_restitution(fixture, restitution)",
        "function": "physics_fixture_set_restitution",
        "documentation": "In physics, restitution is defined as \"the return of an object or system to its original state after elastic deformation\", but as the fixtures in the _GameMaker Studio 2_ are really rigid bodies and cannot be deformed, restitution is really a way of saying how \"bouncy\" the fixture is. This setting will affect how much an object \"bounces\" when it collides with other objects and is co-dependant on other forces that act on the instance like gravity and friction, and is usually a value between 0 and 1 (higher values can be used but may give unpredictable results). Here is an illustration of how it works:  \n  \n![](images/physics_fixture_set_restitution_image.png)",
        "return": "N/A"
    },
    "tile_set_flip": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to set"
            },
            {
                "label": "flip",
                "documentation": "Set to true to flip and false to leave it as-is"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> var data = tilemap_get(map_id, mx, my);<br> var bool = !tile_get_flip(data);<br> data = tile_set_flip(data, bool);<br> tilemap_set(map_id, data, mx, my);<br>",
            "description": ""
        },
        "signature": "tile_set_flip(tiledata, flip)",
        "function": "tile_set_flip",
        "documentation": "",
        "return": "Real (tiledata)"
    },
    "view_hport": {
        "parameters": [],
        "example": {
            "code": "camera_set_view_size(view_camera[0], view_wport[0], view_hport[0]);<br>",
            "description": ""
        },
        "signature": "view_hport[0 ... 7];",
        "function": "view_hport[0 ... 7];",
        "documentation": "This variable can be used to get or to set the height of the specified view port. The height of the view port (or combined view ports if more than one are active) define the height of the game window or background canvas _at the start of the game_, so changing this value after the game has started will have no visible effect on the game window size unless called along with the function [window\\_set\\_size](../display/the%20game%20window/window_set_size.html). If you have a larger or smaller port size than that assigned to the camera, then the camera view will be scaled down - or up - to fit, as illustrated by the image below.  \n  \n![](images/view_wh.png)",
        "return": "Integer"
    },
    "gpu_set_blendmode": {
        "parameters": [
            {
                "label": "mode",
                "documentation": "The blend mode to use (see the table above)"
            }
        ],
        "example": {
            "code": "gpu_set_blendmode(bm_add);<br> draw_circle_colour(100, 100, 50, c_white, c_black, 0);<br> gpu_set_blendmode(bm_normal);",
            "description": ""
        },
        "signature": "gpu_set_blendmode(mode);",
        "function": "gpu_set_blendmode",
        "documentation": "When _GameMaker Studio 2_ goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
        "return": "N/A"
    },
    "draw_vertex_texture": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the vertex."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the vertex."
            },
            {
                "label": "xtex",
                "documentation": "The width of the texture sample to use."
            },
            {
                "label": "ytex",
                "documentation": "The height of the texture sample to use."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> var tex = background_get_texture(background0);<br> draw_primitive_begin_texture(pr_trianglestrip, tex);<br> draw_vertex_texture(0, 480, 0, 1);<br> draw_vertex_texture(0, 0, 0, 0);<br> draw_vertex_texture(640, 480, 1, 1);<br> draw_vertex_texture(640, 0, 1, 0);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_vertex_texture(x, y, xtex, ytex)",
        "function": "draw_vertex_texture",
        "documentation": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See [draw\\_primitive\\_begin](draw_primitive_begin.html) for more information), the order with which you add the vertexes to it and the position of the start point you set for the texture. To end and draw the primitive you must call [draw\\_primitive\\_end](draw_primitive_end.html).",
        "return": "N/A"
    },
    "get_save_filename": {
        "parameters": [
            {
                "label": "filter",
                "documentation": "The file type filter and/or name."
            },
            {
                "label": "fname",
                "documentation": "The suggested filename to use."
            }
        ],
        "example": {
            "code": "var file;<br> file = get_save_filename(\"screenshot|*.png\", \"\");<br> if file != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;screen_save(file);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "get_save_filename(filter, fname);",
        "function": "get_save_filename",
        "documentation": "This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form \"_name1|mask1|name2|mask2|..._\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"_bitmaps|*.bmp;*.wmf_\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does **not** save the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned.  \n  \nAn important thing to note when using this function is that it grants you certain permissions for that file, for the duration of your game. So, once you get the file path from the user, you can access it again and again without having to ask, and the permission applies to reading _and_ writing equally.  \n  \n_**NOTE:** This function is only valid on the Windows and macOS targets._",
        "return": "String."
    },
    "ini_section_exists": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section in the open .ini file to check for."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> if !ini_section_exists(\"save1\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.savegame = \"1\";<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ini_section_exists(section);",
        "function": "ini_section_exists",
        "documentation": "This function checks to see if a section exists in the currently open ini. This is not a necessary check to prevent errors as, when a section does not exist, reading from a non-existent section will just return a default value, however it can be useful to see if an ini file has saved specific data.",
        "return": "Boolean"
    },
    "iap_product_details": {
        "parameters": [
            {
                "label": "purchase_id",
                "documentation": "The product ID string for the purchase."
            },
            {
                "label": "ds_map",
                "documentation": "The ds_map that will store the product information."
            }
        ],
        "example": {
            "code": "var p_map = ds_map_create();<br> iap_product_details(ds_map_find_value(iap_data, \"index\"), p_map);<br> p_title = \" + string(ds_map_find_value(p_map, \"title\")));<br> p_description = \" + string(ds_map_find_value(p_map, \"description\")));<br> ds_map_destroy(p_map);<br>",
            "description": ""
        },
        "signature": "iap_product_details(product_id, ds_map);",
        "function": "iap_product_details",
        "documentation": "With this function you can populate a previously created [ds_map](../data_structures/ds%20maps/index.html) with a number of key/value pairs that describe the given purchase. The following data is returned within the map:",
        "return": "N/A"
    },
    "layer_get_y": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the y position of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_x(lay_id) != 0 || layer_get_x(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_x(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_y(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_y(layer_id)",
        "function": "layer_get_y",
        "documentation": "You can use this function to retrieve the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.",
        "return": "Real"
    },
    "shader_current": {
        "parameters": [],
        "example": {
            "code": "if shader_current() == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;shader_set(sh_warp)<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "shader_current();",
        "function": "shader_current",
        "documentation": "This function will return the index ID value of the shader currently being used for rendering, or it will return -1 if no shader is being used.",
        "return": "Real (ID value of the shader, or -1 if no shader)"
    },
    "steam_get_quota_free": {
        "parameters": [],
        "example": {
            "code": "if steam_is_cloud_enabled_for_app()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;quota = steam_get_quota_free();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_quota_free();",
        "function": "steam_get_quota_free",
        "documentation": "With this function you can find out how much free space is left for the user of the Steam Cloud quota. The value returned is in _bytes_.",
        "return": "Real"
    },
    "steam_ugc_send_query": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to send."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1);<br> steam_ugc_query_add_required_tag(query_handle, \"RPG\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": "steam_ugc_send_query(ugc_query_handle);",
        "function": "steam_ugc_send_query",
        "documentation": "This function can be used to send a query request. You first define the query using the appropriate steam\\_ugc\\_create\\_query\\_*() functions which will return a \"query Handle\". This handle is then used to set filters etc.... before being used in this funtion to send off the query request. The function returns a unique async ID value which can be used to check the details correctly in the Steam Async event. This event will have the async_load DS map which will be populated with the following key/value pairs:",
        "return": "Boolean"
    },
    "vertex_create_buffer_ext": {
        "parameters": [
            {
                "label": "size",
                "documentation": "The initial size of the buffer (in bytes)."
            }
        ],
        "example": {
            "code": "v_buff = vertex_create_buffer_ext(1024 * 1024);",
            "description": ""
        },
        "signature": "vertex_create_buffer_ext(size);",
        "function": "vertex_create_buffer_ext",
        "documentation": "As with the function [vertex\\_create\\_buffer](vertex_create_buffer.html), this function will create a new vertex buffer. This is a special _grow_ buffer created by _GameMaker Studio 2_ which is pre-formatted for use when building primitives for use with shaders. You can specify an initial starting size for the buffer (in bytes) and it will return a \"handle\" (index) for the buffer which should then be used in all further calls to the buffer.",
        "return": "Pointer"
    },
    "path_scale": {
        "parameters": [],
        "example": {
            "code": "path_scale = 1 + random(2);",
            "description": ""
        },
        "signature": "path_scale;",
        "function": "path_scale;",
        "documentation": "",
        "return": "Real"
    },
    "layer_background_get_speed": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_speed(back_id) &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_speed(back_id, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_speed(background_element_id);",
        "function": " layer_background_get_speed",
        "documentation": "",
        "return": "Real"
    },
    "sprite_get_number": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite."
            }
        ],
        "example": {
            "code": "image_index = floor(random(sprite_get_number(sprite_index)));",
            "description": ""
        },
        "signature": "sprite_get_number(index);",
        "function": "sprite_get_number",
        "documentation": "A sprite has to have at least one sub-image and this function will return just how many it has. Remember, a sprite sub-image starts being numbered from 0, so if this function returns 3 (the sprite being checked has 3 sub-images) they will be numbered 0, 1 and 2.",
        "return": ""
    },
    "skeleton_skin_list": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The sprite index of the Spine skeletal animation to get the list from."
            },
            {
                "label": "list",
                "documentation": "The ID of the DS list to populate with the animation names."
            }
        ],
        "example": {
            "code": "var list = ds_list_create();<br> skeleton_skin_list(sprite_index, list);<br> var num = ds_list_size(list);<br> skeleton_skin_set(list[| irandom(num - 1));<br> ds_list_destroy(list);<br>",
            "description": ""
        },
        "signature": "skeleton_skin_list(sprite, list);",
        "function": "skeleton_skin_list",
        "documentation": "With this function you can populate a (pre-created) [ds_list](../../data_structures/ds%20lists/index.html) with all the names of the skins included as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation skin functions for these types of sprite.",
        "return": "N/A"
    },
    "audio_group_load_progress": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index of the audio group to check (as defined in the Audio Groups Window)"
            }
        ],
        "example": {
            "code": "if load<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var pc = audio_group_load_progress(audiogroup_level1);<br> &nbsp;&nbsp;&nbsp;draw_text(32, 32, \"Loading: \" + string(pc));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_group_load_progress(groupID);",
        "function": "audio_group_load_progress",
        "documentation": "This function will check the loading progress for an audio group and return an (approximate) value between 0 and 100.",
        "return": "Real"
    },
    "audio_listener_set_velocity": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The listener to get the data for (default 0)."
            },
            {
                "label": "x",
                "documentation": "The x velocity of the listener (default 0)."
            },
            {
                "label": "y",
                "documentation": "The y velocity of the listener (default 0)."
            },
            {
                "label": "z",
                "documentation": "The z velocity of the listener (default 0)."
            }
        ],
        "example": {
            "code": "var num = audio_get_listener_count();<br> for(var i = 0; i &lt; num; ++i;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;var data = audio_listener_get_data(info[? \"index\"]);<br> &nbsp;&nbsp;&nbsp;if data[? \"vx\"] != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_listener_set_velocity(info[? \"index\"], 0, 0, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(data);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_listener_set_velocity(index, x, y, z);",
        "function": "audio_listener_set_velocity",
        "documentation": "This function can be used to give the given listener _doppler_ effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. The default listener index is 0, but you can use the function [audio\\_get\\_listener_info](audio_get_listener_info.html) to get the different indices available for the target platform.",
        "return": "N/A"
    },
    "sprite_duplicate": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to duplicate."
            }
        ],
        "example": {
            "code": "new_spr = sprite_duplicate(sprite_index)",
            "description": ""
        },
        "signature": "sprite_duplicate(index);",
        "function": "sprite_duplicate",
        "documentation": "This function will return the index of a newly created sprite that is a duplicate (copy) of the one input as the \"index\" argument. If the function fails, -1 is returned. This function _must_ be used to copy any sprites from the original assets before any transformations can be done on them. For example, if you wish to change the bounding box for a sprite, or set its alpha from another sprite, you must first duplicate it, then perform the operation on the duplicated sprite and use that. A duplicated sprite will be places on its own unique texture page when created, meaning that duplicating multiple sprites will create multiple texture pages and have an impact on performance, so use this function only when necessary.",
        "return": ""
    },
    "skeleton_animation_get_ext": {
        "parameters": [
            {
                "label": "track",
                "documentation": "The track number to get the animation set name of."
            }
        ],
        "example": {
            "code": "if skeleton_animation_get_ext(1) != \"bodyfight\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_animation_set_ext(\"bodyfight\", 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_get_ext(track);",
        "function": "skeleton_animation_get_ext",
        "documentation": "A single skeletal animation sprite can have various animation sets, and these sets can be assigned different tracks so that you can \"mix and match\" animation sets. This function will return the name of the animation set currently used by the given track number (as set by the function [skeleton\\_animation\\_set_ext](skeleton_animation_set_ext.html)).",
        "return": "String"
    },
    "io_clear": {
        "parameters": [],
        "example": {
            "code": "io_clear();",
            "description": ""
        },
        "signature": "io_clear();",
        "function": "io_clear",
        "documentation": "This function will clear the current keyboard and mouse states. Note that what happens in the next step after calling this function will depend on what is being checked and the platform it is being checked on. With mouse input, the mouse button will have to be released and pressed again for any further input to be detected, but with the keyboard it's not quite that simple. In general, the keyboard will be cleared _only for that step_ but the next step will again detect the key, however this may not be the same across all platforms and keyboards, and in some cases the function may act like it does for the mouse and require the key to be lifted and pressed again.",
        "return": "N/A"
    },
    "draw_sprite_tiled_ext": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite. A multiplier ' 1 = normal scaling, 0.5 is half etc."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite. A multiplier ' 1 = normal scaling, 0.5 is half etc."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite. c_white is to display it normally."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_sprite_tiled_ext(sprite_index, image_index, x, y, 2, 2, c_red, 0.5);",
            "description": ""
        },
        "signature": "draw_sprite_tiled_ext(sprite, subimg, x, y, xscale, yscale, colour, alpha);",
        "function": "draw_sprite_tiled_ext",
        "documentation": "This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same as those used in [draw\\_sprite\\_ext](draw_sprite_ext.html)).",
        "return": "N/A"
    },
    "date_get_second": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "mysecond = date_get_second(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_second(date);",
        "function": "date_get_second",
        "documentation": "This function returns the second of the given datetime value.",
        "return": "Real"
    },
    "steam_ugc_start_item_update": {
        "parameters": [
            {
                "label": "consumer_app_id",
                "documentation": "The unique App ID for your game on Steam."
            },
            {
                "label": "published_file_id",
                "documentation": "The unique published file ID value for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_start_item_update(consumer_app_id, published_file_id);",
        "function": "steam_ugc_start_item_update",
        "documentation": "This function must be called before adding or updating information on a UGC item. You need to supply the unique App ID for your game on Steam, along with the unique published file ID that was returned for the item when you created it using the function [steam\\_ugc\\_create_item](steam_ugc_create_item.html). The function will return a unique update handle for the item, which you can then use in the UGC item functions to update (or add) information for uploading.",
        "return": "Handle"
    },
    "get_login_async": {
        "parameters": [
            {
                "label": "username",
                "documentation": "The default user name"
            },
            {
                "label": "password",
                "documentation": "The default password"
            }
        ],
        "signature": "get_login_async(name, password);",
        "function": "get_login_async",
        "documentation": "This function opens a window that asks the user to input a username and password. These arguments can be set as an empty string or you can store previously entered values to use if you wish. This is an asynchronous function, and as such _GameMaker Studio 2_ does _not_ block the device it is being run on while waiting for answer, but rather keeps on running events as normal. Once the user has input the details and pressed the \"Okay\" button, an asynchronous **User Interaction** event is triggered which, for the duration of that event _only_, will have a ds_map stored in the variable async_load.",
        "return": "Real"
    },
    "display_set_gui_maximise": {
        "parameters": [],
        "example": {
            "code": "display_set_gui_size(display_get_width() / 2, display_get_height() / 2;<br> display_set_gui_maximise(2, 2, 0, 0);<br>",
            "description": ""
        },
        "signature": "display_set_gui_maximise(<i>xscale, yscale, xoffset, yoffset</i>);",
        "function": "display_set_gui_maximise",
        "documentation": "",
        "return": "N/A"
    },
    "ds_grid_get_min": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The left cell column of the region."
            },
            {
                "label": "y1",
                "documentation": "The top cell row of the region."
            },
            {
                "label": "x2",
                "documentation": "The right cell column of the region."
            },
            {
                "label": "y2",
                "documentation": "The bottom cell row of the region."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_min(grid, 0, 0, 5, 5)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_min(index, x1, y1, x2, y2);",
        "function": "ds_grid_get_min",
        "documentation": "This function can be used to find the minimum value for all the cells found within the defined region of a grid, as shown in the image below: ![](ds_grid_get_min.png)",
        "return": "Real or String"
    },
    "font_get_italic": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "if font_get_italic(fnt_Main)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_set_font(fnt_Main);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "font_get_italic(ind);",
        "function": "font_get_italic",
        "documentation": "With this function you can check any font asset to see if it has the _italic_ flag or not. If it does the function will return true, otherwise it will return false.",
        "return": "Boolean"
    },
    "instance_exists": {
        "parameters": [
            {
                "label": "obj",
                "documentation": "The object or instance to check for the existence of."
            }
        ],
        "example": {
            "code": "if !instance_exists(obj_Enemy)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score += 200;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_hiscores);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_exists(obj);",
        "function": "instance_exists",
        "documentation": "This function can be used in two ways depending on what you wish to check. You can give it an object_index to check for, in which case this function will return true if any active instances of the specified object exist in the current room, or you can also supply it with an instance id, in which case this function will return true if that specific instance exists and is active in the current room.",
        "return": "Boolean"
    },
    "sprite_height": {
        "parameters": [],
        "example": {
            "code": "if sprite_height != sprite_get_height(sprite_index)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_yscale = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_height;",
        "function": "sprite_height;",
        "documentation": "This **read only** variable returns the height of the sprite that has been assigned to the instance. This height is returned in pixels and will be dependant on the [image_yscale](image_yscale.html). If you need the un-scaled height you should use [sprite\\_get\\_height](../../sprites/sprite_get_height.html).",
        "return": "Real"
    },
    "dot_product": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the first vector."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first vector."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second vector."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second vector."
            }
        ],
        "example": {
            "code": "var x1, y1, x2, y2;<br> x1 = lengthdir_x(1, image_angle);<br> y1 = lengthdir_y(1, image_angle);<br> x2 = o_Player.x - x;<br> y2 = o_Player.y - y;<br> if dot_product(x1, y1, x2, y2) &gt; 0 seen=true else seen=false;<br>",
            "description": ""
        },
        "signature": "dot_product(x1, y1, x2, y2)",
        "function": "dot_product",
        "documentation": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).  \n  \nThe actual mathematical formula can be written like this:  \n  \n![](images/dot_product_image.png)",
        "return": "Real"
    },
    "os_is_paused": {
        "parameters": [],
        "example": {
            "code": "if os_is_paused()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !instance_exists(obj_PauseMenu) instance_create_layer(0, 0, \"Controllers\", obj_PauseMenu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_is_paused()",
        "function": "os_is_paused",
        "documentation": "When developing for mobile devices, you need to have a way to check that the device is still focused on your game or not, especially as if your game is on an iOS, Android or Windows Phone device then it can be interrupted by phone calls and other apps. You can use this function to check if the device is paused or not.  \n  \nIt is worth noting that this function will run any code that is contained within the code block on devices but then _GameMaker Studio 2_ will be paused immediately after as the device caches the game as a background process. So if you have something like the example code provided below, the instance to be created will not actually appear or run any of its events _until after the game has been restarted from the cached state_. This means that you may prefer to have the os\\_is\\_paused function call an alarm and then in the alarm event (which will be set when the device is paused but not run until it is un-paused) create a pause menu, restart music etc...  \n  \nIf you are using this function on Windows, Ubuntu (Linux), MacOS or HTML5 platforms, then the function is only toggled for **one step** to true when the game loses focus, and then it will return false again until the game is returned to focus (and loses it again). This is because these platforms do not cache apps and games, and so these will continue to run in the background.  \n  \n_**NOTE:** On mobile devices, sounds and music will be stopped when the os is paused. They will **not** restart again unless you specifically start them with the appropriate function._",
        "return": "Boolean"
    },
    "path_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check for."
            }
        ],
        "example": {
            "code": "if path_exists(path0)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_start(path0, 4, path_action_reverse, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_exists(index);",
        "function": "path_exists",
        "documentation": "This function returns whether a path with the given index exists or not. Note that if you check for the existence of a path through a variable that has yet to have been declared, this will throw an error.",
        "return": "Boolean."
    },
    "phy_col_normal_x": {
        "parameters": [],
        "example": {
            "code": "repeat(5 + irandom(5))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (instance_create_layer(x, y, \"Effects\", obj_Debris)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_apply_local_impulse(0, 0, other.phy_col_normal_x[0], other.phy_col_normal_y[0]);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_col_normal_x;",
        "function": "phy_col_normal_x;",
        "documentation": "This **read-only** variable returns the x component of the collision normal corresponding to the [phy\\_collision\\_x](phy_collision_x.html) array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct \"push\" direction to resolve collisions.  \n  \n_**NOTE:** This variable is only available in the collision event of a physics enabled instance._",
        "return": "Boolean"
    },
    "layer_sprite_blend": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "blend",
                "documentation": "The colour to blend with the sprite sprite (default is c_white)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> layer_sprite_blend(spr_id, c_gray);<br>",
            "description": ""
        },
        "signature": "layer_sprite_blend(sprite_element_id, blend);",
        "function": "layer_sprite_blend",
        "documentation": "",
        "return": "N/A"
    },
    "tilemap_get": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the tiledata of"
            },
            {
                "label": "x_cell",
                "documentation": "The cell along the x-axis to get the tile data from"
            },
            {
                "label": "y_cell",
                "documentation": "The cell along the y-axis to get the tile data from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var data = tilemap_get(map_id, 0, 0);<br> data = tile_set_flip(data, true);<br> tilemap_set(map_id, data, 0, 0);<br>",
            "description": ""
        },
        "signature": "tilemap_get(tilemap_element_id, cell_x, cell_y);",
        "function": "tilemap_get",
        "documentation": "Using this function you can retrieve the tile data from a cell of the tilemap element. You give the tilemap element ID (which you get when you create a tilemap element using [layer\\_tilemap\\_create()](layer_tilemap_create.html) or when you use the function [layer\\_tilemap\\_get_id()](layer_tilemap_get_id.html)), as well as the _cell_ x and y position and the function will return the tile data \"blob\". This data is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see [tilemap\\_set\\_mask](tilemap_set_mask.html) for details), and the resulting data value can then be used in the [Tile Functions](index.html#tiles) to change a tiles properties. Note that we are using x/y cell positions based on the size of the tilemap grid and _not_ as a position in the room, so \"cell_x\" is a value from 0 to [tilemap width](tilemap_get_width.html), and \"cell_y\" is a value from 0 to [tilemap height](tilemap_get_height.html). If you need to get the data for a tile at a specific room position then you need to use the function [tilemap\\_get\\_at_pixel()](tilemap_get_at_pixel.html).",
        "return": "Real (-1 if there is an error)"
    },
    "steam_set_stat_avg_rate": {
        "parameters": [
            {
                "label": "stat_name",
                "documentation": "The name of the statistic to set (a string)."
            },
            {
                "label": "session_count",
                "documentation": "The value to get the average of (a real number)"
            },
            {
                "label": "session_length",
                "documentation": "The time that has been taken since the last time the stat was set (a real number)."
            }
        ],
        "signature": "steam_set_stat_avg_rate(stat_name, session_count, session_length);",
        "function": "steam_set_stat_avg_rate",
        "documentation": "This function permits you to set an average statistic type with a \"sliding window\" effect on the average. The \"session\\_count\" value is the current value that you wish to average out, while the \"session\\_length\" is the amount of game time since the last call to the function. Please see the **extended Example** below for further details on how this can be used.",
        "return": "N/A"
    },
    "cloud_string_save": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The data string to be uploaded."
            },
            {
                "label": "description",
                "documentation": "A brief description of the data being stored."
            }
        ],
        "example": {
            "code": "var t_str = \"\";<br> for (var i = 0; i &lt; 10; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;t_str += string(global.Highscore[i]) + \"|\"<br> &nbsp;&nbsp;&nbsp;}<br> save_check = cloud_string_save(t_str, \"Current Highscores\");<br> var file = file_text_open_write(\"Highscores.txt\");<br> file_text_write_string(file, t_str);<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "cloud_string_save(string, description);",
        "function": "cloud_string_save",
        "documentation": "This function will commit a string to the chosen cloud service for storage. The function will return a unique **id** value that should then be used in the appropriate asynchronous event to identify the ds_map that is returned as a \"call back\" from the cloud service. The string should contain _all_ the information that you need to save for your game as you can only store one single \"data blob\" to the cloud, and running this function again will overwrite any previously stored values (as will using the [cloud\\_file\\_save](cloud_file_save.html) function). The description should be a short string of information that describes the save, eg: \"Level2, Stage2\".",
        "return": "Real"
    },
    "draw_path": {
        "parameters": [
            {
                "label": "path",
                "documentation": "The path to draw"
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where the path is drawn"
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where the path is drawn"
            },
            {
                "label": "absolute",
                "documentation": "Whether the path is drawn at the absolute position (true) or the relative position (false)"
            }
        ],
        "example": {
            "code": "if mp_grid_path(grid, path, x, y, obj_Player.x, obj_Player.y, 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_path(path, x, y, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_path(path, x, y, absolute);",
        "function": "draw_path",
        "documentation": "With this function you can get _GameMaker Studio 2_ to draw a path to the screen. The path will be drawn as a simple line, and can be either relative to the calling instance or at the absolute position it was created at in the path editor or through code. This function is extremely useful when debugging dynamic paths (for example, those created for instances with the [mp\\_grid\\_path](../../movement%20and%20collisions/motion%20planning/mp_grid_path.html) function).",
        "return": "N/A"
    },
    "math_get_epsilon": {
        "parameters": [],
        "example": {
            "code": "var e = math_get_epsilon();",
            "description": ""
        },
        "signature": "math_get_epsilon();",
        "function": "math_get_epsilon",
        "documentation": "This function will return the current epsilon value for the target platform. For more information on epsilon, please see the function [math\\_set\\_epsilon()](math_set_epsilon.html).",
        "return": "Real"
    },
    "position_meeting": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check."
            },
            {
                "label": "y",
                "documentation": "The y position to check."
            },
            {
                "label": "obj",
                "documentation": "The object (or instance id, or the keywords \"all\" or \"other\") to check for a collision with."
            }
        ],
        "example": {
            "code": "if mouse_check_button(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !position_meeting(mouse_x, mouse_y, all) instance_create_layer(mouse_x, mouse_y, \"Walls\", obj_Wall);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "position_meeting(x, y, obj);",
        "function": "position_meeting",
        "documentation": "With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked. If you need to know get the unique instance **id** if the object being collided with you should use [instance_position](../../instances/instance_functions/instance_position.html). This function also accepts the special keywords **all** and **other**.",
        "return": "Boolean"
    },
    "buffer_get_surface": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "surface",
                "documentation": "The index of the surface to use."
            },
            {
                "label": "mode",
                "documentation": "The data to get from the surface (see the list of constants below)."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            },
            {
                "label": "modulo",
                "documentation": "The offset from the end of the line to the start of the next"
            }
        ],
        "example": {
            "code": "buffer_get_surface(buff, application_surface, 0, 0, 0);",
            "description": ""
        },
        "signature": "buffer_get_surface(buffer, surface, mode, offset, modulo);",
        "function": "buffer_get_surface",
        "documentation": "With this function you can write the information from a surface to a given buffer. The buffer must have been created previously and should be a 1byte aligned _grow_ buffer of an approximate size (in bytes) of the surface you are going to write. You can choose the copy \"mode\" for the data being stored which is set by the constants listed below, as well as the offset and modulo values. Both offset and modulo are byte values, with the offset defining the start position within the buffer and modulo being the number of bytes left at the end of every line (for storing additional data). Note that the function writes each pixel of the surface to the buffer using a **BGRA** formatting on the Windows target, but on other targets it may be different depending on the OS or even the device.",
        "return": "N/A"
    },
    "ds_list_add": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to add to."
            },
            {
                "label": "val",
                "documentation": "The value to add to the list."
            },
            {
                "label": "[val2, ... max_val]",
                "documentation": "Optional values to be added to the list."
            }
        ],
        "example": {
            "code": "ds_list_add(sc_list, score);",
            "description": ""
        },
        "signature": "ds_list_add(id, val1 [, val2, ... max_val]);",
        "function": "ds_list_add",
        "documentation": "This function can be used to add a new value (real or string) to the list, which will be added on at the end. The function can take further optional arguments (as many as you require), permitting you to add multiple values consecutively to the list in a single call.",
        "return": "N/A"
    },
    "ds_map_secure_save_buffer": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The DS map ID value."
            },
            {
                "label": "buffer",
                "documentation": "The buffer ID value."
            }
        ],
        "example": {
            "code": "buff = buffer_create(128,buffer_grow,4);<br> var map = ds_map_create();<br> ds_map_add(map,\"bob\",\"ajob\");<br> ds_map_add(map,\"money\",10);<br> ds_map_secure_save_buffer(map, buff);<br> ds_map_destroy(map);<br>",
            "description": ""
        },
        "signature": "ds_map_secure_save_buffer(id, buffer);",
        "function": "ds_map_secure_save_buffer",
        "documentation": "This function will save a previously created DS map to a buffer. You supply the DS map ID value (as returned by the function [ds\\_map\\_create](ds_map_create.html)) and the ID of the buffer to write to (as returned by the function [buffer_create](../../buffers/buffer_create.html)).",
        "return": "Ds_map Index"
    },
    "date_get_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "myyear = date_get_year(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_year(date);",
        "function": "date_get_year",
        "documentation": "This function returns the year of the given datetime.",
        "return": "Real"
    },
    "move_outside_solid": {
        "parameters": [
            {
                "label": "dir",
                "documentation": "The direction to move in."
            },
            {
                "label": "maxdist",
                "documentation": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
            }
        ],
        "example": {
            "code": "if other.solid<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var pdir;<br> &nbsp;&nbsp;&nbsp;pdir = point_direction(other.x, other.y, x, y);<br> &nbsp;&nbsp;&nbsp;move_outside_solid(pdir, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "move_outside_solid(dir, maxdist);",
        "function": "move_outside_solid",
        "documentation": "With this function you can tell an instance to move out of a collision with any instance flagged as **solid** in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: _GameMaker Studio 2_ will move the instance continually up 1000 pixels until it is out of collision.",
        "return": "N/A"
    },
    "physics_apply_local_impulse": {
        "parameters": [
            {
                "label": "xpos",
                "documentation": "The x coordinate relative to the origin where the impulse will be applied"
            },
            {
                "label": "ypos",
                "documentation": "The y coordinate relative to the origin where the impulse will be applied"
            },
            {
                "label": "ximpulse",
                "documentation": "the x component of the impulse vector (relative to the xpos coordinate)"
            },
            {
                "label": "yimpulse",
                "documentation": "the y component of the impulse vector (relative to the ypos coordinate)"
            }
        ],
        "example": {
            "code": "if jump physics_apply_local_impulse(0, 20, 0, 50);",
            "description": ""
        },
        "signature": "physics_apply_local_impulse(xpos, ypos, ximpulse, yimpulse)",
        "function": "physics_apply_local_impulse",
        "documentation": "Not only can you apply force and gravity to an object with the physics in _GameMaker Studio 2_ but you can also apply an impulse. This is slightly different to a force in that when it is applied it will _immediately_ affect the speed, and, potentially the torque (or \"spin\") of the object, particularly if the point chosen to apply the impulse has a vector that is not aligned with the centre of mass (note: the center of mass is _not necessarily_ the same as the origin!). This function applies an impulse _locally_ to an instance. What this means is that the strength and direction of the impulse are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. Here is an illustration:  \n  \n![](images/physics_apply_local_impulse_image.png)",
        "return": "N/A"
    },
    "window_mouse_get_y": {
        "parameters": [],
        "example": {
            "code": "wy = window_mouse_get_y();",
            "description": ""
        },
        "signature": "window_mouse_get_y();",
        "function": "window_mouse_get_y",
        "documentation": "",
        "return": "Real"
    },
    "draw_clear_alpha": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour with which the screen will be cleared"
            },
            {
                "label": "alpha",
                "documentation": "The transparency of the colour with which the screen will be cleared"
            }
        ],
        "example": {
            "code": "draw_clear_alpha(c_red, 0.5);",
            "description": ""
        },
        "signature": "draw_clear_alpha(col, alpha);",
        "function": "draw_clear_alpha",
        "documentation": "This function can be used to clear the entire screen with a given colour and the alpha component of the destination is set to the value you have set - this function does _not_ do any blending as it works but any subsequent blend operations can be set up to use the destination alpha that you have set. This is only for use in the draw event of an instance (it will not show if used in any other event), and it can also be very useful for clearing [surfaces](../surfaces/index.html) when they are newly created.  \n  \nIt is worth noting that when using the HTML5 module, you can use this function to make the canvas background transparent, which will then permit any images being used in the host HTML to be seen with the game running over them. To achieve this effect you must first go into the room editor and remove any **Background Layers** from the [Room Editor](../../../../2_interface/1_editors/rooms.html), then untick the option **Clear View Background** found on the [View Properties](../../../../2_interface/1_editors/rooms.html#room_properties). Finally, you will need to make a new object, place it in the first room of the game, and assign it a very high depth (for example, 10000). Then in the **Pre Draw** event use this function to set the canvas alpha to the colour and transparency that you wish it to have.",
        "return": "N/A"
    },
    "date_current_datetime": {
        "parameters": [],
        "example": {
            "code": "myhour = date_get_hour(date_current_datetime());<br> myday = date_get_day(date_current_datetime());",
            "description": ""
        },
        "signature": "date_current_datetime();",
        "function": "date_current_datetime",
        "documentation": "Returns the date-time value of the current moment. The time returned is based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function [date\\_set\\_timezone()](date_set_timezone.html)",
        "return": "Real"
    },
    "physics_fixture_set_linear_damping": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "damping",
                "documentation": "the damping of the fixture, usually between 0 and 1"
            }
        ],
        "example": {
            "code": "physics_fixture_set_linear_damping(fix_Ball, 0.1);",
            "description": ""
        },
        "signature": "physics_fixture_set_linear_damping(fixture, damping)",
        "function": "physics_fixture_set_linear_damping",
        "documentation": "Damping is used to reduce the physics world velocity of instances, and differs from friction in that friction only occurs when two instances with fixtures are in contact. Damping is also much cheaper to simulate than friction, but please note that damping is not a replacement for friction; the two effects can, and should, be used together. Here is an image to illustrate damping:  \n  \n![](images/physics_fixture_set_linear_damping_image.png)",
        "return": "N/A"
    },
    "physics_particle_group_get_data": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The group index (ID) of the particle group to get the data from."
            },
            {
                "label": "buffer",
                "documentation": "The (previously created) buffer to use to store the data."
            },
            {
                "label": "flags",
                "documentation": "The flags to use to extract data about specific particle types."
            }
        ],
        "example": {
            "code": "var count = physics_particle_group_count(gp);<br> var flags = phy_particle_data_flag_position | phy_particle_data_flag_colour;<br> if (count &gt; 0)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var buffer = buffer_create(count * 12, buffer_grow, 4);<br> &nbsp;&nbsp;&nbsp;physics_particle_group_get_data(gp, buffer, flags);<br> &nbsp;&nbsp;&nbsp;for (var n = 0; n &lt; count; n++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xx = buffer_read(buffer, buffer_f32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yy = buffer_read(buffer, buffer_f32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var argb = buffer_read(buffer, buffer_u32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var alpha = (argb &gt;&gt; 24) &amp; 255;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_sprite_ext(sprBlob, 0, xx, yy, 1, 1, 0, c_green, alpha);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;buffer_delete(buffer);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_data(group, buffer, flags)",
        "function": "physics_particle_group_get_data",
        "documentation": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics\\_particle\\_group_end(), and the buffer used must have been created previously using the function [buffer_create()](../../buffers/buffer_create.html). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise _or_ \"|\" to create a single flag value to get the desired information.",
        "return": "Buffer data"
    },
    "layer_hspeed": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to set the horizontal speed of"
            },
            {
                "label": "hspd",
                "documentation": "The horizontal speed (in pixels per game frame) to set"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_hspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_vspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_hspeed(layer_id, hspd)",
        "function": "layer_hspeed",
        "documentation": "You can use this function to set the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is to the right and a negative value to the left.",
        "return": "N/A"
    },
    "sprite_delete": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to be deleted."
            }
        ],
        "example": {
            "code": "var spr = sprite_create_from_surface(application_surface, 0, 0, 32, 32, false, false, 16, 16);<br> sprite_merge(spr_Player, spr);<br> sprite_delete(spr);<br>",
            "description": ""
        },
        "signature": "sprite_delete(index);",
        "function": "sprite_delete",
        "documentation": "This function will delete a sprite from the game, freeing any memory that was reserved for it. This is a _permanent_ removal, and if the asset that you delete was included as part of the game's resources, not even restarting the game (unless you close the application first) will recover it. This is a very important function for those moments when you need to create and change sprites from external resources and should always be used to remove those assets that are no longer needed by a game, or to clear an indexed asset from a variable before re-assigning another asset to that variable. **This cannot be used to delete sprites that are included in the game as part of the resource tree**.",
        "return": ""
    },
    "steam_ugc_create_query_user_ex": {
        "parameters": [
            {
                "label": "list_type",
                "documentation": "The type of data list to create (see constants listed below)."
            },
            {
                "label": "match_type",
                "documentation": "The type of UGC items to query (see constants listed below)."
            },
            {
                "label": "sort_order",
                "documentation": "The way that the data should be ordered (see constants listed below)."
            },
            {
                "label": "page",
                "documentation": "The page number to query."
            },
            {
                "label": "account_id",
                "documentation": "The Steam account ID."
            },
            {
                "label": "creator_app_id",
                "documentation": "The item creator app ID."
            },
            {
                "label": "consumer_app_id",
                "documentation": "The consumer app ID."
            }
        ],
        "example": {
            "code": "query_handle = steam_ugc_create_query_user_ex(ugc_list_Published, ugc_match_Items, ugc_sortorder_TitleAsc, page, global.AccountID, 0, global.GameID);",
            "description": ""
        },
        "signature": "steam_ugc_create_query_user_ex(list_type, match_type, sort_order, page, account_id, creator_app_id, consumer_app_id);",
        "function": "steam_ugc_create_query_user_ex",
        "documentation": "This function can be used to query the UGC data base. The function requires the ID value for the user and the ID of the game that is going to consume the item and/or the ID of the game that created the item. You also need to use the following constants for the type of data to query, the type of item to query and the order in which the returned items will be sorted, as well as a page number - note that a query will return a _maximum_ number of 50 items.",
        "return": "Query Handle"
    },
    "gravity": {
        "parameters": [],
        "example": {
            "code": "if !place_meeting(x, y + 1, obj_Ground)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gravity = 0.01;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gravity = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gravity;",
        "function": "gravity;",
        "documentation": "",
        "return": "Real"
    },
    "layer_background_stretch": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "stretch",
                "documentation": "The stretch toggle, which can be true or false"
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var back = layer_background_get_id(layer);<br> &nbsp;&nbsp;&nbsp;if layer_background_get_stretch(back)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_background_stretch(back, false);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_background_stretch(back, true);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_stretch(background_element_id, stretch)",
        "function": "layer_background_stretch",
        "documentation": "",
        "return": "N/A"
    },
    "audio_start_sync_group": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to play."
            }
        ],
        "example": {
            "code": "sg = audio_create_sync_group(true);<br> audio_play_in_sync_group(sg, sound1);<br> audio_play_in_sync_group(sg, sound2);<br> audio_sound_gain(sound2, 0, 0);<br> audio_play_in_sync_group(sg, sound3);<br> audio_sound_gain(sound3, 0, 0);<br> audio_play_in_sync_group(sg, sound4);<br> audio_sound_gain(sound4, 0, 0);<br> audio_start_sync_group(sg);<br>",
            "description": ""
        },
        "signature": "audio_start_sync_group(group_index);",
        "function": "audio_start_sync_group",
        "documentation": "With this function you can strat a previously create sync group playing. The group index is the value returned when you created the group using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html).",
        "return": "N/A"
    },
    "file_attributes": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to check."
            },
            {
                "label": "attr",
                "documentation": "The attributes to check for."
            }
        ],
        "example": {
            "code": "if !file_attributes(file, fa_hidden) file_delete(file);",
            "description": ""
        },
        "signature": "file_attributes(fname, attr);",
        "function": "file_attributes",
        "documentation": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
        "return": "Boolean."
    },
    "part_type_speed": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "speed_min",
                "documentation": "The minimum speed the particle can start at."
            },
            {
                "label": "speed_max",
                "documentation": "The maximum speed the particle can start at."
            },
            {
                "label": "speed_incr",
                "documentation": "How much the particle speed should increase or decrease per step."
            },
            {
                "label": "speed_wiggle",
                "documentation": "How much should randomly be added or subtracted from the particle's speed per step."
            }
        ],
        "example": {
            "code": "part_type_shape(particle2, pt_shape_flare);<br> part_type_size(particle2, 0.01, 0.50, 0.01, 20);<br> part_type_scale(particle2, 0.10, 0.10);<br> part_type_colour3(particle2, 4210816, 4227327, 8240895);<br> part_type_alpha3(particle2, 0.20, 0.80, 0);<br> part_type_speed(particle2, 5, 10, -0.20, 20);<br> part_type_direction(particle2, 0, 359, -1, 20);<br> part_type_gravity(particle2, 0, 270);<br> part_type_orientation(particle2, 0, 359, 0, 20, 1);<br> part_type_blend(particle2, 1);<br> part_type_life(particle2, 1, 20);<br>",
            "description": ""
        },
        "signature": "part_type_speed(ind, speed_min, speed_max, speed_incr, speed_wiggle);",
        "function": "part_type_speed",
        "documentation": "This function is used to determine the speed of the particle when it is created and can also be used to make the particle increase or decrease its speed over its lifetime. The minimum and maximum speed values default at 1, which means that the particle will move 1 pixel each step, and if they are set to the same value, the initial speed for all particles will be the same, but if set to different values, each particle will start with a random speed from within the given range. For example if you have a minimum of 3 and a maximum of 6, all particles will be created with a speed between three and six pixels per step.  \n  \nYou can also set an increment value that will make the particle move faster (if a positive number) or slower (if a negative number) over its lifetime, with the given amount being added to the particle speed each and every step. This value can be a minimum of (+/-)0.01.  \n  \nFinally, you can set the \"wiggle\" factor. This is a value that will be added or subtracted randomly to the speed each step of the particles lifetime. Obviously larger values are more pronounced than smaller ones, and this value can even be a negative with the maximum range being between -20 and 20.",
        "return": "N/A"
    },
    "distance_to_object": {
        "parameters": [
            {
                "label": "obj",
                "documentation": "The object to check for."
            }
        ],
        "example": {
            "code": "if distance_to_object(obj_Player) &lt; range<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;canshoot = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "distance_to_object( obj );",
        "function": "distance_to_object",
        "documentation": "This function calculates the distance from the edge of the bounding box of the calling instance to the nearest edge of the nearest instance of the object specified. The object can be an object index or a specific instance id as well as the _keyword_ **other**, and the distance is returned in pixels. Note that if either of the objects have no sprite or no mask defined, the results will be incorrect.",
        "return": "Real."
    },
    "network_connect_raw": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "url",
                "documentation": "The URL or IP to connect to (a string)."
            },
            {
                "label": "port",
                "documentation": "The port to connect to."
            }
        ],
        "example": {
            "code": "client = network_create_socket(network_socket_tcp);<br> network_connect_raw(client, \"www.macsweeneygames.com\", 6510);<br>",
            "description": ""
        },
        "signature": "network_connect_raw(socket, url, port);",
        "function": "network_connect_raw",
        "documentation": "With this function you can send a request to connect to a server. The function takes the _socket id_ to connect through (see [network\\_create\\_socket](network_create_socket.html)) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and [network_connect](network_connect.html) is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end.",
        "return": "Real"
    },
    "steam_ugc_get_item_update_progress": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "info_map",
                "documentation": "A (previously created) DS map index."
            }
        ],
        "example": {
            "code": "var uploadMap = ds_map_create();<br> steam_ugc_get_item_update_progress(global.itemHandle, uploadMap);<br> var statusCode = uploadMap[? \"status_code\"];<br> var status = uploadMap[? \"status_string\"];<br> var processed = uploadMap[? \"bytes_processed\"];<br> var total = uploadMap[? \"bytes_total\"];<br> draw_text(32, 0, \"Upload info for item:\" + string(global.itemHandle));<br> draw_text(32, 15, \"status code:\" + string(statusCode));<br> draw_text(32, 30, \"status:\" + string(status));<br> draw_text(32, 45, \"bytes processed:\" +string(processed));<br> draw_text(32, 60, \"bytes total:\" + string( total));<br> ds_map_destroy(uploadMap);<br>",
            "description": ""
        },
        "signature": " steam_ugc_get_item_update_progress(ugc_update_handle, info_map);",
        "function": " steam_ugc_get_item_update_progress",
        "documentation": "This function can be used to track the update status for an item. You give the item handle (as returned by the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html)) and an empty DS map which will then be populated with the following key/value pairs:",
        "return": "Boolean"
    },
    "clickable_set_style": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the clickable icon to style."
            },
            {
                "label": "map",
                "documentation": "The index of the ds_map to set the style from."
            }
        ],
        "example": {
            "code": "var map = ds_map_create();<br> ds_map_add(map, \"opacity\", \"0.5\");<br> clickable_set_style(button, map);<br> ds_map_destroy();<br>",
            "description": ""
        },
        "signature": "clickable_set_style(index, map)",
        "function": "clickable_set_style",
        "documentation": "This function lets you set the CSS style properties for the given button via the key/value pairs in the provided ds_map. You need to have previously created the both the button element (using [clickable_add()](clickable_add.html)) and the ds_map previously and supply the stored indices as arguments.",
        "return": "N/A"
    },
    "display_mouse_set": {
        "parameters": [],
        "example": {
            "code": "display_mouse_set(display_get_width() / 2, display_get_height() / 2);",
            "description": ""
        },
        "signature": "display_mouse_set(x, y);",
        "function": "display_mouse_set",
        "documentation": "",
        "return": "N/A"
    },
    "vertex_begin": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to be written to."
            },
            {
                "label": "format",
                "documentation": "The vertex format to use."
            }
        ],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_position();<br> vertex_format_add_colour();<br> vertex_format_add_textcoord();<br> v_format = vertex_format_end();<br> v_buff = vertex_create_buffer();<br> vertex_begin(v_buff, v_format);<br>",
            "description": ""
        },
        "signature": "vertex_begin(buffer, format);",
        "function": "vertex_begin",
        "documentation": "With this function you begin the definition of a custom primitive. You assign a buffer to write the primitive to, and the vertex format to use (previously defined using the [vertex format functions](../vertex%20formats/index.html)). You would then define the necessary points for each vertex of the primitive before calling [vertex_end](vertex_end.html) to finalise the primitive creation.",
        "return": "N/A"
    },
    "vertex_normal": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "nx",
                "documentation": "The x component of the surface normal."
            },
            {
                "label": "ny",
                "documentation": "The y component of the surface normal."
            },
            {
                "label": "nz",
                "documentation": "The z component of the surface normal."
            }
        ],
        "example": {
            "code": "vertex_normal(buff, 0, 1, 1);",
            "description": ""
        },
        "signature": "vertex_normal(buffer, nx, ny, nz);",
        "function": "vertex_normal",
        "documentation": "This function will add surface normal data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z component parts of the normal.",
        "return": "N/A"
    },
    "collision_line": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the start of the line."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the start of the line."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the end of the line."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the end of the line."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instance collisions."
            },
            {
                "label": "prec",
                "documentation": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
            },
            {
                "label": "notme",
                "documentation": "Whether the calling instance, if relevant, should be excluded (true) or not (false)."
            }
        ],
        "example": {
            "code": "with (obj_Enemy)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if collision_line(100, 400, 100, 600, id, false, false) instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "collision_line( x1, y1, x2, y2, obj, prec, notme );",
        "function": "collision_line",
        "documentation": "Collision line checks along a line from point x1,y1 to point x2,y2 for a collision with **any** instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for _must_ also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:  \n  \n![](images/collision_line_illustration.png)",
        "return": "Instance id or <b>noone</b>"
    },
    "network_send_udp_raw": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "url",
                "documentation": "The url or IP to connect to (a string)."
            },
            {
                "label": "port",
                "documentation": "The port to connect to."
            },
            {
                "label": "buffer",
                "documentation": "The id of the buffer to get the data from."
            },
            {
                "label": "size",
                "documentation": "The size (in bytes) of the data."
            }
        ],
        "example": {
            "code": "network_send_udp_raw(sock, \"www.macsweeneygames.com\", 6510, buff, buffer_tell(buff));",
            "description": ""
        },
        "signature": "network_send_udp_raw(socket, url, port, buffer, size);",
        "function": "network_send_udp_raw",
        "documentation": "With this function you can send data over the network using UDP to a server. The function takes the _socket id_ to connect through, the URL to connect to and the port to use. You must then supply the _buffer id_ which contains the data to be sent (for more information on buffers see [Reference - Buffers](../buffers/index.html)) and finally the size (in bytes) of the data. UDP is \"connectionless\" in that you don't actually do a connect, you just send a packet directly to an IP, and the server gets incoming data from an IP address and has to deal with it \"as is\". The data sent is not formatted by _GameMaker Studio 2_ in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
        "return": "Real"
    },
    "phy_angular_damping": {
        "parameters": [],
        "example": {
            "code": "if place_meeting(phy_position_x, phy_position_y, obj_Water)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_angular_damping = 10;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_angular_damping = 3;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_angular_damping;",
        "function": "phy_angular_damping;",
        "documentation": "This variable can be used to set the angular damping of the instance, or it can be used to get the current angular damping. The damping is the amount of \"resistance\" to angular rotation that the physics enabled instance has, with a lower value permitting the instance to rotate faster after a collision (for example) and a higher value making it require a more forceful push and rotate slower.",
        "return": "Real"
    },
    "audio_get_listener_info": {
        "parameters": [
            {
                "label": "num",
                "documentation": "The listener number to get the data for."
            }
        ],
        "example": {
            "code": "var num = audio_get_listener_count();<br> var mask = 0; for(var i = 0; i &lt; num; ++i;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;var m = audio_listener_get_data(info[? \"mask\"]);<br> &nbsp;&nbsp;&nbsp;mask = mask | m;<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;}<br> audio_set_listener_mask(mask);<br>",
            "description": ""
        },
        "signature": "audio_get_listener_info(num);",
        "function": "audio_get_listener_info",
        "documentation": "This function will create a ds_map and populate it with information for the given listener.",
        "return": "ds_map"
    },
    "gpu_set_tex_max_aniso": {
        "parameters": [
            {
                "label": "maxaniso",
                "documentation": "The maximum level for anisotropic filtering (default: 16)"
            }
        ],
        "example": {
            "code": "if gpu_get_tex_max_aniso() != 8<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_aniso(8);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_max_aniso(maxaniso);",
        "function": "gpu_set_tex_max_aniso",
        "documentation": "With this function you can set the current maximum level of anisotropy when using the tf_anisotropic filter mode (see [gpu\\_get\\_tex\\_mip\\_filter()](gpu_get_tex_mip_filter.html) for more information). The input value must range between 1 and 16.",
        "return": "N/A"
    },
    "gpu_set_tex_mip_enable_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            },
            {
                "label": "setting",
                "documentation": "The mipmap setting (a constant, default: mip_markedonly)"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_mip_enable_ext(_sampleIndex) != mip_on<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_enable_ext(_sampleIndex, mip_on);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_mip_enable_ext(sampler_index, setting);",
        "function": "gpu_set_tex_mip_enable_ext",
        "documentation": "With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the [Texture Group Manager](../../../../2_interface/3_settings/textures.html) on a shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and then one of the constants listed below.",
        "return": "N/A"
    },
    "draw_text_ext_transformed": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "sep",
                "documentation": "The distance in pixels between lines of text."
            },
            {
                "label": "w",
                "documentation": "The maximum width in pixels of the string before a line break."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scale."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scale."
            },
            {
                "label": "angle",
                "documentation": "The angle of the text."
            }
        ],
        "example": {
            "code": "draw_set_halign(fa_center);<br> draw_set_valign(fa_middle);<br> image_angle += 1;<br> draw_text_ext_transformed(room_width / 2, room_height / 2, keyboard_string, 10, 300, 2, 2, image_angle);<br>",
            "description": ""
        },
        "signature": "draw_text_ext_transformed(x, y, string, sep, w, xscale, yscale, angle);",
        "function": "draw_text_ext_transformed",
        "documentation": "This function is a combination of the base [draw_text](draw_text.html) function with the [draw\\_text\\_ext](draw_text_ext.html) and [draw\\_text\\_transformed](draw_text_transformed.html) functions, permitting you to scale and rotate text while maintaining a specific line spacing and maximum width per line. Note that the \"width\" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.",
        "return": "N/A"
    },
    "solid": {
        "parameters": [],
        "example": {
            "code": "if other.visible = true<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = xprevious;<br> &nbsp;&nbsp;&nbsp;y = yprevious;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "solid;",
        "function": "solid;",
        "documentation": "An instance can be flagged as _solid_ through the object properties in the Object Editor, or by changing the value of this built-in variable. If solid is set to true then, when a collision is detected, the colliding instance is returned automatically to the position it was at in the step previous to the collision (and then any code or actions are run in the collision event). If it is set to false, all positioning must be dealt with through the collision event.",
        "return": "Boolean"
    },
    "collision_rectangle": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left side of the rectangle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top side of the rectangle to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right side of the rectangle to check."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom side of the rectangle to check."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instance collisions."
            },
            {
                "label": "prec",
                "documentation": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
            },
            {
                "label": "notme",
                "documentation": "Whether the calling instance, if relevant, should be excluded (true) or not (false)."
            }
        ],
        "example": {
            "code": "var inst;<br> inst = collision_rectangle(50, 50, 200, 100, obj_Ball, false, true);<br> if inst != noone<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (inst) instance_destroy();<br> &nbsp;&nbsp;&nbsp;}",
            "description": ""
        },
        "signature": "collision_rectangle( x1, y1, x2, y2, obj, prec, notme );",
        "function": "collision_rectangle",
        "documentation": "Collision_rectangle uses the first four arguments (x1,y1,x2,y2) to define an area within the current room and then checks to see if **any** object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:  \n  \n![](images/collision_rectangle_illustration.png)",
        "return": "Instance id or <b>noone</b>"
    },
    "physics_joint_set_value": {
        "parameters": [
            {
                "label": "joint",
                "documentation": "The index of the joint that you wish to change"
            },
            {
                "label": "field",
                "documentation": "The constant for the joint property that you wish to change"
            },
            {
                "label": "value",
                "documentation": "The new value for the joint property"
            }
        ],
        "example": {
            "code": "if physics_joint_get_value(revJoint, phy_joint_max_motor_torque) &lt; 2<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_joint_set_value(revJoint, phy_joint_max_motor_torque, 2);<br> &nbsp;&nbsp;&nbsp;{<br>",
            "description": ""
        },
        "signature": "physics_joint_set_value(joint, field, value)",
        "function": "physics_joint_set_value",
        "documentation": "Certain joint properties can be changed and set even after the creation of the joint, but only on those joints that have a motor, ie - [revolute joints](physics_joint_revolute_create.html) and [prismatic joints](physics_joint_prismatic_create.html). There are a number of constants that can be used in this function and they can be found here: [Physics Joint Constants](physics%20joint%20constants.html).",
        "return": "N/A"
    },
    "physics_particle_delete_region_circle": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position of the center of the area to delete."
            },
            {
                "label": "y",
                "documentation": "The y position of the center of the area to delete."
            },
            {
                "label": "radius",
                "documentation": "The radius (in pixels) of the circular area to delete."
            }
        ],
        "example": {
            "code": "physics_particle_delete_region_circle(mouse_x, mouse_y, 32);",
            "description": ""
        },
        "signature": "physics_particle_delete_region_circle(x, y, radius)",
        "function": "physics_particle_delete_region_circle",
        "documentation": "With this function you can delete (remove) all the particles that fall within the bounds of the defined circular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well as the radius (in pixels) which defines the circular area.",
        "return": "N/A"
    },
    "audio_emitter_get_gain": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_gain(emitter_player) &lt; 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_gain(emitter_player, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_gain(emitter);",
        "function": "audio_emitter_get_gain",
        "documentation": "This function returns the current gain (volume) set for the given audio emitter, normally between 0 and 1, where 0 is silent and 1 is full volume. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
        "return": "Real"
    },
    "buffer_seek": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "base",
                "documentation": "The base position to seek."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            }
        ],
        "example": {
            "code": "buffer_seek(buff, buffer_seek_start, 0);<br> buffer_write(buff, buffer_s16, 0);<br> buffer_write(buff, buffer_s16, x);<br> buffer_write(buff, buffer_s16, y);<br>",
            "description": ""
        },
        "signature": "buffer_seek(buffer, base, offset);",
        "function": "buffer_seek",
        "documentation": "This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The \"offset\" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:",
        "return": "N/A"
    },
    "part_type_gravity": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "grav_amount",
                "documentation": "Strength of the gravity."
            },
            {
                "label": "grav_direction",
                "documentation": "The direction of the gravity."
            }
        ],
        "example": {
            "code": "part_type_shape(global.p1, pt_shape_pixel);<br> part_type_size(global.p1, 1, 3, 0, 0);<br> part_type_scale(global.p1, 1, 1);<br> part_type_colour1(global.p1, c_white);<br> part_type_alpha2(global.p1, 1, 0);<br> part_type_speed(global.p1, 2, 4, 0, 0);<br> part_type_direction(global.p1, 0, 180, 0, 0);<br> part_type_gravity(global.p1, 0.20, 270);<br> part_type_orientation(global.p1, 0, 0, 0, 0, 1);<br> part_type_blend(global.p1, 1);<br> part_type_life(global.p1, 15, 60);<br>",
            "description": ""
        },
        "signature": "part_type_gravity(ind, grav_amount, grav_direction);",
        "function": "part_type_gravity",
        "documentation": "This function will set the gravity that is to affect each particle of the given type that is created. The gravity strength value is added to the particle speed every step and is usually a small value like 0.5, while the direction is the direction of the gravity \"pull\" and follows the standard _GameMaker Studio 2_ directions of 0° being right, 90° being up, 180° being left and 270° being down.",
        "return": "N/A"
    },
    "place_meeting": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check."
            },
            {
                "label": "y",
                "documentation": "The y position to check."
            },
            {
                "label": "obj",
                "documentation": "The instance or object to check for."
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !place_meeting(x - 5, y, obj_wall) x -=5;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "place_meeting(x, y, obj);",
        "function": "place_meeting",
        "documentation": "With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking _GameMaker Studio 2_ to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. This function also accepts the special keywords **all** and **other**. Please note that should you need to get the unique instance **id** of the object being collided with, you should use [instance_place](../../instances/instance_functions/instance_place.html).  \n  \n![](images/place_meeting.png)",
        "return": "Boolean"
    },
    "move_outside_all": {
        "parameters": [
            {
                "label": "dir",
                "documentation": "The direction to move in."
            },
            {
                "label": "maxdist",
                "documentation": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
            }
        ],
        "example": {
            "code": "if place_meeting(x, y, all)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;move_outside_all(90, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "move_outside_all(dir, maxdist);",
        "function": "move_outside_all",
        "documentation": "With this function you can tell an instance to move out of a collision in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: _GameMaker Studio 2_ will move the instance continually up 1000 pixels until it is out of collision.",
        "return": "N/A"
    },
    "camera_create_view": {
        "parameters": [
            {
                "label": "room_x",
                "documentation": "The x position (within the room) of the left side of the area the camera view captures."
            },
            {
                "label": "room_y",
                "documentation": "The y position (within the room) of the top of the area the camera view captures."
            },
            {
                "label": "width",
                "documentation": "The width of the area the view captures."
            },
            {
                "label": "height",
                "documentation": "The height of the area the view captures."
            },
            {
                "label": "angle",
                "documentation": "The angle to set the for the camera view(from 0° - 360°, default is 0)."
            },
            {
                "label": "object",
                "documentation": "The object ID (or instance ID) for the camera view to follow (default is -1, no object)."
            },
            {
                "label": "x_speed",
                "documentation": "The maximum horizontal speed the view can move at (set to -1 for \"instant\" following, default is -1)."
            },
            {
                "label": "y_speed",
                "documentation": "The maximum vertical speed the view can move at (set to -1 for \"instant\" following, default is -1)."
            },
            {
                "label": "x_border",
                "documentation": "The minimum horizontal space between the edge of the view area and the instance it is set to follow (before the view begins moving and if it is set to follow an instance, default is 0)."
            },
            {
                "label": "y_border",
                "documentation": "The minimum vertical space between the edge of the view area and the instance it is set to follow (before the view begins moving and if it is set to follow an instance, default is 0)."
            }
        ],
        "example": {
            "code": "view_camera[0] = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1);<br>",
            "description": ""
        },
        "signature": "camera_create_view(room_x, room_y, width, height, [angle, object, x_speed, y_speed, x_border, y_border])",
        "function": "camera_create_view",
        "documentation": "This function will create a new camera and then set its view into the room, before return the unique ID value to identify the camera in future function calls. The camera will be created using the values that you set in this function for position, size and other details which correlate to the values you set in the Room Editor (see [here](../../../../2_interface/1_editors/rooms.html)). Note that this function can take a _variable number of arguments_ with only the x/y position and width/height arguments being obligatory. Any arguments not supplied will use their default arguments.",
        "return": "Real (unique camera ID value)"
    },
    "draw_tile": {
        "parameters": [
            {
                "label": "tile set",
                "documentation": "The ID of the tile set to use"
            },
            {
                "label": "tiledata",
                "documentation": "The tile data to use"
            },
            {
                "label": "frame",
                "documentation": "The frame number for the animated tile to use (default 0 for non-animated tiles)"
            },
            {
                "label": "x",
                "documentation": "The x position within the room to draw at"
            },
            {
                "label": "y",
                "documentation": "The y position within the room to draw at"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var data = tilemap_get(map_id, 0, 0);<br> tile_set_flip(data, true);<br> draw_tile(set_Wall, data, 0, x, y);<br>",
            "description": ""
        },
        "signature": "draw_tile(tile set, tiledata, frame, x, y)",
        "function": "draw_tile",
        "documentation": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function [tilemap_get](../../rooms/tilemaps/tilemap_get.html) to get the tile data which can then be manipulated using the [Tile Functions](../../rooms/tilemaps/index.html#tiles), or you can construct it yourself using the following tile constants along with the index value of the tile to create:",
        "return": "Real"
    },
    "file_bin_write_byte": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to write to."
            },
            {
                "label": "byte",
                "documentation": "The data to write."
            }
        ],
        "example": {
            "code": "file_bin_write_byte(file, data);",
            "description": ""
        },
        "signature": "file_bin_write_byte(binfile, byte);",
        "function": "file_bin_write_byte",
        "documentation": "This function will write a byte of data to the file identified by the file ID at the current write position. You supply the file ID value, as returned by the function [file\\_bin\\_open](file_bin_open.html) and the byte of data to write.",
        "return": "real."
    },
    "current_second": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, \"The time is \" + string(current_hour) + \":\" + string(current_minute) + \".\" + string(current_second));<br>",
            "description": ""
        },
        "signature": "current_second;",
        "function": "current_second;",
        "documentation": "This **read only** variable will return the seconds that correspond to the current moment.",
        "return": "Real"
    },
    "mp_grid_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be destroyed"
            }
        ],
        "example": {
            "code": "if timer = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;mp_grid_destroy(grid);<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_grid_destroy(id);",
        "function": "mp_grid_destroy",
        "documentation": "You can use this function to destroy the indicated mp_grid and free up the memory allocated it. It is _essential_ that you call this whenever the mp_grid is finished with or you could potentially get a memory leak, meaning that your game will slow down over time and eventually crash.  \n  \n_**NOTE:** Using mp\\_grid\\_* functions on a grid after it has been destroyed will result in an error!_",
        "return": "N/A."
    },
    "steam_clear_achievement": {
        "parameters": [
            {
                "label": "ach_name",
                "documentation": "The name of the achievement to clear (string)."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_clear_achievement(\"Ach_Game_Win\");<br> &nbsp;&nbsp;&nbsp;steam_clear_achievement(\"Ach_Died_10_Times\");<br> &nbsp;&nbsp;&nbsp;steam_clear_achievement(\"Ach_Killed_100_Enemies\");<br>  &nbsp;&nbsp;&nbsp;steam_clear_achievement(\"Ach_Beat_Boss_Level_1\");<br>  &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_clear_achievement(ach_name);",
        "function": "steam_clear_achievement",
        "documentation": "With this function you can tell the Steam API to clear (reset) a specific achievement. The achievement should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
        "return": "N/A"
    },
    "buffer_load_ext": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to load into."
            },
            {
                "label": "filename",
                "documentation": "The name of the file to load from."
            },
            {
                "label": "offset",
                "documentation": "The offset within the buffer to load to (in bytes)."
            }
        ],
        "example": {
            "code": "var pos = buffer_seek(player_buffer, buffer_seek_end, 0);<br> buffer_load(player_buffer, \"Data_Save.sav\", pos);<br>",
            "description": ""
        },
        "signature": "buffer_load_ext(buffer, filename, offset);",
        "function": "buffer_load_ext",
        "documentation": "This function will load the buffer data that was previously saved using the [buffer_save](buffer_save.html) functions into an already created buffer. You give the id of the previously created buffer to load into, then the saved buffer file to load, and finally the offset from the start of the buffer (in bytes) that you wish to load the data to.",
        "return": "N/A"
    },
    "physics_particle_delete_region_box": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position of the center of the area to delete."
            },
            {
                "label": "y",
                "documentation": "The y position of the center of the area to delete."
            },
            {
                "label": "halfWidth",
                "documentation": "The half width of the rectangle."
            },
            {
                "label": "halfHeight",
                "documentation": "The half height of the rectangle."
            }
        ],
        "example": {
            "code": "physics_particle_delete_region_box(mouse_x, mouse_y, 32, 32);",
            "description": ""
        },
        "signature": "physics_particle_delete_region_box(x, y, halfWidth, halfHeight)",
        "function": "physics_particle_delete_region_box",
        "documentation": "With this function you can delete (remove) all the particles that fall within the bounds of the defined rectangular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well as the half width and height of the rectangle (in pixels) which defines the area.",
        "return": "N/A"
    },
    "physics_particle_set_gravity_scale": {
        "parameters": [
            {
                "label": "scale",
                "documentation": "The scaling factor to be applied to gravity for all particles."
            }
        ],
        "example": {
            "code": "physics_particle_set_radius(15);<br> physics_particle_set_density(0.5);<br> physics_particle_set_damping(1);<br> physics_particle_set_gravity_scale(1);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_gravity_scale(scale)",
        "function": "physics_particle_set_gravity_scale",
        "documentation": "With this function you can set the gravity scale factor for particles in the physics simulation. The function is designed to help prevent instability in the physics simulation, especially when using very small particles which may behave unpredictably (i.e. break conservation of momentum) in scenarios such as explosions. Slowing these particles down by reducing gravity scale can stabilize their behaviour. This function is _global_ in scope, in that it will change the gravity scale not just for new particles created after the change, but also for those already present in the simulation.",
        "return": "N/A"
    },
    "tilemap_set_global_mask": {
        "parameters": [
            {
                "label": "mask",
                "documentation": "The mask value to use"
            }
        ],
        "example": {
            "code": "var mask = tile_mirror | tile_flip | tile_rotate | 255;<br> tilemap_set_global_mask(mask);<br>",
            "description": ""
        },
        "signature": "tilemap_set_global_mask(mask)",
        "function": "tilemap_set_global_mask",
        "documentation": "",
        "return": "N/A"
    },
    "skeleton_animation_clear": {
        "parameters": [
            {
                "label": "track",
                "documentation": "The animation track to clear."
            }
        ],
        "example": {
            "code": "if mouse_check_button(mb_right)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_animation_clear(1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_clear(track);",
        "function": "skeleton_animation_clear",
        "documentation": "This function will clear the specified animation track of all animations, ready to be re-assigned.",
        "return": "N/A"
    },
    "steam_is_cloud_enabled_for_account": {
        "parameters": [],
        "example": {
            "code": "if steam_is_cloud_enabled_for_account<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_file_share(\"Save.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_is_cloud_enabled_for_account();",
        "function": "steam_is_cloud_enabled_for_account",
        "documentation": "With this function you can check to make sure that the Steam Cloud service is enabled by the user in their Steam Client settings. It will return true if it is and false otherwise. Note that this does not automatically mean that you can store data to the Cloud, as it will also have to have been enabled for your game (you can check this using the function [steam\\_is\\_cloud\\_enabled\\_for_app](steam_is_cloud_enabled_for_app.html)). If the Steam Cloud is enabled for your game, but the user has it switched off locally, you can still use the Cloud functions to store and retrieve data from a local copy of all files, it will just not upload them to the cloud on the game end, nor synchronise on the game start.",
        "return": "Boolean"
    },
    "gpu_set_texfilter": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable or disable texture filtering (true / false)"
            }
        ],
        "example": {
            "code": "if gpu_get_texfilter()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter(false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter(true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_texfilter(enable);",
        "function": "gpu_set_texfilter",
        "documentation": "This function can be used to set the texture filtering (linear interpolation) of all images drawn on the game screen. When this is enabled (true) all textures will be smoothed when drawn (this includes sprites as they too are considered textures), meaning that when scaled or moved if there is not a 1:1 pixel ratio then there will be a \"smudging\" across various pixels which may make images appear blurry depending on the art style used. If this is disabled (false) then images will be drawn based on the nearest pixel when scaled or moving which may lead to \"blocky\" images. The default value is false, and this can also be changed in the **Global Game Options** for individual target platforms.",
        "return": "N/A"
    },
    "vertex_format_delete": {
        "parameters": [],
        "example": {
            "code": "vertex_format_delete(myFormat);",
            "description": ""
        },
        "signature": "vertex_format_delete(formatID);",
        "function": "vertex_format_delete",
        "documentation": "This function must be called whenever you are finished using any created vector formats. You provide the format ID value (as returned by the function [vector\\_format\\_end()](vertex_format_end.html)), and this function will free the memory associated with it. Note that if you try to use this format again after calling this function, you will get an error.",
        "return": "N/A"
    },
    "file_bin_seek": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to read from."
            },
            {
                "label": "pos",
                "documentation": "The position in the file to move to."
            }
        ],
        "example": {
            "code": "file = file_bin_open('myfile.bin', 2);<br> size = file_bin_size(file);<br> file_bin_seek(file, size);<br>",
            "description": ""
        },
        "signature": "file_bin_seek(binfile, pos);",
        "function": "file_bin_seek",
        "documentation": "This function moves the current read position within the file to the indicated position. You supply the file ID value, as returned by the function [file\\_bin\\_open](file_bin_open.html), and to append a file, move the position to the size of the file before writing.",
        "return": "N/A."
    },
    "log10": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The input value."
            }
        ],
        "example": {
            "code": "logval = log10(num);",
            "description": ""
        },
        "signature": "log10(n);",
        "function": "log10",
        "documentation": "This function is similar to the [log2(n)](log2.html) function, only that log10(n) gets the number of 10's that we need to multiply together to get n. So log10(100) returns 2, as multiplying 10 by itself gives 100, log10(1000) returns 3 as 10x10x10=1000 etc... The number does _not_ have to be divisible by ten, however, but this will still return an appropriate value, for example if we have log10(101) we get 2.00432137... which is how many times you could divide 101 by 10.",
        "return": "Real"
    },
    "layer_background_destroy": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background to be destroyed"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_trees\");<br> var bck_id = layer_background_get_id(\"Forrest\");<br> if layer_background_exists(lay_id, bck_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_destroy(bck_id);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_destroy(background_element_id)",
        "function": "layer_background_destroy",
        "documentation": "",
        "return": "N/A"
    },
    "layer_background_sprite": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "sprite_index",
                "documentation": "The sprite index of the sprite to use for the background element"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_sprite(back_id) != spr_Clouds<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_sprite(back_id, spr_Clouds);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_sprite(background_element_id, sprite_index)",
        "function": "layer_background_sprite",
        "documentation": "Using this function you can set the sprite index of the background element. You supply the background element ID (which you get when you create a background element using [layer\\_background\\_create()](layer_background_create.html) or when you use the function [layer\\_background\\_get_id()](layer_background_get_id.html)), and then give a sprite index to be used. The background element image will be replaced with the new sprite. If you give a value of -1, the element will have no sprite assigned (but will still exist and can have a sprite assigned again later).",
        "return": "N/A"
    },
    "room_speed": {
        "parameters": [],
        "example": {
            "code": "alarm[0] = room_speed * 10;",
            "description": ""
        },
        "signature": "room_speed;",
        "function": "room_speed;",
        "documentation": "This variable holds the running speed of **all** rooms (and the game) in game frames per second. Note that this is _NOT_ the FPS (frames per second) but rather the number of game steps that _GameMaker Studio 2_ will try to maintain each second.",
        "return": "Real"
    },
    "sprite_get_bbox_right": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to check."
            }
        ],
        "example": {
            "code": "var ww, hh;<br> ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index);<br> hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);<br>",
            "description": ""
        },
        "signature": "sprite_get_bbox_right(ind);",
        "function": "sprite_get_bbox_right",
        "documentation": "This function returns the relative position of the right of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the [collision mask properties](../../../2_interface/1_editors/sprites.html). The image below shows how it is calculated: ![](spr_bbox.png)",
        "return": ""
    },
    "audio_stop_sound": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to stop."
            }
        ],
        "example": {
            "code": "if !global.SFX<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_stop_sound(snd_Waterfall);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_stop_sound(index);",
        "function": "audio_stop_sound",
        "documentation": "This function will stop the given sound if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset, in which case _all_ instances of the given sound will be stopped.",
        "return": "N/A"
    },
    "camera_get_view_border_y": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var xb = camera_get_view_border_x(view_camera[0]);<br> var yb = camera_get_view_border_y(view_camera[0]);<br> if xb != 200 || yb != 200<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_view_border(view_camera[0], 200, 200);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_view_border_y(camera_id)",
        "function": "camera_get_view_border_y",
        "documentation": "This function can be used to retrieve the border value for object/instance following of the given camera along the y axis (vertical border). The return value will be in pixels.",
        "return": "Real"
    },
    "get_open_filename_ext": {
        "parameters": [
            {
                "label": "filter",
                "documentation": "The file type filter and/or name."
            },
            {
                "label": "fname",
                "documentation": "The suggested filename to use."
            },
            {
                "label": "directory",
                "documentation": "The directory to start the search from."
            },
            {
                "label": "caption",
                "documentation": "The caption for the window."
            }
        ],
        "example": {
            "code": "var file;<br> file = get_open_filename_ext(\"text file|*.txt\", \"\", working_directory, \"Open a saved level\");<br> if file != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_text_open_read(file);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "get_open_filename_ext(filter, fname, directory, caption);",
        "function": "get_open_filename_ext",
        "documentation": "This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form \"_name1|mask1|name2|mask2|..._\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"_bitmaps|*.bmp;*.wmf_\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does **not** open the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.  \n  \nAn important thing to note when using this function is that it grants you certain permissions for that file, for the duration of your game. So, once you get the file path from the user, you can access it again and again without having to ask. However, since this function is for reading a file, the permissions granted are _only for reading_ and saving will not be permitted by the OS. Should you need to read and write to the file, you can get permission using the function [get\\_save\\_filename](get_save_filename.html).  \n  \n_**NOTE:** This function is only valid on the Windows and macOS targets._",
        "return": "String."
    },
    "font_get_texture": {
        "parameters": [
            {
                "label": "font",
                "documentation": "The index of the font to use."
            }
        ],
        "example": {
            "code": "tex = font_get_texture(fnt_Main);<br>",
            "description": ""
        },
        "signature": "font_get_texture(font);",
        "function": "font_get_texture",
        "documentation": "This function returns a special _pointer_ for the font texture page. This value can then be used in other draw functions, particularly in general drawing when using [primitives](../drawing/primitives/index.html) as well as the [Shader](../shaders/index.html) functions. You can get more information about the returned texture page using the different texture_ functions found [here](../drawing/textures/index.html).",
        "return": "Pointer (texture page ID)"
    },
    "network_send_udp": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "url",
                "documentation": "The url or IP to connect to (a string)."
            },
            {
                "label": "port",
                "documentation": "The port to connect to."
            },
            {
                "label": "buffer",
                "documentation": "The id of the buffer to get the data from."
            },
            {
                "label": "size",
                "documentation": "The size (in bytes) of the data."
            }
        ],
        "example": {
            "code": "network_send_udp(sock, \"www.macsweeneygames.com\", 6510, buff, buffer_tell(buff));",
            "description": ""
        },
        "signature": "network_send_udp(socket, url, port, buffer, size);",
        "function": "network_send_udp",
        "documentation": "With this function you can send data over the network using UDP to a server. The function takes the _socket id_ to connect through, the URL to connect to and the port to use. You must then supply the _buffer id_ which contains the data to be sent (for more information on buffers see [Reference - Buffers](../buffers/index.html)) and finally the size (in bytes) of the data. UDP is \"connectionless\" in that you don't actually do a connect, you just send a packet directly to an IP, and the server gets incoming data from an IP address and has to deal with it \"as is\". The function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.",
        "return": "Real"
    },
    "event_type": {
        "parameters": [],
        "example": {
            "code": "show_debug_message(\"Current Event = \" + string(event_type))",
            "description": ""
        },
        "signature": "event_type;",
        "function": "event_type;",
        "documentation": "This **read-only** variable returns the type of event currently being executed, which can be one of the following constants:",
        "return": "Real"
    },
    "physics_joint_get_value": {
        "parameters": [
            {
                "label": "joint",
                "documentation": "The index of the joint that you wish to test"
            },
            {
                "label": "value",
                "documentation": "The constant for the joint property that you wish to test"
            }
        ],
        "example": {
            "code": "var reactionForceX, reactionForceY, reactionForce;<br> if shipJoint<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;reactionForceX = physics_joint_get_value(shipJoint, phy_joint_reaction_force_x);<br> &nbsp;&nbsp;&nbsp;reactionForceY = physics_joint_get_value(shipJoint, phy_joint_reaction_force_y);<br> &nbsp;&nbsp;&nbsp;reactionForce = point_distance(0, 0, reactionForceX, reactionForceY);<br> &nbsp;&nbsp;&nbsp;if reactionForce &gt; 2<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_joint_delete(shipJoint);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shipJoint = -1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_joint_get_value(joint, value)",
        "function": "physics_joint_get_value",
        "documentation": "By using a series of predefined constants, you can ask _GameMaker Studio 2_ to tell you a number of things about the state of any given joint. This is very useful as it gives you the ability to delete joints or change an instances behaviour depending on whatever your needs are at the time. There are a number of constants that can be used in this function and they can be found here: [Physics Joint Constants](physics%20joint%20constants.html), but be aware that complex calculations are done when you call these, so they should be used with care and only when necessary and note that _many are unique to a specific type of joint_.  \n  \nIf the property does not exist (if, for example, you check a pulley joint for prismatic translation) then 0 will be the return value.",
        "return": "Real"
    },
    "string_lower": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to convert to lowercase."
            }
        ],
        "example": {
            "code": "str1 = \"Hello World\";<br> str2 = string_lower(str1);<br>",
            "description": ""
        },
        "signature": "string_lower(string);",
        "function": "string_lower",
        "documentation": "With this function you can force a string to contain only lower case characters.",
        "return": "String"
    },
    "ds_grid_resize": {
        "parameters": [
            {
                "label": "index",
                "documentation": "This index of the grid to resize."
            },
            {
                "label": "w",
                "documentation": "The new width of the grid."
            },
            {
                "label": "h",
                "documentation": "The new height of the grid."
            }
        ],
        "example": {
            "code": "ds_grid_resize(global.Grid, room_width / 32, room_height / 32);<br> ds_grid_clear(global.Grid, -1)<br>",
            "description": ""
        },
        "signature": "ds_grid_resize(index, w, h);",
        "function": "ds_grid_resize",
        "documentation": "With this function you can resize the given ds_grid to have a different width and/or height. If the grid size is larger than the current grid, the new cells will have a base value of 0, and if the size is smaller then the values held in the cells that are no longer within the new size will be lost. All other cells will be left untouched.",
        "return": "N/A"
    },
    "audio_get_listener_count": {
        "parameters": [],
        "example": {
            "code": "global.listener_num= audio_get_listener_count();<br>",
            "description": ""
        },
        "signature": "audio_get_listener_count();",
        "function": "audio_get_listener_count",
        "documentation": "Certain target platforms permit more than one listener, so it is important that you know how many the target has before changing or using different listeners. This function will return the number of listeners available.",
        "return": "Real"
    },
    "mouse_clear": {
        "parameters": [
            {
                "label": "button",
                "documentation": "Which mouse button constant to check for."
            }
        ],
        "example": {
            "code": "mouse_clear(mb_any);",
            "description": ""
        },
        "signature": "mouse_clear(button);",
        "function": "mouse_clear",
        "documentation": "This function will clear the state of any mouse buttons currently being used. This means that checks for their being held down/released will not return true until the player releases the buttons and represses them. You supply the mouse button to check from one of the following constants:",
        "return": "Boolean"
    },
    "gpu_get_tex_mip_bias": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_tex_mip_bias() != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_bias(0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_mip_bias();",
        "function": "gpu_get_tex_mip_bias",
        "documentation": "With this function you can retrieve the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this can return negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.",
        "return": "Real (default: 0)"
    },
    "vertex_format_end": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_colour();<br> vertex_format_add_position();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_end();",
        "function": "vertex_format_end",
        "documentation": "This function must be called after defining any new vertex format. It returns the new format \"handle\" (index) which must be used in all further vertex functions that refer to this new format.",
        "return": "Real"
    },
    "surface_get_height": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to get the height of."
            }
        ],
        "example": {
            "code": "sh = surface_get_height(surf);",
            "description": ""
        },
        "signature": "surface_get_height(surface_id);",
        "function": "surface_get_height",
        "documentation": "This function simply returns the height, in pixels, of the indexed surface.",
        "return": "Real"
    },
    "sha1_string_unicode": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to hash."
            }
        ],
        "example": {
            "code": "var hash, str;<br> str = base64_encode(game_data);<br> hash = sha1_string_unicode(str);<br> http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?hash=\" + hash); http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?data=\" + str);",
            "description": ""
        },
        "signature": "sha1_string_unicode(string)",
        "function": "sha1_string_unicode",
        "documentation": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States _National Security Agency_ and is employed in several widely used applications and protocols like the popular **Git** where it is used to check for file changes. This function will take an input unicode string and returns a 160 bit message digest in ASCII format, for example:",
        "return": "String"
    },
    "sqr": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The number to square."
            }
        ],
        "example": {
            "code": "score += sqr(dmg);",
            "description": ""
        },
        "signature": "sqr(val);",
        "function": "sqr",
        "documentation": "Multiplies a number by itself and so returns the square of that number. EG: sqr(5) would return 25 since 5*5=25.",
        "return": "Real"
    },
    "mp_grid_to_ds_grid": {
        "parameters": [
            {
                "label": "source",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "destination",
                "documentation": "Index of the ds_grid that is to be used to copy the grid data to."
            }
        ],
        "example": {
            "code": "motion_grid = ds_grid_create(room_width / 32, room_height / 32); mp_grid_to_ds_grid(mp_grid, motion_grid);<br>",
            "description": ""
        },
        "signature": "mp_grid_to_ds_grid(source, destination);",
        "function": "mp_grid_to_ds_grid",
        "documentation": "With this function you can copy the given MP grid into a DS Grid. The DS grid should be the same size as the MP grid, although it doesn't have to be (data will be lost if it is smaller, and if it is larger all extra grid cells will be 0). The DS grid cells will contain the value -1 if the MP grid cell was flagged as occupied, or it will be 0 if not.",
        "return": "Boolean."
    },
    "physics_particle_group_polygon": {
        "parameters": [],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid;<br> physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_polygon();<br> physics_particle_group_add_point(200, 200);<br> physics_particle_group_add_point(300, 300);<br> physics_particle_group_add_point(100, 300);<br> mLastGroup = physics_particle_group_end();<br>",
            "description": ""
        },
        "signature": "physics_particle_group_polygon()",
        "function": "physics_particle_group_polygon",
        "documentation": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function [physics\\_particle\\_group_begin()](physics_particle_group_begin.html), and then you would use this function to tell _GameMaker Studio 2_ that you are going to add in the approximate points that will be used to define the polygon shape - approximate because the exact shape will depend on the size of the base particles, as defined by the [physics\\_particle\\_set_radius()](physics_particle_set_radius.html) function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape.  \n  \nYou would then define the points of the polygon calling the function [physics\\_particle\\_group\\_add\\_point](physics_particle_group_add_point.html), setting the x/y position in the room for each one (minimum of 3, maximum of 8, and they can be defined as concave but the points inside the shape will be ignored). Finally you need to call [physics\\_particle\\_group_end()](physics_particle_group_end.html) to create the group of particles in the room.",
        "return": "N/A"
    },
    "layer_script_begin": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "script",
                "documentation": "The script index to assign to the layer"
            }
        ],
        "signature": "layer_script_begin",
        "function": "layer_script_begin",
        "documentation": "With this function you can assign a script to a layer and it will be called before the layer is rendered. When adding a script to a layer, in this way it will be run at the start of _each of the different draw events_ so you may want to check in the script assigned which event is currently rendering and adapt the code to suit. This can be done by checking the [event_type](../../objects/generating%20events/event_type.html) and/or the [event_number](../../objects/generating%20events/event_number.html) (see the extended example below). Note that the function is _not_ meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the Room Creation Code or in the Create Event/Room Start Event of an instance.",
        "return": "N/A"
    },
    "sprite_get_texture": {
        "parameters": [
            {
                "label": "spr",
                "documentation": "The index of the sprite to use."
            },
            {
                "label": "subimg",
                "documentation": "The sub-image of the sprite to use."
            }
        ],
        "example": {
            "code": "var tex;<br> tex = sprite_get_texture(spr_Wall, 0);<br> draw_primitive_begin_texture(pr_trianglestrip, tex);<br> draw_vertex_texture(0, 0, 0, 0);<br> draw_vertex_texture(480, 0, 1, 0);<br> draw_vertex_texture(480, 640, 1, 1);<br> draw_vertex_texture(0, 640, 0, 1);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "sprite_get_texture(spr, subimg);",
        "function": "sprite_get_texture",
        "documentation": "This function returns a special _pointer_ for the sprite texture page. This value can then be used in other draw functions, particularly in the [2D primitive](../drawing/primitives/index.html) functions, as well as the [Shader](../shaders/index.html) functions. You can get more information about the returned texture page using the different texture_ functions found [here](../drawing/textures/index.html).",
        "return": ""
    },
    "sprite_get_tpe": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to find the texture page entry of."
            },
            {
                "label": "index",
                "documentation": "The image index of the sprite."
            }
        ],
        "example": {
            "code": "home_but = clickable_add(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\");",
            "description": ""
        },
        "signature": "sprite_get_tpe(sprite, index);",
        "function": "sprite_get_tpe",
        "documentation": "This function will return a special value that relates to the position of the given sprite and sub-image on the texture page used by your game. In this way you can pass the value to extensions for use outside of the compiled game, effectively bypassing the _GameMaker Studio 2_ drawing functions and permitting the sprite to be used in DOM content which can then be drawn anywhere within the window that contains the game canvas. This function is of particular interest to those that wish to create buttons and other interactive media outside of the _GameMaker Studio 2_ canvas element on their host page using the function [clickable_add](../web/clickable_add.html).",
        "return": ""
    },
    "audio_pause_all": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause;<br> &nbsp;&nbsp;&nbsp;if global.Pause<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_pause_all();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_resume_all();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_pause_all();",
        "function": "audio_pause_all",
        "documentation": "With this function you can pause all sounds that are currently playing.",
        "return": "N/A"
    },
    "draw_light_define_ambient": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to use (either a constant, a real or a hex value)."
            }
        ],
        "example": {
            "code": "draw_light_define_ambient(c_white);",
            "description": ""
        },
        "signature": "draw_light_define_ambient(col)",
        "function": "draw_light_define_ambient",
        "documentation": "This function is used to control the ambient light of a scene, which is the light that you have in a scene even without having defined any point or directional light sources. It is effectively the overall colour and brightness (or darkness) of a scene. The default colour is c_black.",
        "return": "N/A"
    },
    "part_type_colour2": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "colour1",
                "documentation": "The colour the particle will start at."
            },
            {
                "label": "colour2",
                "documentation": "The colour the particle will end at."
            }
        ],
        "example": {
            "code": "part_type_colour2( part_Health, c_red, c_white);",
            "description": ""
        },
        "signature": "part_type_colour2(ind, colour1, colour2);",
        "function": "part_type_colour2",
        "documentation": "This function can be used to set a two colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one on which the particle will end with, and a smooth gradient change will occur to the colour over the particles lifetime from one colour to the other.",
        "return": "N/A"
    },
    "texture_get_texel_width": {
        "parameters": [
            {
                "label": "tex",
                "documentation": "The texture page asset pointer to use"
            }
        ],
        "example": {
            "code": "var tex = sprite_get_texture(sprite_index, 0);<br> tex_w = texture_get_texel_width(tex);<br> tex_h = texture_get_texel_height(tex);<br>",
            "description": ""
        },
        "signature": "texture_get_texel_width(tex);",
        "function": "texture_get_texel_width",
        "documentation": "A texel, or _texture element_ is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the width of a single texel from the texture page of the image asset used.",
        "return": "Real"
    },
    "physics_joint_enable_motor": {
        "parameters": [
            {
                "label": "joint",
                "documentation": "The joint that you wish to enable or disable the motor on"
            },
            {
                "label": "motor",
                "documentation": "Whether you wish to turn the motor on (true) or off (false)"
            }
        ],
        "example": {
            "code": "var t_fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(t_fix, sprite_get_width(sprite_index) / 2);<br> var o_id=instance_create_layer(x+300, y, \"Instances\", obj_Door);<br> physics_fixture_bind(t_fix, id);<br> physics_fixture_bind(t_fix, o_id);<br> perma_joint = physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 10, 2, 0, 0);<br> physics_joint_enable(perma_joint, 1);<br> physics_fixture_delete(t_fix);<br>",
            "description": ""
        },
        "signature": "physics_joint_enable_motor(joint, motor)",
        "function": "physics_joint_enable_motor",
        "documentation": "When you have a joint with a motor ([prismatic](physics_joint_prismatic_create.html) or [revolute](physics_joint_revolute_create.html)), you may want to be able to switch the motor on or off depending on variables and conditions within the game. For this, you need to have stored the index of the joint previously in a variable and then you can switch the motor on or off by using this function and setting the \"motor\" argument to true or false.",
        "return": "N/A"
    },
    "layer_set_target_room": {
        "parameters": [
            {
                "label": "room",
                "documentation": "The room to target for all further layer functions"
            }
        ],
        "example": {
            "code": "layer_set_target_room(rm_Game);<br> var l = layer_get_id(\"SpriteAssets\");<br> repeat(50)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_create(l, random(room_get_width(rm_Game)), random(room_get_height(rm_Game)), spr_Trees);<br> &nbsp;&nbsp;&nbsp;}<br> layer_reset_target_room();<br>",
            "description": ""
        },
        "signature": "layer_set_target_room(room)",
        "function": "layer_set_target_room",
        "documentation": "When you call this function you are telling _GameMaker Studio 2_ that _all further layer functions should be applied to the given room_. In this way you can procedurally change or generate layers and layer contents in a room that is not the current room. When you are finished adding layers or layer elements to a room, call the function [layer\\_reset\\_target_room](layer_reset_target_room.html) to reset the room target (or call this function again with a room argument of -1).",
        "return": "N/A"
    },
    "device_get_tilt_y": {
        "parameters": [],
        "example": {
            "code": "if display_get_orientation() = display_landscape<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x += sign(device_get_tilt_y());<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x += sign(device_get_tilt_x());<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_get_tilt_y()",
        "function": "device_get_tilt_y",
        "documentation": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90ï¿½. The image below shows how each if the available functions relates to the device: ![](tilt_image.png)",
        "return": "Real"
    },
    "tilemap_get_at_pixel": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the tiledata of"
            },
            {
                "label": "x",
                "documentation": "The position along the x-axis to get the tile data from (in room pixels)"
            },
            {
                "label": "y",
                "documentation": "The position along the y-axis to get the tile data from (in room pixels)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var data = tilemap_get_at_pixel(map_id, 64, 128);<br> data = tile_set_flip(data, true);<br> tilemap_set_at_pixel(map_id, data, 64, 128);<br>",
            "description": ""
        },
        "signature": "tilemap_get_at_pixel(tilemap_element_id, x, y);",
        "function": "tilemap_get_at_pixel",
        "documentation": "Using this function you can retrieve the tile data from a position (within the room) of the tilemap element. You give the tilemap element ID (which you get when you create a tilemap element using [layer\\_tilemap\\_create()](layer_tilemap_create.html) or when you use the function [layer\\_tilemap\\_get_id()](layer_tilemap_get_id.html)) as well as the x and y position _in the room_ to get the tile data from and the function will return the tile data \"blob\". This data is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see [tilemap\\_set\\_mask](tilemap_set_mask.html) for details), and the resulting data value can then be used in the [Tile Functions](index.html#tiles) to change a tiles properties. If you need to get the tile data from a specific tile cell you should be using the function [tilemap_get](tilemap_get.html) instead.",
        "return": "Real (-1 if there is an error)"
    },
    "keyboard_set_numlock": {
        "parameters": [
            {
                "label": "value",
                "documentation": "Set this to true for \"on\" and false for \"off\""
            }
        ],
        "example": {
            "code": "if keyboard_get_numlock()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;keyboard_set_numlock(false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;keyboard_set_numlock(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_set_numlock(value);",
        "function": "keyboard_set_numlock",
        "documentation": "You can use this function to switch the keypad numberlock on or off (set to **true** for on, and **false** for off).  \n  \n_**NOTE:** This functionality is only available in the Windows exe builds and will not function on any other device._",
        "return": "N/A"
    },
    "draw_roundrect_ext": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "xrad",
                "documentation": "The radius of the curve along the x axis from the rectangle corners."
            },
            {
                "label": "yrad",
                "documentation": "The radius of the curve along the y axis from the rectangle corners."
            },
            {
                "label": "outline",
                "documentation": "Whether the rounded rectangle is drawn filled (false) or as a one pixel wide outline (true)."
            }
        ],
        "example": {
            "code": "var dist = point_distance(x, y, mouse_x, mouse_y) / 10;<br> draw_set_colour(c_lime);<br> draw_roundrect_ext(x - 50, y - 50, x + 50, y + 50, dist, dist, 0);<br>",
            "description": ""
        },
        "signature": "draw_roundrect_ext(x1, y1, x2, y2, xrad, yrad, outline);",
        "function": "draw_roundrect_ext",
        "documentation": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html).",
        "return": "N/A"
    },
    "vertex_float2": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "float",
                "documentation": "The first input value."
            },
            {
                "label": "float",
                "documentation": "The second input value."
            }
        ],
        "example": {
            "code": "vertex_float2(buff, 0.05, 0.01);",
            "description": ""
        },
        "signature": "vertex_float2(buffer, float, float);",
        "function": "vertex_float2",
        "documentation": "This function will add two floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the [vertex\\_format\\_add_custom](../vertex%20formats/vertex_format_add_custom.html) function.",
        "return": "N/A"
    },
    "surface_reset_target": {
        "parameters": [],
        "example": {
            "code": "if view_current = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_set_target(surf);<br> &nbsp;&nbsp;&nbsp;with (obj_Effect)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_self();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;surface_reset_target();<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_surface(surf, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_reset_target();",
        "function": "surface_reset_target",
        "documentation": "With this function you reset all further drawing from the target surface back to the screen. Please note that to start drawing to a surface you must first have called the function [surface\\_set\\_target](surface_set_target.html) and then this one after you have finished, _for each surface target that you have set_ or else nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance.",
        "return": "N/A"
    },
    "filename_dir": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The file to use."
            }
        ],
        "example": {
            "code": "dir = filename_dir(\"Test.ini\");<br>",
            "description": ""
        },
        "signature": "filename_dir(fname);",
        "function": "filename_dir",
        "documentation": "This function returns the directory part of the indicated file name, which normally is the same as the path except for the final backslash.",
        "return": "String."
    },
    "instance_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The instance ID or object_index to destroy (optional, default is the calling instance)"
            },
            {
                "label": "execute_event_flag",
                "documentation": "Set to true or false to perform the destroy event or not (optional, default is true)"
            }
        ],
        "example": {
            "code": "if bbox_right &lt; 0 || bbox_left &gt; room_width || bbox_bottom &lt; 0 || bbox_top &gt; room_height<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;instance_destroy(id, false);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_destroy([id, execute_event_flag]);",
        "function": "instance_destroy",
        "documentation": "You call this function whenever you wish to \"destroy\" an instance, normally triggering a Destroy Event and also a Clean Up event. This will remove it from the room until the room is restarted (unless the room is persistent). Calling the function with no arguments will simply destroy the instance that is currently in scope and running the code, but you can provide an optional \"id\" argument and target a specific instance by using the instance ID value, or you can target all instances of a particular object by using an object_index. For example:",
        "return": "N/A"
    },
    "timeline_moment_add_script": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the time line to add a moment to."
            },
            {
                "label": "step",
                "documentation": "The moment (step) to add to."
            },
            {
                "label": "script",
                "documentation": "The index of the script to add into the moment."
            }
        ],
        "example": {
            "code": "global.tl = timeline_add();<br> var i = room_speed * 60;<br> repeat(3)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_moment_add_script(global.tl, i, choose(scr_AlienAttack_1, scr_AlienAttack_2, scr_AlienAttack_3);<br> &nbsp;&nbsp;&nbsp;i += room_speed * 60;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_moment_add_script(ind, step, script);",
        "function": "timeline_moment_add_script",
        "documentation": "With this function you can dynamically add scripts to Timelines (the scripts must already exist in the game resources) at any given \"moment\" within that time line, where a \"moment\" is the equivalent of one game tick (or step). In this way you can create a new time line using the [timeline_add](timeline_add.html) function and add different behaviours at any point, or simply modify a previously created time line resource with new behaviours. Note that the script cannot require any additional arguments when using this function.",
        "return": "N/A"
    },
    "camera_get_active": {
        "parameters": [],
        "example": {
            "code": "var active = camera_get_active();<br> if active != view_camera[0]<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;view_camera[0] = active;<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_active()",
        "function": "camera_get_active",
        "documentation": "This function can be used to retrieve the unique camera ID value of the currently active camera.",
        "return": "Camera index (real)."
    },
    "ds_map_find_previous": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            },
            {
                "label": "key",
                "documentation": "The key to find the previous one."
            }
        ],
        "example": {
            "code": "var size, key, i;<br> size = ds_map_size(inventory) - 1;<br> key = ds_map_find_last(inventory);<br> for (i = size; i &gt; 0; i --;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if key != \"gold\" key = ds_map_find_previous(inventory, key) else break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_find_previous(id, key);",
        "function": "ds_map_find_previous",
        "documentation": "This function returns the previous key stored in the ds_map _before_ the one specified in the function. This can be useful if your have to iterate through the ds_map looking for something, but should be avoided if possible as it can be slow. If no such key exists then the function will return <undefined>. You should always check this using the [is_undefined()](../../../3_gml_overview/checking_data_types/is_undefined.html) function.",
        "return": "Real, string or undefined"
    },
    "ds_stack_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to remove."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_stack_destroy(AI_stack);<br> &nbsp;&nbsp;&nbsp;AI_stack = -1;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_stack_destroy(id);",
        "function": "ds_stack_destroy",
        "documentation": "This function will remove the given stack data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_stack to prevent memory leaks that can slow down and crash your game.",
        "return": "N/A"
    },
    "part_type_scale": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the base particle."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the base particle."
            }
        ],
        "example": {
            "code": "part_type_shape(particle1, pt_shape_flare);<br> part_type_size(particle1, 2, 2, 0.10, 1);<br> part_type_scale(particle1, 8, 0.50);<br> part_type_colour3(particle1, 8388608, 4227327, 8454143);<br> part_type_alpha3(particle1, 0.10, 0.10, 0);<br> part_type_speed(particle1, 0, 1, 0.18, 20);<br> part_type_direction(particle1, 0, 359, 0, 0);<br> part_type_orientation(particle1, 0, 0, 0, 0, 1);<br> part_type_blend(particle1, 1);<br> part_type_life(particle1, 10, 40);<br>",
            "description": ""
        },
        "signature": "part_type_scale(ind, xscale, yscale);",
        "function": "part_type_scale",
        "documentation": "This function will set the horizontal and vertical scale of the particle before any other size changes are made. This function works on the ratio of the sprite size, so a value of 1 (the default value) is a 1:1 ratio, meaning that 0.5 would be half and 2 double.",
        "return": "N/A"
    },
    "layer_background_xscale": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "xscale",
                "documentation": "The scale value to use (1 is no scaling)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_water\");<br> var back_id = layer_background_get_id(lay_id);<br> layer_background_xscale(back_id, -1);<br>",
            "description": ""
        },
        "signature": "layer_background_xscale(background_element_id, xscale);",
        "function": "layer_background_xscale",
        "documentation": "",
        "return": "N/A"
    },
    "layer_element_move": {
        "parameters": [
            {
                "label": "element_id",
                "documentation": "The unique ID value of the element to move"
            },
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to move the element to (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "var a = layer_get_all_elements(layer);<br> asset_layer = layer_create(-100);<br> for (var i = 0; i Alt; array_length_1d(a); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if layer_get_element_type(a[i]) == layerelementtype_sprite<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_element_move(a[i], asset_layer)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_element_move(element_id, layer_id)",
        "function": "layer_element_move",
        "documentation": "You can use this function to move an element from one layer to another. You give the **element ID**, as returned by the function used to create the element or the room editor or the function [layer\\_get\\_all_elements](layer_get_all_elements.html), and then you give the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact).",
        "return": "N/A"
    },
    "layer_sprite_xscale": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "xscale",
                "documentation": "The xscale value (default is 1)"
            }
        ],
        "example": {
            "code": "var asset_sprite = layer_sprite_get_id(layer, \"gfc_Trees\");<br> if layer_sprite_get_xscale(asset_sprite) != 1 || !ayer_sprite_get_yscale(asset_sprite) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_xscale(asset_sprite, 1);<br> &nbsp;&nbsp;&nbsp;layer_sprite_yscale(asset_sprite, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_xscale(sprite_element_id, xscale);",
        "function": "layer_sprite_xscale",
        "documentation": "",
        "return": "N/A"
    },
    "audio_sound_get_listener_mask": {
        "parameters": [
            {
                "label": "soundID",
                "documentation": "The unique ID of the sound to get the mask of"
            }
        ],
        "example": {
            "code": "var snd = audio_play_sound(snd_PlayerDead, 10, false);<br> if audio_sound_get_listener_mask(snd) != global.PlayerMask<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_sound_set_listener_mask(snd, global.PlayerMask);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sound_get_listener_mask(soundID);",
        "function": "audio_sound_get_listener_mask",
        "documentation": "This function will return the bit-mask data that defines which audio listeners a sound should be played from.",
        "return": "Real"
    },
    "buffer_get_type": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to check."
            }
        ],
        "example": {
            "code": "type = buffer_get_type(buff);",
            "description": ""
        },
        "signature": "buffer_get_type(buffer);",
        "function": "buffer_get_type",
        "documentation": "With this function you retrieve the type of buffer that is beinf referenced by a buffer ID value. The return value will be one of the following constants:",
        "return": "Constant"
    },
    "device_mouse_dbclick_enable": {
        "parameters": [],
        "example": {
            "code": "if os_type == os_windows || os_type == os_mac<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;device_mouse_dbclick_enable(false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_dbclick_enable(bool);",
        "function": "device_mouse_dbclick_enable",
        "documentation": "This function can be used to set the device to detect a double tap of the mb_left (left mouse button) as an mb_right (right mouse button) tap or not. By default this is set to true, meaning that every time the user taps the device screen twice quickly and consecutively, the return value is the same as if the right mouse button had been clicked. When this is on, the first tap will be detected as mb_left, and the second as mb_right, so make sure that any code you use takes this into account.",
        "return": "Boolean"
    },
    "colour_get_green": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to check"
            }
        ],
        "example": {
            "code": "g_comp = colour_get_green(c_teal);",
            "description": ""
        },
        "signature": "colour_get_green(col);",
        "function": "colour_get_green",
        "documentation": "This function returns the amount of green used to make the given colour, with the value being between 0 and 255, where 0 is no green and 255 is all green. The following image illustrates this: ![](images/get_green.png)",
        "return": "Real"
    },
    "gpu_get_tex_mip_enable": {
        "parameters": [
            {
                "label": "mip_off",
                "documentation": "Mipmapping is disabled."
            },
            {
                "label": "mip_on",
                "documentation": "Mipmapping for all textures is enabled."
            },
            {
                "label": "mip_markedonly",
                "documentation": "Mipmapping is enabled for textures that have it enabled in the Texture Group options (default)."
            }
        ],
        "example": {
            "code": "if gpu_get_tex_mip_enable != mip_on<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_enable(mip_on);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_mip_enable();",
        "function": "gpu_get_tex_mip_enable",
        "documentation": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the [Texture Group Manager](../../../../2_interface/3_settings/textures.html). The function will return one of the constants listed below, with the default setting being mip_markedonly.",
        "return": "Constant:"
    },
    "image_speed": {
        "parameters": [],
        "example": {
            "code": "with (instance_create_layer(x, y, \"Effects\", obj_Explosion))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_speed = 0.5;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "image_speed;",
        "function": "image_speed;",
        "documentation": "",
        "return": "Real"
    },
    "path_get_x": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            },
            {
                "label": "pos",
                "documentation": "How far through the path to check. Between 0 (start) and 1 (end)."
            }
        ],
        "example": {
            "code": "x = path_get_x( path0, 0.5 );",
            "description": ""
        },
        "signature": "path_get_x(ind, pos);",
        "function": "path_get_x",
        "documentation": "With this function you can get the x coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to that far through the path. This needn't be a defining point of the path, it can be anywhere on it.",
        "return": "Real."
    },
    "camera_get_view_height": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var vw = camera_get_view_width(view_camera[0]) / 2;<br> var vh = camera_get_view_height(view_camera[0]) / 2;<br> camera_set_view_pos(view_camera[0], x - vw, y - vh);<br>",
            "description": ""
        },
        "signature": "camera_get_view_height(camera_id)",
        "function": "camera_get_view_height",
        "documentation": "This function can be used to retrieve the height (in pixels) of the given camera.",
        "return": "Real"
    },
    "iap_enumerate_products": {
        "parameters": [],
        "example": {
            "code": "var status = iap_status();<br> var iap_list = ds_list_create();<br> if status == iap_status_available<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;iap_enumerate_products(iap_list);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "iap_enumerate_products();",
        "function": "iap_enumerate_products",
        "documentation": "This function retrieves the list of in app purchase product ids encountered. On most platforms this will simply return the set of product ids provided through [iap_activate()](iap_activate.html), but on platforms where the store provides the facility to retrieve a complete list of available products for a title then this set of product ids will include any and all available product ids for the game. The function requires that you supply a previously made [ds_list](../data_structures/ds%20lists/index.html) (which you should clear first if it has been used for other purposes) which will be populated by the function call. Regardless of platform, if the target store is not available then it will get the product IDs from those supplied when you activated purchases using [iap_activate](iap_activate.html).",
        "return": "N/A"
    },
    "external_define": {
        "parameters": [
            {
                "label": "dll",
                "documentation": "The name of the dll file (string)"
            },
            {
                "label": "name",
                "documentation": "The name of the function (string)"
            },
            {
                "label": "calltype",
                "documentation": "The calling convention used"
            },
            {
                "label": "restype",
                "documentation": "The type of the result to expect"
            },
            {
                "label": "argnumb",
                "documentation": "The number of arguments (0 - 10)"
            },
            {
                "label": "argtype[0 ... 10]",
                "documentation": "The different types of arguments being used"
            }
        ],
        "example": {
            "code": "my_funcion = external_define(\"MyDLL.dll\", \"MyMin\", dll_cdecl, ty_real, 2, ty_real, ty_real);",
            "description": ""
        },
        "signature": "external_define(dll, name, calltype, restype, argnumb, argtype[0], argtype[1], ...argtype[10]) ;",
        "function": "external_define",
        "documentation": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension. You supply the name (and path) of the file, then the name of the function that you wish to define. Next you need to define the calling convention to be used (see the constants list below) as well as the type of result to be expected (also a constant, as listed below). Finally you must give the number arguments that the function can take (from 0 to 15) and for each of the arguments you must specify its type too. Please note that for functions with 4 or more arguments, all of them _must_ be of type ty_real.",
        "return": "Real (Unique function ID value)"
    },
    "os_browser": {
        "parameters": [],
        "example": {
            "code": "if os_browser == browser_not_a_browser<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Config = 0;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Config = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_browser",
        "function": "os_browser",
        "documentation": "This variable holds one of various constant _GameMaker Studio 2_ has to tell you which browser you are currently running the game in (if any). The following constants can be returned:",
        "return": "Constant"
    },
    "phy_collision_points": {
        "parameters": [],
        "example": {
            "code": "var i;<br> for(i = 0; i &lt; phy_collision_points; i += 1;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_particles_create(global.Sname, phy_collision_x[i], phy_collision_x[1], global.Spark, 5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_collision_points;",
        "function": "phy_collision_points;",
        "documentation": "This **read-only** variable returns the number of points of collision detected between the two objects in the collision.  \n  \n_**NOTE:** This variable is only available in the collision event of a physics enabled instance._",
        "return": "Real"
    },
    "clickable_change_ext": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the clickable icon to change."
            },
            {
                "label": "tpe",
                "documentation": "The texture page entry for the sprite to be used (use sprite_get_tpe)."
            },
            {
                "label": "x",
                "documentation": "The new x position within the window."
            },
            {
                "label": "y",
                "documentation": "The new y position within the window."
            },
            {
                "label": "scale",
                "documentation": "The scale of the icon (default 1)."
            },
            {
                "label": "alpha",
                "documentation": "The image alpha of the icon (default 1)."
            }
        ],
        "example": {
            "code": "switch (room)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case rm_Menu: clickable_change_ext(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 1), 32, 32, 2, 1); break;<br> &nbsp;&nbsp;&nbsp;case rm_Game: clickable_change_ext(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 0), 200, 32, 1, 0.5); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "clickable_change_ext(index, tpe, x, y, alpha, scale)",
        "function": "clickable_change_ext",
        "documentation": "With this function you can change the sprite and position of a clickable icon previously created with [clickable_add](clickable_add.html). Bear in mind that the position is based on the window, _not_ the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: [sprite\\_get\\_tpe](../sprites/sprite_get_tpe.html)). This function also permits you to change the scale of the sprite used (as a multiplier so that 1 is the default, 0.5 would be half and 2 would be double) and the alpha value from 0 (fully transparent) to 1 (fully opaque) for the final icon on the screen.",
        "return": "N/A"
    },
    "audio_emitter_gain": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to change."
            },
            {
                "label": "gain",
                "documentation": "The maximum gain (default 1)."
            }
        ],
        "example": {
            "code": "if up<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gain += 0.05;<br> &nbsp;&nbsp;&nbsp;if gain &gt;= 1 up = false;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gain += 0.05;<br> &nbsp;&nbsp;&nbsp;if gain &lt;= 0 up = true;<br> &nbsp;&nbsp;&nbsp;}<br> audio_emitter_gain(s_emit, gain);<br>",
            "description": ""
        },
        "signature": "audio_emitter_gain(emitter, gain);",
        "function": "audio_emitter_gain",
        "documentation": "This function sets the maximum gain (volume) for the sound. The perceived volume for a sound can change depending on the [fall-off value](audio_emitter_falloff.html) and the position it has relative to the _listener_, but by setting the gain with this function, the full volume will never exceed the specified gain value. The image below illustrates how gain affects the volume of the emitter when fall-off is greater than 0: ![](audio_gain.png)",
        "return": "N/A"
    },
    "ds_grid_multiply": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x",
                "documentation": "The x position of the cell in the grid."
            },
            {
                "label": "y",
                "documentation": "The y position of the cell in the grid."
            },
            {
                "label": "val",
                "documentation": "The value to multiply with the cell."
            }
        ],
        "example": {
            "code": "ds_grid_multiply(mygrid, 5, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_multiply(index, x, y, val);",
        "function": "ds_grid_multiply",
        "documentation": "This function will multiply the value of a the given grid cell by the specified amount.",
        "return": "N/A"
    },
    "ds_grid_read": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid to read."
            },
            {
                "label": "string",
                "documentation": "The string to read into the ds_grid."
            },
            {
                "label": "legacy (optional)",
                "documentation": "Can be either true or false or omitted completely."
            }
        ],
        "example": {
            "code": "grid = ds_grid_create(room_width div 32, room_height div 32);<br> ini_open(\"Save.ini\");<br> ds_grid_read(grid, ini_read_string(\"Save\", \"0\", \"\"));<br> ini_close()<br>",
            "description": ""
        },
        "signature": "ds_grid_read(index, string [, legacy]);",
        "function": "ds_grid_read",
        "documentation": "This function can be used to convert a string which has been created previously by the function [ds\\_grid\\_write()](ds_grid_write.html) back into a ds\\_grid. The ds\\_grid must have been created previously (see the example below). Note that if the data structure was created with previous versions of _GameMaker_ you should add the optional argument \"legacy\", setting it to true as the string format has changed with this version.",
        "return": "N/A"
    },
    "ds_grid_value_y": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The x position of the left of the region in the grid, from 0 to (grid width - 1)."
            },
            {
                "label": "y1",
                "documentation": "The y position of the top of the region in the grid, from 0 to (grid height - 1)."
            },
            {
                "label": "x2",
                "documentation": "The x position of the right of the region in the grid, from 0 to (grid width - 1)."
            },
            {
                "label": "y2",
                "documentation": "The y position of the bottom of the region in the grid, from 0 to (grid height - 1)"
            },
            {
                "label": "val",
                "documentation": "The value to find."
            }
        ],
        "example": {
            "code": "if ds_grid_value_exists(grid, 0, 1, 5, 6, val)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;xpos = ds_grid_value_x(grid, 0, 1, 5, 6, val);<br> &nbsp;&nbsp;&nbsp;ypos = ds_grid_value_y(grid, 0, 1, 5, 6, val);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_value_y(index, x1, y1, x2, y2, val);",
        "function": "ds_grid_value_y",
        "documentation": "With this function you can get the y coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by [ds\\_grid\\_create](ds_grid_create.html)) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
        "return": "Real"
    },
    "draw_point": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the point to be drawn."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the point to be drawn."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_yellow);<br> draw_point(100,100);<br>",
            "description": ""
        },
        "signature": "draw_point(x, y);",
        "function": "draw_point",
        "documentation": "With this function you can draw a single pixel anywhere on the screen.",
        "return": "N/A"
    },
    "distance_to_point": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check."
            },
            {
                "label": "y",
                "documentation": "The y position to check."
            }
        ],
        "example": {
            "code": "if distance_to_point(obj_Player.x, obj_Player.y) &lt; range<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;canshoot = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "distance_to_point(x, y);",
        "function": "distance_to_point",
        "documentation": "This function calculates the distance from the edge of the bounding box of the calling instance to the specified x/y position in the room, with the return value being in pixels. Note that if the calling object have no sprite or no mask defined, the results will be incorrect.",
        "return": "Real"
    },
    "layer_background_get_id": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_trees\");<br> var back_id = layer_background_get_id(lay_id);<br> layer_background_sprite(back_id, bck_Trees_Winter);<br>",
            "description": ""
        },
        "signature": "layer_background_get_id(layer_id)",
        "function": "layer_background_get_id",
        "documentation": "",
        "return": "Background element ID value (Real)"
    },
    "layer_sprite_get_id": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target"
            },
            {
                "label": "asset_name",
                "documentation": "The unique name of the asset on the layer as defined in the room editor"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Assets_trees\");<br> var back_id = layer_sprite_get_id(lay_id, \"gfc_Trees\");<br> layer_sprite_change(back_id, spr_Trees_Winter);<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_id(layer_id, asset_name)",
        "function": "layer_sprite_get_id",
        "documentation": "",
        "return": "Sprite element ID value (Real)"
    },
    "object_set_sprite": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the object to change."
            },
            {
                "label": "spr",
                "documentation": "The sprite to assign to the object."
            }
        ],
        "example": {
            "code": "switch (room)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case rm_start: object_set_sprite(obj_Player, spr_uniform); break;<br> &nbsp;&nbsp;&nbsp;case rm_middle: object_set_sprite(obj_Player, spr_swimsuit); break;<br> &nbsp;&nbsp;&nbsp;case rm_end: object_set_sprite(obj_Player, spr_casual); break;<br> &nbsp;&nbsp;&nbsp;}<br> instance_create_layer(32, 32, \"Instances\", obj_Player);<br>",
            "description": ""
        },
        "signature": "object_set_sprite( index, spr );",
        "function": "object_set_sprite",
        "documentation": "With this function you can set the sprite index of a specific object. This means that all instances of this object that are created _after the sprite_index has been changed_ will be created with this new sprite_index, while instances that are already in the room may not be affected.  \n  \nPlease note that this is not an instance function! You can set the sprite index of individual instances using the [sprite_index](../instances/instance_variables/sprite_index.html) variable and so have ten instances all with a different sprite to the object they are created from, and even if you change the sprite index of the object using this function, all instances that are currently in the room will remain as they were, and only instances created after calling the function will start with the new sprite.",
        "return": "N/A"
    },
    "tile_set_mirror": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to set"
            },
            {
                "label": "mirror",
                "documentation": "Set to true to mirror and false to leave it as-is"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> var data = tilemap_get(map_id, mx, my);<br> var bool = !tile_get_mirror(data);<br> data = tile_set_mirror(data, bool);<br> tilemap_set(map_id, data, mx, my);<br>",
            "description": ""
        },
        "signature": "tile_set_mirror(tiledata, mirror)",
        "function": "tile_set_mirror",
        "documentation": "",
        "return": "Real (tiledata)"
    },
    "ds_map_write": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to use."
            }
        ],
        "example": {
            "code": "ini_open(\"map.ini\");<br> var t_string;<br> t_string = ds_map_write(inventory);<br> ini_write_string(\"Saved\", \"0\", t_string);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ds_map_write(id);",
        "function": "ds_map_write",
        "documentation": "This function will turn the ds\\_map data of the specified map into string format which can then be written to an *.ini or a *.txt file for easy storage. This string can then be later read back into a new ds\\_map using [ds\\_map\\_read()](ds_map_read.html).  \n  \n_**NOTE:** The returned string is not a human readable string, but rather a dump of the contents of the data-structure_",
        "return": "String"
    },
    "part_emitter_destroy_all": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system to destroy all emitters from."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_emitter_destroy_all(global.Sname);<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_emitter_destroy_all( ps );",
        "function": "part_emitter_destroy_all",
        "documentation": "This function will remove all defined emitters from the given system and clear them from memory (this will also stop any particles from being produced by the given emitter, but it does _NOT_ remove them from the room). This function should always be called when the emitters are no longer needed for the system to prevent memory leaks and errors.",
        "return": "N/A"
    },
    "ef_flare": {
        "parameters": [],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_flare, x + lengthdir_x(32, image_angle), y + lengthdir_y(32, image_angle), 0, c_white);<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x + lengthdir_x(32, image_angle), y + lengthdir_y(32, image_angle), \"Bullets\", obj_Bullet);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_flare;",
        "function": "ef_flare;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a flare effect as illustrated in the image below:  \n  \n![](images/ef_flare.png)",
        "return": "N/A."
    },
    "iap_purchase_details": {
        "parameters": [
            {
                "label": "product_id",
                "documentation": "The product ID string for the purchase."
            },
            {
                "label": "ds_map",
                "documentation": "The ds_map that will store the purchase information."
            }
        ],
        "example": {
            "code": "var p_map = ds_map_create();<br> var p_index = ds_map_find_value(iap_data, \"index\");<br> iap_purchase_details(p_index, p_map);<br> if ds_map_find_value(p_map, \"status\") == iap_purchased<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Gold += 100000;<br> &nbsp;&nbsp;&nbsp;}<br> ds_map_destroy(p_map);<br>",
            "description": ""
        },
        "signature": "iap_purchase_details(product_id, ds_map);",
        "function": "iap_purchase_details",
        "documentation": "With this function you can populate a previously created [ds_map](../data_structures/ds%20maps/index.html) with a number of key/value pairs that describe the purchase details of the given product. The following data is returned within the map:",
        "return": "N/A"
    },
    "vspeed": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check(vk_up) vspeed = -5;<br> if keyboard_check(vk_down) vspeed = 5;<br>",
            "description": ""
        },
        "signature": "vspeed;",
        "function": "vspeed;",
        "documentation": "",
        "return": "Real"
    },
    "random_get_seed": {
        "parameters": [],
        "example": {
            "code": "ini_open(\"Save.ini\")<br> ini_write_real(\"Levels\", string(level), random_get_seed());<br> ini_close();",
            "description": ""
        },
        "signature": "random_get_seed();",
        "function": "random_get_seed",
        "documentation": "To generate a random number _GameMaker Studio 2_ starts with a random _seed_ number. With this function you can retrieve that seed, which can then be stored to reproduce a specific series of random events. For example, say you have a procedurally generated game, but want the player to be able to go back to previously discovered areas. Well, at the start of each area, you can store the random seed with this function and so every time you need to go back there, you can use [random\\_set\\_seed](random_set_seed.html) to set the seed to what it was previously and so force _GameMaker Studio 2_ to reproduce the same set of \"random\" functions that it used previously.",
        "return": "Real"
    },
    "physics_particle_delete_region_poly": {
        "parameters": [
            {
                "label": "pointList",
                "documentation": "A ds_list of points to use to create the polygon."
            }
        ],
        "example": {
            "code": "var list = ds_list_create(p_list);<br> for (var i = 0; i &lt; 5; i ++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_add(p_list, mx[i]);<br> &nbsp;&nbsp;&nbsp;ds_list_add(p_list, my[i]);<br> &nbsp;&nbsp;&nbsp;}<br> physics_particle_delete_region_poly(p_list);<br> ds_list_destroy(p_list);<br>",
            "description": ""
        },
        "signature": "physics_particle_delete_region_poly(pointList)",
        "function": "physics_particle_delete_region_poly",
        "documentation": "With this function you can delete (remove) all the particles that fall within the bounds of the defined polygonal area from the physics simulation in the current room. The function takes a (previously created) [ds_list()](../../data_structures/ds%20lists/index.html) containing the x/y position of each point of the polygon, with the even numbered positions in the list being the x coordinates, and odd numbered positions the y coordinates, ie: for a triangle, your list would have six entries, with entry 0, 2, and 4 being the x coordinates and 1, 3, and 5 being the y coordinates. The polygon will then be used to delete all the particles that fall within the defined area.  \n  \nNote that the polygon defined must have _at least_ three points, and _at most_ 8.",
        "return": "N/A"
    },
    "steam_get_app_id": {
        "parameters": [],
        "example": {
            "code": "global.app_id = steam_get_app_id();<br>",
            "description": ""
        },
        "signature": "steam_get_app_id();",
        "function": "steam_get_app_id",
        "documentation": "This function is used retrieve the unique app ID that Steam assigns for your game, which is required for using some of the [User Generated Content](user%20generated%20content/index.html) functions.",
        "return": "Real"
    },
    "steam_is_overlay_enabled": {
        "parameters": [],
        "example": {
            "code": "global.steam_api = false;<br> if steam_initialised()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if steam_stats_ready() &amp;&amp; steam_is_overlay_enabled()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.steamapi = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_is_overlay_enabled();",
        "function": "steam_is_overlay_enabled",
        "documentation": "When using the Steam API, this function can be called to check that the Steam client API has the overlay functionality enabled.",
        "return": "Boolean"
    },
    "string_char_at": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to check."
            },
            {
                "label": "index",
                "documentation": "The position to get the character from."
            }
        ],
        "example": {
            "code": "str1 = \"Hello World\";<br> str2 = string_char_at(str1, 7);<br>",
            "description": ""
        },
        "signature": "string_char_at(str, index);",
        "function": "string_char_at",
        "documentation": "You can use this function to return a specific character at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the value given to index, an empty string \"\" is returned.",
        "return": "String"
    },
    "string_width": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to measure the width of."
            }
        ],
        "example": {
            "code": "var ww;<br> ww = string_width(str_Name + \" \");<br> draw_text(32, 32, str_Name));<br> draw_text(32 + ww, 32, \"has won the game!\");<br>",
            "description": ""
        },
        "signature": "string_width(string);",
        "function": "string_width",
        "documentation": "This function will return the width (in pixels) of the input string. It is very handy for calculating distances between text elements based on the total width of the letters that make up the string as it would be drawn with [draw_text](../drawing/text/draw_text.html) using the currently defined font.",
        "return": "Real"
    },
    "window_get_y": {
        "parameters": [],
        "example": {
            "code": "wy = window_get_y();",
            "description": ""
        },
        "signature": "window_get_y();",
        "function": "window_get_y",
        "documentation": "",
        "return": "Real"
    },
    "mouse_wheel_down": {
        "parameters": [],
        "example": {
            "code": "if mouse_wheel_down()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y += 10;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mouse_wheel_down();",
        "function": "mouse_wheel_down",
        "documentation": "This function returns true if the mouse wheel is being rotated downwards and false otherwise.",
        "return": "Boolean"
    },
    "part_type_colour_rgb": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "rmin",
                "documentation": "The minimum the final colour's red component can be."
            },
            {
                "label": "rmax",
                "documentation": "The maximum the final colour's red component can be."
            },
            {
                "label": "gmin",
                "documentation": "The minimum the final colour's green component can be."
            },
            {
                "label": "gmax",
                "documentation": "The maximum the final colour's green component can be."
            },
            {
                "label": "bmin",
                "documentation": "The minimum the final colour's blue component can be."
            },
            {
                "label": "bmax",
                "documentation": "The maximum the final colour's blue component can be."
            }
        ],
        "example": {
            "code": "part_type_rgb(global.Blood_Part, 0, 255, 0, 0, 0, 0);",
            "description": ""
        },
        "signature": "part_type_colour_rgb(ind, rmin, rmax, gmin, gmax, bmin, bmax p&gt;",
        "function": "part_type_colour_rgb",
        "documentation": "With this function you can set the mix of red, green and blue colours for all particles created of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. All values must be between 0 and 255.",
        "return": "N/A"
    },
    "sprite_yoffset": {
        "parameters": [],
        "example": {
            "code": "if y - sprite_yoffset &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y = sprite_yoffset;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_yoffset;",
        "function": "sprite_yoffset;",
        "documentation": "This **read only** variable returns the local yoffset (the y component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This yoffset is returned in pixels and will be dependant on the [image_yscale](image_yscale.html), so that (for example) if a square 32x32 sprite is defined as having the y origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled yoffset you should use [sprite\\_get\\_yoffset](../../sprites/sprite_get_yoffset.html). ![](../images/yoffset_image.png)",
        "return": "Real"
    },
    "object_is_ancestor": {
        "parameters": [],
        "signature": "object_is_ancestor(obj, par);",
        "function": "object_is_ancestor",
        "documentation": "This function can be used to check an object and see if it is an ancestor or not of another object. So, both arguments need to be object indices and _not_ the instance ids, and the first one is always the object that you want to find out if it is a child of the second argument, which is always the object that want to check as the ancestor (parent).",
        "return": "Boolean"
    },
    "physics_get_density": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the id of the bound fixture"
            }
        ],
        "example": {
            "code": "var density = physics_get_density(fix_id);<br> physics_set_density(fix_id, density - 0.1);<br>",
            "description": ""
        },
        "signature": "physics_get_density(fixture)",
        "function": "physics_get_density",
        "documentation": "When you bind a fixture to an instance using [physics\\_fixture\\_bind](physics_fixture_bind.html) this returns an \"id\" for the bound fixture. You can use this id to get the density value of the bound fixture (_not_ the \"base\" fixture) at any time using this function.",
        "return": "Real"
    },
    "layer_get_element_type": {
        "parameters": [
            {
                "label": "layer",
                "documentation": "The unique ID value of the element to get the type of"
            }
        ],
        "example": {
            "code": "var a = layer_get_all_elements(layer);<br> for (var i = 0; i &lt; array_length_1d(a); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if layer_get_element_type(a[i]) == layerelementtype_sprite<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_sprite_destroy(a[i])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_element_type(element_id)",
        "function": "layer_get_element_type",
        "documentation": "You can use this function to get the _element type_ for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
        "return": "Constant (see table, above) or -1 if element does not exist or is invalid"
    },
    "array_length_1d" : {
        "parameters": [
            {
                "label": "array_index",
                "documentation": "The index of the array to check."
            }
        ],
        "example": {
            "code": "",
            "description": "The above code will loop through an array and set each entry to -1."
        },
        "signature": "array_length_1d(array_index)",
        "function": "array_length_1d",
        "documentation" : "With this function you can get the length (number of entries) of a 1D array. For 2D arrays you should be using the array_height_2d and array_length_2d functions.",
        "return": "Real"
    },
    "ds_queue_head": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read from."
            }
        ],
        "example": {
            "code": "num = ds_queue_head(control_queue);",
            "description": ""
        },
        "signature": "ds_queue_head(id);",
        "function": "ds_queue_head",
        "documentation": "This function will only _read_ the first value of the queue (that which is \"at the head\"). It will not _dequeue_ the value, meaning that it can still be read in the future by this function or the [ds\\_queue\\_dequeue](ds_queue_dequeue.html).",
        "return": "Real or String"
    },
    "vertex_get_number": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The vertex buffer to check."
            }
        ],
        "example": {
            "code": "v_num = vertex_get_number(v_buffer);",
            "description": ""
        },
        "signature": "vertex_get_number(buffer);",
        "function": "vertex_get_number",
        "documentation": "With this function you can find out the number of individual vertices defined in any given vertex buffer.",
        "return": "Real"
    },
    "date_get_hour": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "myhour = date_get_hour(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_hour(date);",
        "function": "date_get_hour",
        "documentation": "This function returns the hour of the given datetime value.",
        "return": "Real"
    },
    "mean": {
        "parameters": [
            {
                "label": "val0 ... max_val",
                "documentation": "The values to compare."
            }
        ],
        "example": {
            "code": "xmiddle = mean(obj_player1.x, obj_player2.x, obj_player3.x);<br> ymiddle = mean(obj_player1.y, obj_player2.y, obj_player3.y);",
            "description": ""
        },
        "signature": "mean(val1, val2, ... max_val);",
        "function": "mean",
        "documentation": "This function works by adding up all the input values and then dividing them by their own number. You can have as many arguments as you require (note that more arguments will mean that the function will be slower to parse). So, mean(2, 6, 9, 32) returns 12.25 as 2+6+9+32=49 and 49/4=12.25.",
        "return": "Real"
    },
    "matrix_stack_is_empty": {
        "parameters": [],
        "example": {
            "code": "if !matrix_stack_is_empty()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;matrix_stack_clear();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "matrix_stack_is_empty();",
        "function": "matrix_stack_is_empty",
        "documentation": "This function can be used to check whether the matrix stack is empty (returns true) or not (returns false).",
        "return": "Boolean"
    },
    "network_create_socket": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of socket connection to create (see the constants listed below)."
            }
        ],
        "example": {
            "code": "client = network_create_socket(network_socket_tcp);<br> network_connect( client, ï¿½192.134.0.1ï¿½, 6510 );<br>",
            "description": ""
        },
        "signature": "network_create_socket(type);",
        "function": "network_create_socket",
        "documentation": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique _id_ for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.  \n  \n_**NOTE:** You can use the IP \"127.0.0.1\" to connect back to the same device that is running the game._",
        "return": "Real"
    },
    "object_exists": {
        "parameters": [],
        "example": {
            "code": "if object_exists(obj_temp)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (obj_Temp) scr_add_event();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "object_exists(obj);",
        "function": "object_exists",
        "documentation": "This function returns whether an object with the specified index exists or not. Note that this checks to see if an object is present in the resource tree, and not actually in the game room. For that you should use the function [instance_exists](../instances/instance_functions/instance_exists.html).",
        "return": "Boolean"
    },
    "object_set_visible": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the object to change."
            },
            {
                "label": "vis",
                "documentation": "The new visibility of the object (true=visible, false=invisible)."
            }
        ],
        "example": {
            "code": "if !object_get_visible(obj_Block) object_set_visible(obj_Block, true);",
            "description": ""
        },
        "signature": "object_set_visible( index, vis );",
        "function": "object_set_visible",
        "documentation": "With this function you can flag a specific object as being visible or not (for more information on the \"visible\" flag see [Defining Objects](../../../2_interface/1_editors/objects.html)). This means that all instances of this object that are created _after visible has been changed_ will be created with this new state, while instances that are already in the room may not be affected.  \n  \nPlease note that this is not an instance function! You can set the visible flag of individual instances using the [visible](../instances/instance_variables/visible.html) variable and so have ten instances all flagged as visible even though the object in question has the flag set to false in the IDE, and even if you change the visible flag of the object to true using this function, all instances that currently in the room will remain as they were, and only instances created after calling the function will start with visible flagged as true.",
        "return": "N/A"
    },
    "steam_ugc_query_add_required_tag": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "tag_name",
                "documentation": "The tag name to include (a string)."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1);<br> steam_ugc_query_add_required_tag(query_handle, \"RPG\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": "steam_ugc_query_add_required_tag(ugc_query_handle , tag_name);",
        "function": "steam_ugc_query_add_required_tag",
        "documentation": "This function can be used to further filter any given UGC query, specifically to search only those UGC items with the given tag. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is a string you want to use as the tag to include. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "audio_stop_all": {
        "parameters": [],
        "example": {
            "code": "if !global.SFX<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_stop_all();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_stop_all();",
        "function": "audio_stop_all",
        "documentation": "This function will stop _all_ sounds that are currently playing.",
        "return": "N/A"
    },
    "texture_get_uvs": {
        "parameters": [
            {
                "label": "texid",
                "documentation": "The image asset to get the texture from"
            }
        ],
        "example": {
            "code": "var tex = texture_get_uvs(surf_back);<br> tex_left = tex[0];<br> tex_top = tex[1];<br> tex_right = tex[2];<br> tex_left = tex[3];<br>",
            "description": ""
        },
        "signature": "texture_get_uvs(texid)",
        "function": "texture_get_uvs",
        "documentation": "This function returns a 1D array with 4 elements representing the UV coordinates for the image on the texture page, filling in the array with the following values:",
        "return": "1D Array (4 elements)"
    },
    "gml_pragma": {
        "parameters": [
            {
                "label": "command",
                "documentation": "A string with one of the commands listed below."
            },
            {
                "label": "[optional]",
                "documentation": "Some of the available commands require an optional argument or arguments. These are explained below for each command."
            }
        ],
        "example": {
            "code": "gml_pragma(\"forceinline\");<br>",
            "description": ""
        },
        "signature": "gml_pragma(command, [optional...]);",
        "function": "gml_pragma",
        "documentation": "The gml_pragma function affects how the YYC target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively _pre-processed_ before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:",
        "return": "N/A"
    },
    "room_persistent": {
        "parameters": [],
        "example": {
            "code": "if lives &lt; 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_persistent = false;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_start);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_persistent;",
        "function": "room_persistent;",
        "documentation": "",
        "return": "Boolean"
    },
    "timeline_delete": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the time line to delete."
            }
        ],
        "example": {
            "code": "if timeline_exists(global.tl) timeline_delete(global.tl);",
            "description": ""
        },
        "signature": "timeline_delete( ind );",
        "function": "timeline_delete",
        "documentation": "With this function you can delete any time line from your game. if this time line was created in the _GameMaker Studio 2_ resource tree, please note that it is removed completely from the game and trying to call the indexed time line again after using this function will cause an error. If the time line was created dynamically using the [timeline_add](timeline_add.html) function, then this function should be used the moment that the time line is no longer needed to prevent any memory leaks that could slow down (and eventually crash) your game.",
        "return": "N/A"
    },
    "ds_list_shuffle": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to shuffle."
            }
        ],
        "example": {
            "code": "if restart<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_shuffle(card_list);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_shuffle(id);",
        "function": "ds_list_shuffle",
        "documentation": "With this function you can shuffle a list, which will re-order all the component values into random positions from those in which they were originally added to the list.  \n  \n_**NOTE:** This function will shuffle the list items to the same positions every time the game is run afresh due to the fact that GameMaker Studio 2 generates the same initial random seed every time to make debugging code a far easier task. To avoid this behaviour use [randomise](../../maths/real%20valued%20functions/randomise.html) at the start of your game. This is only true when testing and debugging the game, as the final executable package will not show this behaviour and will be random every play._",
        "return": "N/A"
    },
    "ds_queue_copy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the NEW queue."
            },
            {
                "label": "source",
                "documentation": "The ORIGINAL queue to copy to id."
            }
        ],
        "example": {
            "code": "with (instance_create_layer(x, y, \"Enemies\", obj_Enemy))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;queue = ds_queue_create();<br> &nbsp;&nbsp;&nbsp;ds_queue_copy(queue, other.queue);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_queue_copy(id, source);",
        "function": "ds_queue_copy",
        "documentation": "This function can be used to copy the contents of one queue into another. Note that this does _NOT_ remove the contents from the original queue, nor does it destroy the original queue. When using this function the queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
        "return": "N/A"
    },
    "ds_stack_copy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the NEW stack."
            },
            {
                "label": "source",
                "documentation": "The ORIGINAL stack to copy to id."
            }
        ],
        "example": {
            "code": "with (instance_create_layer(x, y, \"Enemies\", obj_Enemy))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;stack = ds_stack_create();<br> &nbsp;&nbsp;&nbsp;ds_stack_copy(stack, other.stack);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_stack_copy(id, source);",
        "function": "ds_stack_copy",
        "documentation": "This function can be used to copy the contents of one stack into another. Note that this does _NOT_ remove the contents from the original stack, nor does it destroy the original stack. When using this function the stack being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
        "return": "N/A"
    },
    "draw_arrow": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the start of the line."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the start of the line."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the end of the line (where the arrowhead ends)."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the end of the line (where the arrowhead ends)."
            },
            {
                "label": "size",
                "documentation": "The length of the arrow in pixels."
            }
        ],
        "example": {
            "code": "draw_arrow(x, y, mouse_x, mouse_y, 10);",
            "description": ""
        },
        "signature": "draw_arrow(x1, y1, x2, y2, size);",
        "function": "draw_arrow",
        "documentation": "This function will draw an arrow from point (x1,y1) to point (x2,y2). The stem of the arrow is drawn along these points with the actual arrow head being drawn at the end, where the size of the arrowhead is defined by the argument \"size\" and is calculated as being part of the stem so that the end point is always aligned with the position defined by x2,y2. The width of the arrow head is calculated automatically in proportion to the length.",
        "return": "N/A"
    },
    "audio_pause_sound": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to pause."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause;<br> &nbsp;&nbsp;&nbsp;if global.Pause<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_pause_sound(snd_Waterfall);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_resume_sound(snd_Waterfall);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_pause_sound(index);",
        "function": "audio_pause_sound",
        "documentation": "With this function you can pause any sound that is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset, in which case _all_ instances of the given sound will be paused.",
        "return": "N/A"
    },
    "display_get_height": {
        "parameters": [],
        "example": {
            "code": "myheight = display_get_height();",
            "description": ""
        },
        "signature": "display_get_height();",
        "function": "display_get_height",
        "documentation": "This function will return the height of the display (in pixels). Note that on the HTML5 target, this value is the height of the _browser window_, rather than the physical display size.",
        "return": "Real"
    },
    "show_error": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to show in the pop-up message."
            },
            {
                "label": "abort",
                "documentation": "Whether to abort (true) or not (false)."
            }
        ],
        "example": {
            "code": "if room != rm_Dungeon<br> {<br> show_error(\"Error: Went to wrong area. Aborting game.\", true);<br> }<br>",
            "description": ""
        },
        "signature": "show_error(str, abort);",
        "function": "show_error",
        "documentation": "This function will show a custom string as an error message and give the option to abort the game afterwards if necessary.",
        "return": "N/A"
    },
    "part_system_update": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to update."
            }
        ],
        "example": {
            "code": "repeat (room_speed * 3)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_system_update(global.RainSys);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_update(ind);",
        "function": "part_system_update",
        "documentation": "This function will advance the given particle system one step in game time and can be used to simulate the particle system behaviour when automatic updating is off, or it can be used to advance a particle system to a specific point all in one step. For example, if you have a particle system for snow, and you want it to appear that the snow is falling right from the moment the player enters the room then you may wish to advance your snow particles for a few seconds in the create event of an instance so that the first time they are drawn, there are particles all over the screen (the code example below shows this). You can also use this function when automatic updating of the system is switched off by the function [part\\_system\\_automatic_update](part_system_automatic_update.html) to move the system along.",
        "return": "N/A"
    },
    "draw_set_font": {
        "parameters": [
            {
                "label": "font",
                "documentation": "The name of the font to use."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_blue);<br> draw_set_font(fnt_Game);<br> draw_text(200, 200, \"Hello World\" );<br>",
            "description": ""
        },
        "signature": "draw_set_font(font);",
        "function": "draw_set_font",
        "documentation": "This function will set the font to be used for all further text drawing. This font must have been added into the [font assets](../../../../2_interface/1_editors/fonts.html) of the game or have been created using either the [font_add](../../fonts/font_add.html) or [font\\_add\\_sprite](../../fonts/font_add_sprite.html). You may also set this to -1 to default to drawing text using a 12point Arial font.",
        "return": "N/A"
    },
    "directory_exists": {
        "parameters": [
            {
                "label": "dname",
                "documentation": "The name of the directory to look for."
            }
        ],
        "example": {
            "code": "if directory_exists(working_directory + \"Saves\\\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file = file_find_first(working_directory + \"Saves\\*.doc\", fa_readonly);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "directory_exists(dname)",
        "function": "directory_exists",
        "documentation": "This function will return true if the indicated directory exists or false if it does not. The specified name must include the full path, not a relative path and you cannot access any directories from out-with the game bundle as all games are sandboxed.",
        "return": "Boolean"
    },
    "position_change": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of where to change colliding instances."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to change colliding instances."
            },
            {
                "label": "obj",
                "documentation": "The new object the calling object will change into."
            },
            {
                "label": "perf",
                "documentation": "Whether to perform that new object's Create event (true) or not (false)."
            }
        ],
        "example": {
            "code": "position_change(200, 200, obj_Bird, true);",
            "description": ""
        },
        "signature": "position_change(x, y, obj, perf);",
        "function": "position_change",
        "documentation": "This function will check a position for a collision with _any instances_ at the given point, and if there is one, it will change **all** instances in collision to be instances of the chosen object. You can set the \"perf\" argument to true which will force _GameMaker Studio 2_ to perform the Destroy and Clean Up events of the found instance and the Create event of the new instance, or false to not perform any of these events. Please note, that if you choose not to perform the Destroy, Clean Up and Create events, any instance created that uses a variable normally defined in the create event will crash the game as that variable will no longer exist.",
        "return": "N/A"
    },
    "string_height": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to measure the height of."
            }
        ],
        "example": {
            "code": "var hh;<br> hh = string_height(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");<br> draw_text(32, 32, string(score));<br> draw_text(32, 32 + hh, string(lives);<br>",
            "description": ""
        },
        "signature": "string_height(string);",
        "function": "string_height",
        "documentation": "This function will return the height (in pixels) of the input string. It is very handy for calculating distances between text elements based on the tallest of the letters that make up the string as it would be drawn with [draw_text](../drawing/text/draw_text.html) using the currently defined font.",
        "return": "Real"
    },
    "ds_grid_add_region": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The x position of the left of the region in the grid."
            },
            {
                "label": "y1",
                "documentation": "The y position of the top of the region in the grid."
            },
            {
                "label": "x2",
                "documentation": "The x position of the right of the region in the grid."
            },
            {
                "label": "y2",
                "documentation": "The y position of the bottom of the region in the grid."
            },
            {
                "label": "val",
                "documentation": "The value to add to the region cells."
            }
        ],
        "example": {
            "code": "ds_grid_add_region(grid, 2, 4, 5, 5, \".\")<br>",
            "description": ""
        },
        "signature": "ds_grid_add_region(index, x1, y1, x2, y2, val);",
        "function": "ds_grid_add_region",
        "documentation": "This function can be used to add a given value (real or string) to all the values of the cells found within the defined area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.",
        "return": "N/A"
    },
    "code_is_compiled": {
        "parameters": [],
        "signature": "code_is_compiled();",
        "function": "code_is_compiled",
        "documentation": "This function will return true if the platform compiles outside of the virtual machine, such as for the YYC and JS platforms.",
        "return": "Boolean"
    },
    "matrix_build_projection_perspective": {
        "parameters": [
            {
                "label": "w",
                "documentation": "The width of the projection."
            },
            {
                "label": "h",
                "documentation": "The height of the projection."
            },
            {
                "label": "znear",
                "documentation": "The near clipping plane."
            },
            {
                "label": "zfar",
                "documentation": "The far clipping plane."
            }
        ],
        "example": {
            "code": "var projmat = matrix_build_projection_perspective(640, 480, 1.0, 32000.0);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "matrix_build_projection_perspective(width, height, znear, zfar);",
        "function": "matrix_build_projection_perspective",
        "documentation": "This function builds a perspective projection matrix matrix based on the dimensions of the near plane, using the specified parameters listed below.",
        "return": "Matrix index"
    },
    "physics_mass_properties": {
        "parameters": [
            {
                "label": "mass",
                "documentation": "The new mass that you want the fixture to have."
            },
            {
                "label": "local_center_x",
                "documentation": "The local x coordinate of the new center of mass."
            },
            {
                "label": "local_center_y",
                "documentation": "The local y coordinate of the new center of mass."
            },
            {
                "label": "inertia",
                "documentation": "Set the inertia for the fixture."
            }
        ],
        "example": {
            "code": "physics_mass_properties(phy_mass, -10, -10, phy_inertia);",
            "description": ""
        },
        "signature": "physics_mass_properties(mass, local_center_x, local_center_y, inertia)",
        "function": "physics_mass_properties",
        "documentation": "This function can be used to set custom mass and inertia values for a physics enabled instance. Normally the mass, center of mass, and inertia for an instance is calculated using a combination the surface area of the bound fixtures and their density. However in very special occasions you may need to offset the center of mass or change the inertia and that is when you would use this function. Bear in mind that the mass is calculated in real world weight (ie:kilograms) and you should always try and keep values realistic for what you are modelling. So if your physics object is meant to represent a person, their mass would be approximately 70 kilos.  \n  \nThe center of mass is calculated automatically for you based on the shape of the fixture (or fixtures) you have defined. To get a general idea of where this could be, if you have a sprite that is the same shape as the fixtures you wish to create, then select the \"center origin\" option you will see approximately where the center of mass will be too. However, this may not be correct or you may be looking for a specific effect from your physics object, in which case this function can also be used to change the x and y coordinates for the center of mass. These are **local** values, so 0,0 is the point at which the fixtures are bound to the instance (the origin of the instance). So a center of mass of -4,0 would shift the center of mass to the left of the origin.  \n  \nAs for the inertia, this basically defines how resistant the instance is to changes in its direction and velocity, so a higher inertia makes it more resistant and a low inertia makes it less resistant (inertia and mass cannot be negative values!).  \n  \n_**NOTE:** This function does not set mass and inertia for individual fixtures, but rather for the whole physics enabled instance, no matter how many fixtures are bound to it._  \n  \n_**NOTE:** This function should only be used when necessary as the physics simulation is designed for the mass and inertia to be optimal based on the density and size of the fixture. Changing these values can have unforeseen effects._",
        "return": "N/A"
    },
    "timeline_max_moment": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the timeline to get the last moment of."
            }
        ],
        "example": {
            "code": "if timeline_position &gt; timeline_max_moment(timeline_index)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_running = false;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_max_moment(ind);",
        "function": "timeline_max_moment",
        "documentation": "This function will return the value of the moment in which the timeline performs its final action. So, if you have a timeline with 8 different actions placed 20 moments apart, this function would return the moment value of the last action in that timeline, which would be 160. This function is a good way to test whether a timeline has passed the last active moment when running, since the timeline position will continue incrementing every step of the game whether there are further actions or not.",
        "return": "N/A"
    },
    "gpu_set_ztestenable": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable or disable z-buffer testing (true or false)."
            }
        ],
        "example": {
            "code": "gpu_set_ztestenable(true);<br> draw_sprite(spr_Background, 0, 0, 0);<br> gpu_set_ztestenable(false);<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_ztestenable(enable);",
        "function": "gpu_set_ztestenable",
        "documentation": "This function can be used to toggle z-buffer testing on or off, affecting how things will be drawn (in general only of use when working with 3D projects). Essentially, by default when z-testing is off and you have two objects drawing to the same space, _both_ objects will be rendered regardless of whether one will over-draw the other, resulting in unnecessary draw calls. If you switch this on then the z-buffer is tested to see whether an object will be \"visible\" and not drawn if it's not. Note that this is the _default_ behaviour, but you can change this by changing the type of comparison used for z-buffer testing (see the function [gpu\\_set\\_zfunc](gpu_set_zfunc.html).",
        "return": "N/A"
    },
    "draw_surface_ext": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scale."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scale."
            },
            {
                "label": "rot",
                "documentation": "The rotation or angle to draw the surface."
            },
            {
                "label": "col",
                "documentation": "The colour with which to blend the surface."
            },
            {
                "label": "alpha",
                "documentation": "The alpha transparency for drawing the surface."
            }
        ],
        "example": {
            "code": "draw_surface_ext(surf, 0, 0, 2, 2, 0, c_red, 0.5);",
            "description": ""
        },
        "signature": "draw_surface_ext(id, x, y, xscale, yscale, rot, col, alpha);",
        "function": "draw_surface_ext",
        "documentation": "This function will draw the given surface as in the function [draw_surface](draw_surface.html) but with additional options to change the scale, blending, rotation and alpha of the surface being drawn. Changing these values does _not_ modify the resource in any way (only how it is drawn).",
        "return": "N/A"
    },
    "file_text_readln": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to read from."
            }
        ],
        "example": {
            "code": "var i, file;<br> file = file_text_open_read(working_directory + \"hiscore.txt\");<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;scr[i] = file_text_read_real(file);<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;scr_name[i] = file_text_read_string(file);<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_readln(fileid);",
        "function": "file_text_readln",
        "documentation": "With this function you can skip the remainder of the current line from a given opened text file and move to the start of the next one. The function will also return the full line as a string, making it an easy way to read complete \"chunks\" of data for parsing later.",
        "return": "string"
    },
    "steam_get_quota_total": {
        "parameters": [],
        "example": {
            "code": "if steam_is_cloud_enabled_for_app()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;quota = steam_get_quota_total();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_quota_total();",
        "function": "steam_get_quota_total",
        "documentation": "When using the Steam Cloud to store and synchronise files, you must set up the _quota_ of space that your game will need. This quota is enforced on each Cloud-enabled game, on a per-user-per-game basis, so, for example, if the quota for Game X is 1 megabyte, then each Steam account that owns Game X may store, at most, 1 megabyte of data associated with that game in the Cloud. Any other Cloud-enabled games that the user owns (say, Game Y) will not be affected by the data stored by Game X. The default quota for new Steamworks games is one gigabyte, but you can change this from the Steamworks control panel for your game.  \n  \n_**NOTE:** Once the quota is exhausted file writes **will fail**. If you think it may be possible for the quota to be exhausted for the user of your game, you should create code to handle it, as by doing nothing you leave users in a situation where they are unable to fix things and that will lead to a poor experience of your game._",
        "return": "Real"
    },
    "steam_ugc_get_item_install_info": {
        "parameters": [
            {
                "label": "published_file_id",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "info_map",
                "documentation": "A (previously created) DS map index."
            }
        ],
        "example": {
            "code": "var item_map = ds_map_create();<br> steam_ugc_get_item_install_info(global.fileID, item_map);<br>",
            "description": ""
        },
        "signature": "steam_ugc_get_item_install_info(published_file_id, info_map);",
        "function": "steam_ugc_get_item_install_info",
        "documentation": "This function can be used to retrieve information about any given published file item that has been subscribed to and downloaded to the Steam local storage area for your game. You give the item ID and supply the index to an empty DS map which will then be populated with the following key/value pairs if the item exists:",
        "return": "Boolean"
    },
    "audio_get_master_gain": {
        "parameters": [
            {
                "label": "listenerIndex",
                "documentation": "The index of the listener to get the gain of."
            }
        ],
        "example": {
            "code": "var num = audio_get_listener_count();<br> for( var i = 0; i &lt; num; ++i;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;var ind = info[? \"index\"];<br> &nbsp;&nbsp;&nbsp;if audio_get_master_gain(ind) != 1<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_set_master_gain(info[? \"index\"], 1);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_get_master_gain(listenerIndex);",
        "function": "audio_get_master_gain",
        "documentation": "With this function you can get the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function [audio\\_get\\_listener_info](audio_get_listener_info.html) to get the different indices available for the target platform. The gain value returned is based on a linear scale from 0 (silent) to 1 (full volume). Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
        "return": "Real"
    },
    "get_string": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to show in the pop-up message."
            },
            {
                "label": "def",
                "documentation": "The default string in the text box."
            }
        ],
        "example": {
            "code": "global.test_name = get_string(\"Test highscore name:\", \"Anonymous\");",
            "description": ""
        },
        "signature": "get_string(str, def);",
        "function": "get_string",
        "documentation": "This creates a pop-up window showing a standard message, with a button labeled \"Ok\", that prompts the user to input a string. The function will return the input string, _or_ the default value if nothing has been entered.",
        "return": "String"
    },
    "filename_ext": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The file to use."
            }
        ],
        "example": {
            "code": "ext = filename_ext(file_find_first(\"*.*\", 0));<br>",
            "description": ""
        },
        "signature": "filename_ext(fname);",
        "function": "filename_ext",
        "documentation": "This function returns the extension part of the indicated file name, including the leading dot.",
        "return": "String."
    },
    "sin": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in radians) to return the sine of."
            }
        ],
        "example": {
            "code": "val = sin( pi/2 );",
            "description": ""
        },
        "signature": "sin(val);",
        "function": "sin",
        "documentation": "In a right angled triangle sin(val) = Opposite / Hypotenuse where val is one of the three angles.",
        "return": "Real"
    },
    "window_view_mouse_get_y": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the view to compare the mouse position to."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx, yy;<br> &nbsp;&nbsp;&nbsp;xx = window_view_mouse_get_x(0);<br> &nbsp;&nbsp;&nbsp;yy = window_view_mouse_get_y(0);<br> &nbsp;&nbsp;&nbsp;if xx &gt; 0 &amp;&amp; xx &lt; 32 &amp;&amp; yy &gt; 0 &amp;&amp; yy &lt; 32<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b_press[0] = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_view_mouse_get_y( id );",
        "function": "window_view_mouse_get_y",
        "documentation": "This function will return the mouse y position relative to the view selected.",
        "return": "Real"
    },
    "ds_grid_clear": {
        "parameters": [
            {
                "label": "index",
                "documentation": "This index of the grid to clear."
            },
            {
                "label": "val",
                "documentation": "The new value for all grid cells."
            }
        ],
        "example": {
            "code": "ds_grid_resize(global.Grid, room_width / 32, room_height / 32);<br> ds_grid_clear(global.Grid, -1)<br>",
            "description": ""
        },
        "signature": "ds_grid_clear(index, val);",
        "function": "ds_grid_clear",
        "documentation": "This function can be used to clear a given ds_grid to a specific value. All cells within the grid will then contain this value, which can be a real number or a string. The image below illustrates how this works: ![](ds_grid_clear.png)",
        "return": "N/A"
    },
    "date_get_month": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "mymonth = date_get_month(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_month(date);",
        "function": "date_get_month",
        "documentation": "This function returns the month of the given datetime value.",
        "return": "Real"
    },
    "physics_remove_fixture": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The ID of the instance to remove the fixture from"
            },
            {
                "label": "fixture",
                "documentation": "The ID of the fixture that is to be removed from the instance"
            }
        ],
        "example": {
            "code": "physics_remove_fixture(id, my_fix);",
            "description": ""
        },
        "signature": "physics_remove_fixture(id, fixture)",
        "function": "physics_remove_fixture",
        "documentation": "This function removes (or \"un-binds\") a fixture from an instance or instances. It requires the unique \"id\" of the bound fixture (as returned by the function [physics\\_fixture\\_bind](physics_fixture_bind.html) and it will remove all the currently defined physics properties for the instance, permitting you to redefine a new fixture and bind that to the instance. In this way you can change the instances physical properties without having to destroy and re-create it.",
        "return": "N/A"
    },
    "string": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The real number to be turned into a string."
            }
        ],
        "example": {
            "code": "draw_text(100, 100, \"Score: \" + string(score) + \" / Health: \" + string(health));",
            "description": ""
        },
        "signature": "string(val);",
        "function": "string",
        "documentation": "With this function you can turn any real number into a string. If the real number is an integer, it will be saved with no decimal places, otherwise, it will be saved with two decimal places.",
        "return": "String"
    },
    "audio_get_name": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to check."
            }
        ],
        "example": {
            "code": "var snd = audio_play_sound(choose(snd_One, snd_Two, snd_Three), 0, false);<br> var name = audio_get_name(snd);<br> show_debug_message(\"Sound = \" + name);<br>",
            "description": ""
        },
        "signature": "audio_get_name(index);",
        "function": "audio_get_name",
        "documentation": "This function will return the name of a given audio resource as a string. The \"index\" value can be that of the resource itself (as seen in the resource tree) or the unique ID value that is given when you play the sound using, for example, [audio\\_play\\_sound()](audio_play_sound.html). Note that the string returned is _not_ the same as the resource ID and cannot be used to access the resource itself, so should only be used for displaying or error checking.",
        "return": "String"
    },
    "camera_get_view_speed_y": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var xs = camera_get_view_speed_x(view_camera[0]);<br> var ys = camera_get_view_speed_y(view_camera[0]);<br> if xs != 5 || ys != 5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_view_speed(view_camera[0], 5, 5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_view_speed_y(camera_id)",
        "function": "camera_get_view_speed_y",
        "documentation": "This function can be used to retrieve the movement speed of the given camera along the y axis (vertical movement). The return value will be in pixels per game frame.",
        "return": "Real"
    },
    "gpu_set_texrepeat_ext": {
        "parameters": [
            {
                "label": "sampler_id",
                "documentation": "The sampler id from the shader."
            },
            {
                "label": "enable",
                "documentation": "Enable or disable texture filtering (true / false)"
            }
        ],
        "example": {
            "code": "var s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");<br> if gpu_get_texfilter_ext(s_tex)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter_ext(s_tex, false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter_ext(s_tex, true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_texrepeat_ext(sampler_id, enable);",
        "function": "gpu_set_texrepeat_ext",
        "documentation": "This function can be used to set whether a single sampler \"slot\" repeats the given texture when using [Shaders](../../shaders/index.html) in _GameMaker Studio 2_ . Setting it to true will repeat the texture if the uv coordinates are out with the 0-1 range, while a setting of false will mean no repeating.",
        "return": "N/A"
    },
    "gpu_set_tex_mip_enable": {
        "parameters": [
            {
                "label": "setting",
                "documentation": "The mipmap setting (a constant, default: mip_markedonly)"
            }
        ],
        "example": {
            "code": "if gpu_get_tex_mip_enable != mip_on<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_enable(mip_on);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_mip_enable(setting);",
        "function": "gpu_set_tex_mip_enable",
        "documentation": "With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the [Texture Group Manager](../../../../2_interface/3_settings/textures.html). The function requires one of the constants listed below.",
        "return": "N/A"
    },
    "file_find_next": {
        "parameters": [],
        "example": {
            "code": "file = file_find_next();",
            "description": ""
        },
        "signature": "file_find_next();",
        "function": "file_find_next",
        "documentation": "This function returns the name of the next file that satisfies the previously given mask and the attributes (defined by [file\\_find\\_first](file_find_first.html)). If no such file exists, the empty string is returned.  \n  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.  \n  \n_**NOTE:** This function works on all the C++ target platforms (Windows, Mac, iOS, Android and WinPhone), BUT the filter flags only work on Windows and WinPhone._",
        "return": "String"
    },
    "physics_particle_group_get_inertia": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "i = physics_particle_group_get_inertia(group1);<br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_inertia(group)",
        "function": "physics_particle_group_get_inertia",
        "documentation": "With this function you can retrieve the inertia of an entire group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "layer_sprite_y": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "y",
                "documentation": "The y position for the sprite"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> layer_sprite_y(spr_id, 50 + irandom(room_height - 200));<br>",
            "description": ""
        },
        "signature": "layer_sprite_y(sprite_element_id, y);",
        "function": "layer_sprite_y",
        "documentation": "",
        "return": "N/A"
    },
    "sprite_collision_mask": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to set the bounding box of."
            },
            {
                "label": "sepmasks",
                "documentation": "Whether to create collision masks for each sub-image of the sprite (true), or one mask for all (false)."
            },
            {
                "label": "bboxmode",
                "documentation": "What kind of bounding box to use. 0 = automatic, 1 = full image, 2 = user defined."
            },
            {
                "label": "bbleft",
                "documentation": "The maximum left position of the bounding box."
            },
            {
                "label": "bbtop",
                "documentation": "The maximum top position of the bounding box."
            },
            {
                "label": "bbright",
                "documentation": "The maximum right position of the bounding box."
            },
            {
                "label": "bbbottom",
                "documentation": "The maximum bottom position of the bounding box."
            },
            {
                "label": "kind",
                "documentation": "The kind of mask (0 = precise, 1=bounding box, 2 = disk, 3 = diamond)."
            },
            {
                "label": "tolerance",
                "documentation": "Indicates the tolerance in the transparency value (0=no tolerance, 255=full tolerance)."
            }
        ],
        "example": {
            "code": "spr = sprite_add(\"player_5.png\", 16, true, true, 0, 0);<br> sprite_collision_mask(spr, true, 1, 0, 0, 0, 0, 0, 0);<br>",
            "description": ""
        },
        "signature": "sprite_collision_mask(ind, sepmasks, bboxmode, bbleft, bbtop, bbright, bbbottom, kind, tolerance);",
        "function": "sprite_collision_mask",
        "documentation": "With this function you can set the type of collision mask that a sprite should have. If you select either automatic (0) or full image (1) as the bounding box mode then the individual bounding box values can be set to 0. However for a user defined mask (2) you will have to set these values. The different bounding box values are always relative to the top left corner of the sprite (irrespective of the x and y origin) which is considered position (0, 0).",
        "return": ""
    },
    "skeleton_skin_set": {
        "parameters": [
            {
                "label": "skinname",
                "documentation": "The name (a string) of the skin to use."
            }
        ],
        "example": {
            "code": "if skeleton_skin_get() == \"skin_Enemy1\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_skin_set(choose(\"skin_Enemy1\", \"skin_Enemy2\", \"skin_Enemy3\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_skin_set(skinname);",
        "function": "skeleton_skin_set",
        "documentation": "A skeletal animation sprite can be drawn with a variety of textures (called \"skins\"), permitting you to use one single animation for multiple different purposes. For example, you may have a generic walk animation and this can be used by your NPC characters, enemies, etc... in a game simply by changing the skin it is drawn with. These skins need to have been previously created and named in your animation program, and this name is passed into the function (as a string) to set the sprite to use that skin when being drawn.",
        "return": "N/A"
    },
    "zip_unzip": {
        "parameters": [
            {
                "label": "zip_file",
                "documentation": "The zip file to open"
            },
            {
                "label": "target_directory",
                "documentation": "The target directory to extract the files to"
            }
        ],
        "example": {
            "code": "var num = zip_unzip(\"/downloads/level_data.zip\", working_directory + \"extracted/\");<br> if num &lt;= 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;show_debug_message(\"Extraction Failed!\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "zip_unzip(zip_file, target_directory)",
        "function": "zip_unzip",
        "documentation": "This function will open a stored zip file and extract its contents to the given directory. Note that if you do not supply a full path to the ZIP directory then the current drive _root_ will be used, and if you want to place it in a relative path to the game bundle working directory then you should use the [working_directory](working_directory.html) variable as part of the path (relative paths using \".\" or \"..\" will not work as expected so should be avoided). Note too that the zip must be either part of the game bundle (ie: an [Included File](../../../2_interface/1_editors/included_files.html)) or have been downloaded to the storage area using [http\\_get\\_file](../asynchronous%20functions/http_get_file.html).",
        "return": "Real"
    },
    "ceil": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The number to change."
            }
        ],
        "example": {
            "code": "val = ceil( 3.4 );",
            "description": ""
        },
        "signature": "ceil(val);",
        "function": "ceil",
        "documentation": "This function takes any real number and rounds it up to the nearest integer. Care should be taken with this function as one common mistake is to use it round up a random value and expect it always to be greater than 1, ie:",
        "return": "Integer"
    },
    "physics_apply_force": {
        "parameters": [
            {
                "label": "xpos",
                "documentation": "The x coordinate in the room where the force will be applied"
            },
            {
                "label": "ypos",
                "documentation": "The y coordinate in the room where the force will be applied"
            },
            {
                "label": "xforce",
                "documentation": "the x component of the force vector"
            },
            {
                "label": "yforce",
                "documentation": "the y component of the force vector"
            }
        ],
        "example": {
            "code": "with (other)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_apply_force(x, y, 0, -30);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_apply_force(xpos, ypos, xforce, yforce)",
        "function": "physics_apply_force",
        "documentation": "When working with physics you need to apply not only gravity to objects, but forces as well. A force is any influence that causes an object to undergo a change in speed, a change in direction, or a change in shape, and is defined in the _GameMaker Studio 2_ physics world the same as we define gravity, by getting the vector from the two xforce/yforce components. It should be noted that forces are not applied to the center of mass of the object, but rather at a point in the room and they will change the direction and speed as well as the torque (spin) dependant on any other forces that are working on the object (like gravity). Here is an example image to help illustrate:  \n  \n![](images/physics_apply_force_image.png)",
        "return": "N/A"
    },
    "view_set_hport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "h",
                "documentation": "The new height (in pixels)"
            }
        ],
        "example": {
            "code": "if view_get_hport(0) != (display_get_height () / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_hport(0, display_get_height() / 2);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_set_hport(view_port, h)",
        "function": "view_set_hport",
        "documentation": "This function can be used to set the height of the given view port. You give the view port index (from 0 to 7) and the new height to use.",
        "return": "Real"
    },
    "display_reset": {
        "parameters": [],
        "example": {
            "code": "if display_aa &gt; 12 display_reset(8, true);",
            "description": ""
        },
        "signature": "display_reset(aa, vsync);",
        "function": "display_reset",
        "documentation": "This function Resets the display settings to the ones that were set when the game was started, but also allows you to change the current level of full screen anti-aliasing being used and whether to use vertical synchronisation. The available anti-aliasing levels are 0,2,4 and 8, with the default startup value being set to 0, and the default v-sync setting is false (off). Switching v-sync on may give a smoother gaming experience but it will also need more processing power and so its impact must be considered careful before use, and the same goes for the anti-aliasing where the higher the number the more processing that is required.",
        "return": "Real"
    },
    "part_emitter_destroy": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system to destroy the emitter from."
            },
            {
                "label": "ind",
                "documentation": "The index of the emitter to destroy."
            }
        ],
        "example": {
            "code": "if part_emitter_exists(global.Sname, p_emit)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_emitter_destroy(global.Sname, p_emit1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_emitter_destroy( ps, ind );",
        "function": "part_emitter_destroy",
        "documentation": "This function will remove the specified emitter from the given system and clear it from memory (this will also stop any particles from being produced by the given emitter, but it does _NOT_ remove them from the room). This function should always be called when the given emitter is no longer needed for the system to prevent memory leaks and errors.",
        "return": "N/A"
    },
    "draw_self": {
        "parameters": [],
        "example": {
            "code": "draw_self();",
            "description": ""
        },
        "signature": "draw_self();",
        "function": "draw_self",
        "documentation": "This function draws the sprite assigned to the instance exactly as it would be drawn if the draw event held no code or actions, and will reflect and changes that have been made to the [sprite variables](../../instances/instance_variables/index.html) in other events.",
        "return": "N/A"
    },
    "arcsin": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The angle (in radians) to return the inverse sine of."
            }
        ],
        "example": {
            "code": "val = arcsin( 0 );",
            "description": ""
        },
        "signature": "arcsin(x);",
        "function": "arcsin",
        "documentation": "Returns the inverse sine of x, in that if sin(x)=n, arcsin(n)=x, and the resulting number will be between -pi/2 and pi/2.",
        "return": "Real"
    },
    "timeline_add": {
        "parameters": [],
        "example": {
            "code": "global.tl = timeline_add();",
            "description": ""
        },
        "signature": "timeline_add();",
        "function": "timeline_add",
        "documentation": "With this function you can add a new (empty) time line into your game. the function returns the index of this new time line which should be stored in a variable for use in all further function calls that involve this new time line. You should also be sure to use the function [timeline_delete](timeline_delete.html) whenever you no longer wish to use the time line (like at the end of the room) so as to prevent any possible memory leaks that could slow down or crash your game.",
        "return": "Real"
    },
    "get_integer": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to show in the pop-up message."
            },
            {
                "label": "def",
                "documentation": "The default value in the text box."
            }
        ],
        "example": {
            "code": "global.level = get_integer(\"Level to test?\", 1);",
            "description": ""
        },
        "signature": "get_integer(str, def);",
        "function": "get_integer",
        "documentation": "This creates a pop-up window showing a custom message, with a button labeled \"Ok\", and prompts the user to input an integer value. The function will return the typed in integer, or the default value if nothing has been entered.",
        "return": "Real"
    },
    "show_debug_overlay": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "switch on (true) or off (false) the debug overlay."
            }
        ],
        "signature": "show_debug_overlay(enable);",
        "function": "show_debug_overlay",
        "documentation": "This function can be used to switch on and off the standard debug overlay when testing your game and is disabled by default. The debug overlay shows a graphic CPU/GPU usage bar in the actual game window itself along with the current real fps value, number of texture swaps and the number of vertex batches (note that texture swaps and vertex batches will never be zero and will normally show values of 2 or 3, since even with an empty room an no objects _GameMaker Studio 2_ still has to draw and batch things). ![](../../../1_overview/2_quick_start/images/qs_debug_bar.png)",
        "return": "N/A"
    },
    "gpu_set_tex_mip_bias": {
        "parameters": [
            {
                "label": "bias",
                "documentation": "The mipmap bias value to use (default: 0)"
            }
        ],
        "example": {
            "code": "if gpu_get_tex_mip_bias() != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_bias(0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_mip_bias(bias);",
        "function": "gpu_set_tex_mip_bias",
        "documentation": "With this function you can set the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this function can take negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.",
        "return": "N/A"
    },
    "vertex_format_add_colour": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_colour();<br> vertex_format_add_position();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_add_colour();",
        "function": "vertex_format_add_colour",
        "documentation": "Tell _GameMaker Studio 2_ to accept colour data as part of the new vertex format being created.",
        "return": "N/A"
    },
    "instance_place": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check for instances."
            },
            {
                "label": "y",
                "documentation": "The y position to check for instances."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instances of."
            }
        ],
        "example": {
            "code": "var _inst = instance_place(x, y, obj_Enemy);<br> if _inst != noone<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;hp -= _inst.dmg;<br> &nbsp;&nbsp;&nbsp;instance_destroy(_inst);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_place(x, y, obj);",
        "function": "instance_place",
        "documentation": "With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking _GameMaker Studio 2_ to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. this function will return the unique instance [id](../instance_variables/id.html) of the object being collided, but if that is not needed it is slightly faster to use the function [place_meeting](../../movement%20and%20collisions/collisions/place_meeting.html). This function also accepts the special keywords **all** and **other** and will return the keyword **noone** if no collision occurs, or the unique instance ID value of the instance found if a collision does occur.",
        "return": "Real (either an instance ID value or the keyword <tt>noone</tt>)"
    },
    "environment_get_variable": {
        "parameters": [
            {
                "label": "name",
                "documentation": "The name (a string) of the environment variable to check."
            }
        ],
        "example": {
            "code": "e_str = environment_get_variable(\"APPDATA\");",
            "description": ""
        },
        "signature": "environment_get_variable(name);",
        "function": "environment_get_variable",
        "documentation": "This function returns the value (a string) of the environment variable with the given name (also a string).  \n  \n_**NOTE:** This is a Windows only function._",
        "return": "String"
    },
    "highscore_add": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string (name) to attribute the score to"
            },
            {
                "label": "numb",
                "documentation": "The number (score) to add."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;highscore_add(global.Name, score);<br> &nbsp;&nbsp;&nbsp;score = 0;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_MainMenu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "highscore_add(str, numb);",
        "function": "highscore_add",
        "documentation": "With this function you can add a name and a score to the internal global high score list. There is no need to check the value to see if it is high enough to enter into the score list as _GameMaker Studio 2_ will only store those values that are greater than the tenth position stored.",
        "return": "N/A"
    },
    "audio_get_listener_mask": {
        "parameters": [],
        "example": {
            "code": "var g_mask = audio_get_listener_mask();<br> if g_mask != global.Audio_Mask<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var num = audio_get_listener_count();<br> &nbsp;&nbsp;&nbsp;global.Audio_Mask = 0; &nbsp;&nbsp;&nbsp;for(var i = 0; i &lt; num; ++i;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = audio_listener_get_data(info[? \"mask\"]);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.Audio_Mask = global.Audio_Mask | m;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;audio_set_listener_mask(mask);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_get_listener_mask();",
        "function": "audio_get_listener_mask",
        "documentation": "This function will return the bit-mask data that defines the current default (global) mask for the audio listeners.",
        "return": "Real"
    },
    "gamepad_button_check": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "button",
                "documentation": "Which gamepad button constant to check for."
            }
        ],
        "example": {
            "code": "if gamepad_button_check(0, gp_face1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if canshoot = true<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_play_sound(snd_Shoot, 0, false);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Bullets\", obj_Bullet)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canshoot = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alarm[0] = room_speed / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_button_check(device, button);",
        "function": "gamepad_button_check",
        "documentation": "This function will return true or false depending on whether the given gamepad button is detected as being held down or not.",
        "return": "Boolean"
    },
    "ds_list_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to remove."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_destroy(AI_list);<br> &nbsp;&nbsp;&nbsp;AI_list = -1;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_destroy(id);",
        "function": "ds_list_destroy",
        "documentation": "This function will remove the given list data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_list to prevent memory leaks that can slow down and crash your game.",
        "return": "N/A"
    },
    "part_type_exists": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to check for."
            }
        ],
        "example": {
            "code": "if !part_type_exists(global.p1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.p1 = part_type_create();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_type_exists(ind);",
        "function": "part_type_exists",
        "documentation": "With this function you can check to see if the given particle type indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle type would otherwise have its index assigned to) this will throw an error.",
        "return": "Boolean"
    },
    "path_end": {
        "parameters": [],
        "example": {
            "code": "if place_meeting(x, y, all) path_end()",
            "description": ""
        },
        "signature": "path_end();",
        "function": "path_end",
        "documentation": "Calling this function will end the current path that the instance is following.",
        "return": "N/A."
    },
    "tilemap_get_tileset": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the tile set from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_trees\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> if tilemap_get_tileset(map_id) != ts_Nighttime<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;tilemap_tileset(map_id, ts_Nighttime);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_get_tileset(tilemap_element_id);",
        "function": "tilemap_get_tileset",
        "documentation": "Using this function you can retrieve the index value of the tile set resource assigned to a given tilemap element on a layer. You give the tilemap element ID (which you get when you create a tilemap element using [layer\\_tilemap\\_create()](layer_tilemap_create.html) or when you use the function [layer\\_tilemap\\_get_id()](layer_tilemap_get_id.html)), and the function will return the tile set index value.",
        "return": "Tile Set index value (Real)"
    },
    "steam_get_user_steam_id": {
        "parameters": [],
        "example": {
            "code": "if steam_initialised()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.u_id = steam_get_user_steam_id();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_user_steam_id();",
        "function": "steam_get_user_steam_id",
        "documentation": "You can use this function to return the unique Steam **user id** of the user currently logged into the Steam client. This is a unique 64 bit value that can be used to identify individual users and _not_ their on screen user name (this can be found using the function [steam\\_get\\_persona_name](steam_get_persona_name.html)).",
        "return": "real"
    },
    "audio_emitter_create": {
        "parameters": [],
        "example": {
            "code": "s_emit = audio_emitter_create();<br>",
            "description": ""
        },
        "signature": "audio_emitter_create();",
        "function": "audio_emitter_create",
        "documentation": "This function creates a new audio emitter and returns the index for it. This index should be stored in a variable for all further functions that relate to this emitter, and then when it is no longer needed it should be removed from memory using the function [audio\\_emitter\\_free](audio_emitter_free.html) to prevent memory leaks which may eventually crash your game.",
        "return": "Real"
    },
    "window_set_colour": {
        "parameters": [
            {
                "label": "colour",
                "documentation": "The colour to set the region."
            }
        ],
        "example": {
            "code": "if window_get_colour() != c_black<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;window_set_colour(c_black);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_set_colour(colour);",
        "function": "window_set_colour",
        "documentation": "This function can set the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:  \n  \n![](images/window_set_colour.png) The above image has two views with two view ports, each one drawn at different positions. This stretches the game window to accommodate both ports and uses the window colour to colour the background where no view is shown.",
        "return": "N/A"
    },
    "colour_get_value": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to check"
            }
        ],
        "example": {
            "code": "col = make_colour_hsv(random(255), 255, colour_get_value(c_teal));",
            "description": ""
        },
        "signature": "colour_get_value(col);",
        "function": "colour_get_value",
        "documentation": "This function will return the value (luminosity) of the given colour. This is the amount of the \"light\" that is mixed into the final colour and is part of the hue, saturation and value method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour: ![](images/get_val.png)",
        "return": "Real"
    },
    "rectangle_in_rectangle": {
        "parameters": [
            {
                "label": "sx1",
                "documentation": "The x coordinate of the left side of the source rectangle."
            },
            {
                "label": "sy1",
                "documentation": "The y coordinate of the top side of the source rectangle."
            },
            {
                "label": "sx2",
                "documentation": "The x coordinate of the right side of the source rectangle."
            },
            {
                "label": "sy2",
                "documentation": "The y coordinate of the bottom side of the source rectangle."
            },
            {
                "label": "dx1",
                "documentation": "The x coordinate of the left side of the destination rectangle to check against."
            },
            {
                "label": "dy1",
                "documentation": "The y coordinate of the top side of the destination rectangle to check against."
            },
            {
                "label": "dx2",
                "documentation": "The x coordinate of the right side of the destination rectangle to check against."
            },
            {
                "label": "dy2",
                "documentation": "The y coordinate of the bottom side of the destination rectangle to check against."
            }
        ],
        "example": {
            "code": "switch(rectangle_in_rectangle(x - 50, y - 50, x + 50, y + 50, mouse_x - 50, mouse_y - 50, mouse_x + 50, mouse_y + 50))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 0: image_blend = c_yellow; break;<br> &nbsp;&nbsp;&nbsp;case 1: image_blend = c_red; break;<br> &nbsp;&nbsp;&nbsp;case 2: image_blend = c_orange; break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "rectangle_in_rectangle(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2);",
        "function": "rectangle_in_rectangle",
        "documentation": "This function will check two rectangular areas that you define to see if the source rectangle is either not in collision, completely within the destination rectangles bounds, or if they are simply touching. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:  \n![](images/rectangle_in_rectangle.png)",
        "return": "Real."
    },
    "layer_get_forced_depth": {
        "parameters": [],
        "example": {
            "code": "if layer_get_forced_depth() != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_force_draw_depth(true, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_forced_depth()",
        "function": "layer_get_forced_depth",
        "documentation": "This function can be used to retrieve the Z depth set for rendering layers within the room. See [layer\\_force\\_draw_depth](layer_force_draw_depth.html) for more information.",
        "return": "Real"
    },
    "audio_create_play_queue": {
        "parameters": [
            {
                "label": "queueFormat",
                "documentation": "The format of the buffer data to use (buffer_u8 or buffer_s16)."
            },
            {
                "label": "queueRate",
                "documentation": "The sample rate of the data in the buffer queue."
            },
            {
                "label": "queueChannels",
                "documentation": "The channels to use from one of the constants listed below."
            }
        ],
        "example": {
            "code": "audio_queue = audio_create_play_queue(buffer_s16, 11052, audio_mono);",
            "description": ""
        },
        "signature": "audio_create_play_queue(queueFormat, queueRate, queueChannels);",
        "function": "audio_create_play_queue",
        "documentation": "This function prepares a buffer queue for audio. You pass data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from one of the constants listed below:",
        "return": "Index"
    },
    "audio_emitter_get_z": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_z(emitter_player) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var ex = audio_emitter_get_x(emitter_player);<br> &nbsp;&nbsp;&nbsp;var ey = audio_emitter_get_y(emitter_player);<br> &nbsp;&nbsp;&nbsp;audio_emitter_position(emitter_player, ex, ey, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_z(emitter);",
        "function": "audio_emitter_get_z",
        "documentation": "This function returns the current z position of the given audio emitter.",
        "return": "Real"
    },
    "display_get_gui_height": {
        "parameters": [],
        "example": {
            "code": "ads_move(0, display_get_gui_height() - ads_get_display_height(0), 0);",
            "description": ""
        },
        "signature": "display_get_gui_height();",
        "function": "display_get_gui_height",
        "documentation": "With this function you can get the height (in pixels) of the GUI as used in the [Draw GUI Event](../../../../2_interface/1_editors/events/draw_events.html).",
        "return": "Real"
    },
    "gpu_get_blendmode_ext_sepalpha": {
        "parameters": [],
        "example": {
            "code": "var bm = gpu_get_blendmode_ext_sepalpha();<br> bm[0] = bm_src_alpha;<br> bm[1] = bm_inv_src_alpha;<br> gpu_set_blendmode_ext_sepalpha(bm);<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode_ext_sepalpha();",
        "function": "gpu_get_blendmode_ext_sepalpha",
        "documentation": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
        "return": "4 element 1D Array (see above for constants)"
    },
    "texture_get_texel_height": {
        "parameters": [
            {
                "label": "tex",
                "documentation": "The texture page asset pointer to use"
            }
        ],
        "example": {
            "code": "var tex = sprite_get_texture(sprite_index, 0);<br> tex_w = texture_get_texel_width(tex);<br> tex_h = texture_get_texel_height(tex);<br>",
            "description": ""
        },
        "signature": "texture_get_texel_height(tex);",
        "function": "texture_get_texel_height",
        "documentation": "A texel, or _texture element_ is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the height of a single texel from the texture page of the image asset used.",
        "return": "Real"
    },
    "current_day": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, \"Today is \" + string(current_day) + \"/\" + string (current_month) + \"/\" + string(current_year) +\".\");",
            "description": ""
        },
        "signature": "current_day;",
        "function": "current_day;",
        "documentation": "This **read only** variable will return the day as a value from 1 to 31, depending on the month.",
        "return": "Real"
    },
    "darccos": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The angle (in degrees) to return the inverse cosine of."
            }
        ],
        "example": {
            "code": "val = arccos(-1);",
            "description": ""
        },
        "signature": "darccos(val)",
        "function": "darccos",
        "documentation": "Returns the inverse cosine of x, in that if dcos(val)=n, darccos(n)=val, and the resulting number will be between 180 and 0.",
        "return": "Real"
    },
    "physics_fixture_delete": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the fixture that is to be deleted from memory"
            }
        ],
        "example": {
            "code": "var fix, inst;<br> fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(fix, 16);<br> physics_fixture_set_density(fix, 1.0);<br> inst = instance_create_layer(x, y, \"Instances\", genericBodyObject);<br> physics_fixture_bind(fix, inst);<br> physics_fixture_delete(fix);<br>",
            "description": ""
        },
        "signature": "physics_fixture_delete(fixture)",
        "function": "physics_fixture_delete",
        "documentation": "Since once a fixture has been bound to an instance that instance maintains the fixtures properties, we can remove the fixture from memory with this function, particularly if we no longer plan to use it again. Please note that failure to remove fixtures after they are no longer needed may cause a memory leak which will slow down and eventually crash your game, so you should take care to clean up properly after defining and binding fixtures.",
        "return": "N/A"
    },
    "physics_get_restitution": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the id of the bound fixture"
            }
        ],
        "example": {
            "code": "var rest = physics_get_restitution(fix_id);<br> physics_set_restitution(fix_id, rest * 2);<br>",
            "description": ""
        },
        "signature": "physics_get_restitution(fixture)",
        "function": "physics_get_restitution",
        "documentation": "When you bind a fixture to an instance using [physics\\_fixture\\_bind](physics_fixture_bind.html) this returns an \"id\" for the bound fixture. You can use this id to get the restitution (the \"bounciness\" property) value of the bound fixture, _not_ the \"base\" fixture, at any time using this function.",
        "return": "Real"
    },
    "physics_joint_friction_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "anchor_x",
                "documentation": "The x coordinate for the joint, within the game world"
            },
            {
                "label": "anchor_y",
                "documentation": "The y coordinate for the joint, within the game world"
            },
            {
                "label": "max_force",
                "documentation": "The maximum frictional force that will be applied"
            },
            {
                "label": "max_torque",
                "documentation": "The maximum rotational force that will be applied"
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var mainFixture, o_id;<br> mainFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br> o_id = instance_create_layer(x+300, y, \"Instances\", obj_Rudder);<br> physics_fixture_bind(mainFixture, id);<br> physics_fixture_bind(mainFixture, o_id);<br> physics_joint_friction_create(id, o_id, x, y, 10, 0.3, true);<br> physics_fixture_delete(mainFixture);<br>",
            "description": ""
        },
        "signature": "physics_joint_friction_create(inst1, inst2, anchor_x, anchor_y, max_force, max_torque, col)",
        "function": "physics_joint_friction_create",
        "documentation": "The friction joint is a bit different to all other joints in the physics simulation in that the connection created will not constrain the instances position or movement, but rather its speed and rotation. This works by taking the maximum input values for force and torque and applying those to the second fixture to bring the speed and angular momentum down to the same values as that of the first instance. So, if you have a stationary instance and a moving instance then connect them with a friction joint, the moving instance will gradually slow down until it too is stationary. If both instances were moving then the second instance will have its movement speed modified to match that of the first instance.  \n  \n![](images/friction_joint_image.png)",
        "return": "Index of the joint"
    },
    "room_previous": {
        "parameters": [],
        "example": {
            "code": "if room_previous(room) != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto_previous());<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_previous;",
        "function": "room_previous;",
        "documentation": "",
        "return": "Index"
    },
    "layer_y": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to set the y position of"
            },
            {
                "label": "y",
                "documentation": "The y position in the room to set the layer to"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_x(lay_id) != 0 || layer_get_x(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_x(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_y(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_y(layer_id, y)",
        "function": "layer_y",
        "documentation": "You can use this function to set the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the vertical axis of the room.",
        "return": "N/A"
    },
    "skeleton_bone_state_get": {
        "parameters": [
            {
                "label": "bone",
                "documentation": "The name (as a string) of the bone."
            },
            {
                "label": "map",
                "documentation": "The (previously created) ds_map that stores the bone data."
            }
        ],
        "example": {
            "code": "var map = ds_map_create();<br> skeleton_bone_state_get(\"head\", map);<br> var xx = ds_map_find_value(map, \"worldX\");<br> var yy = ds_map_find_value(map, \"worldY\");<br> var deltax = mouse_x - (x + xx);<br> var deltay = mouse_y - (y + yy);<br> var angle = -radtodeg(arctan2(deltay, deltax));<br> ds_map_replace(map, \"angle\", angle);<br> skeleton_bone_state_set(\"head\", map);<br> ds_map_destroy(map);<br>",
            "description": ""
        },
        "signature": "skeleton_bone_state_get(bone, map);",
        "function": "skeleton_bone_state_get",
        "documentation": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to get certain data for the named bone at any time. Note that this data refers to the **current** pose for the skeleton, depending on the animation set used, and the function requires a previously created [ds_map](../../data_structures/ds%20maps/index.html), which will then have the following keys and their equivalent values after calling the function:",
        "return": "N/A"
    },
    "get_string_async": {
        "parameters": [
            {
                "label": "String",
                "documentation": "The message to show in the dialog."
            },
            {
                "label": "default",
                "documentation": "The default string."
            }
        ],
        "signature": "get_string_async(string, default);",
        "function": "get_string_async",
        "documentation": "This function opens a window and displays message as well as a space for the user to input a string (which will contain the supplied default string to start with). This is an asynchronous function, and as such _GameMaker Studio 2_ does _not_ block the device it is being run on while waiting for answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the \"Okay\" button, an [asynchronous Dialog event](../../../2_interface/1_editors/events/async_events.html) is triggered which, for the duration of that event _only_, will have a ds_map stored in the variable async_load.",
        "return": "Real"
    },
    "buffer_save_async": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to save."
            },
            {
                "label": "filename",
                "documentation": "The name of the file to save as."
            },
            {
                "label": "offset",
                "documentation": "The offset within the buffer to save from (in bytes)."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer area to save (in bytes)."
            }
        ],
        "signature": "buffer_save_async(buffer, filename, offset, size);",
        "function": "buffer_save_async",
        "documentation": "With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the [buffer_load](buffer_load.html) function (or any of the other functions for loading buffers). The \"offset\" defines the start position within the buffer for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes). This function works asynchronously, and so the game will continue running while being saved. This function will trigger an [Asynchronous Load/Save Event](../../../2_interface/1_editors/events/async_events.html) where you can check to ensure that the save has occurred correctly.  \n  \nNote that you can save out multiple buffers in one by calling this function multiple times between calls to [buffer\\_async\\_group_begin()](buffer_async_group_begin.html) and [buffer\\_async\\_group_end()](buffer_async_group_end.html) (see those functions for further information on this).  \n  \nThe function returns a unique ID value which can then be used to check the asynchronous event async_load ID value, as shown in the extended example below. The async_load map in the event will have the following two key/value pairs:",
        "return": "Real"
    },
    "show_question": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to show in the pop-up question."
            }
        ],
        "example": {
            "code": "if score &gt; 500<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if show_question(\"Continue to next room?\")<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;room_goto(rm_Level2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else game_end();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "show_question(str);",
        "function": "show_question",
        "documentation": "This function creates a pop-up message box with two buttons for \"Yes\" and \"No\". It returns true or false depending on which one of the two buttons the user presses.",
        "return": "Boolean"
    },
    "filename_drive": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The file to use."
            }
        ],
        "example": {
            "code": "drive = filename_drive(file_find_first(working_directory + \"*.doc\", 0));<br>",
            "description": ""
        },
        "signature": "filename_drive(fname);",
        "function": "filename_drive",
        "documentation": "This function returns the drive information of the filename.",
        "return": "String."
    },
    "ini_key_exists": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section in the open .ini file to check a key in."
            },
            {
                "label": "key",
                "documentation": "The key to check for."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> if !ini_key_exists(\"save1\", \"name\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.name = \"Player1\";<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "ini_key_exists(section, key);",
        "function": "ini_key_exists",
        "documentation": "This function checks to see if a key exists in the currently open ini. This is not a necessary check to prevent errors as, when a key does not exist, reading from a non-existent key will just return a defaulted value. It can be useful to see if an ini file has saved specific data and a few other things, however.",
        "return": "N/A"
    },
    "path_clear_points": {
        "parameters": [],
        "example": {
            "code": "if path_get_number(mypath) &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_clear_points(mypath);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_clear_points(index);",
        "function": "path_clear_points",
        "documentation": "With this function you can remove all point definitions from a path, effectively making an \"empty\" path. This _does not_ delete the path, for that you should use [path_delete](path_delete.html).",
        "return": "N/A"
    },
    "sprite_set_cache_size_ext": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to change the cache size of."
            },
            {
                "label": "index",
                "documentation": "The subimage of ind to change the cache size of."
            },
            {
                "label": "max",
                "documentation": "The maximum number of cached copies of the sprite that can be stored."
            }
        ],
        "example": {
            "code": "sprite_set_cache_size_ext(sprite0, 0, 2);",
            "description": ""
        },
        "signature": "sprite_set_cache_size_ext(ind, index, max);",
        "function": "sprite_set_cache_size_ext",
        "documentation": "When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore _GameMaker Studio 2_ has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to one single given subimage of the sprite.",
        "return": ""
    },
    "buffer_decompress": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to decompress."
            }
        ],
        "example": {
            "code": "var cmpBuff = buffer_load(\"Player_Save.sav\");<br> var srcBuff = buffer_decompress(cmpBuff);<br> global.DataString = buffer_read(srcBuff, buffer_string);<br>",
            "description": ""
        },
        "signature": "buffer_decompress(buffer);",
        "function": "buffer_decompress",
        "documentation": "With this function you can decompress a previously compressed buffer using zlib compression. You supply the buffer ID to decompress, and the function will return a new buffer ID that contains the uncompressed data. If the decompression has failed (for example, you are supplying a buffer that hasn't been compressed) then the function will instead return a value less than 0.",
        "return": "Buffer ID"
    },
    "gamepad_set_colour": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to set."
            },
            {
                "label": "colour",
                "documentation": "The colour to use."
            }
        ],
        "example": {
            "code": "if health &lt; 10<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gamepad_set_colour(0, c_red);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_set_colour(device, colour);",
        "function": "gamepad_set_colour",
        "documentation": "This function can be used to set the colour of the LEDs within a PlayStation controller. You specify the device slot to set, and then give a colour, which can be any of the [colour constants](../../drawing/colour/index.html) or a colour value created using the specific colour functions or a HEX value(like $FFFFFFF).",
        "return": "N/A"
    },
    "draw_healthbar": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the healthbar"
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the healthbar"
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the healthbar"
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the healthbar"
            },
            {
                "label": "amount",
                "documentation": "The variable which defines total health (between 0 and 100)"
            },
            {
                "label": "backcol",
                "documentation": "The colour of the background for the bar"
            },
            {
                "label": "mincol",
                "documentation": "The colour of the bar when at no health (0)"
            },
            {
                "label": "maxcol",
                "documentation": "The colour of the bar when at full health (100)"
            },
            {
                "label": "direction",
                "documentation": "Where the bar is \"anchored\" (0 = left, 1 = right, 2 = top, 3 = bottom)"
            },
            {
                "label": "showback",
                "documentation": "Whether the bar's background is drawn (true) or not (false). If false, the backcol argument is disregarded."
            },
            {
                "label": "showborder",
                "documentation": "Whether the bar's elements have a 1px wide black border (true) or not (false)."
            }
        ],
        "example": {
            "code": "var pc;<br> pc = (hp / max_hp) * 100;<br> draw_healthbar(100, 100, 500, 200, pc, c_black, c_red, c_lime, 0, true, true)<br>",
            "description": ""
        },
        "signature": "draw_healthbar(x1, y1, x2, y2, amount, backcol, mincol, maxcol, direction, showback, showborder);",
        "function": "draw_healthbar",
        "documentation": "With this function you can draw a coloured bar to show a constant value. Although the function uses the word \"healthbar\" you can use this to display anything you wish as long as the amount to be displayed is a percentage value between 0 and 100 (a percentage of any value can be calculated with the formula **(CURRENT\\_Value / MAXIMUM\\_value) * 100**), so, for example, you can use this to display power, health, mana, time or anything else that would benefit from a bar display.  \n  \nYou can set various different things that change the visual aspect of the bar and these are illustrated in the image below (note that the colours used here are c_green for the maximum value and c_red for the minimum value, but you can use the colours that you wish): ![](images/draw_healthbar.png)",
        "return": "N/A"
    },
    "surface_set_target_ext": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The render target index to use (from 0 to 3)."
            },
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to use."
            }
        ],
        "example": {
            "code": "surface_set_target_ext(0, surf);",
            "description": ""
        },
        "signature": "surface_set_target_ext(index, surface_id);",
        "function": "surface_set_target_ext",
        "documentation": "This function is for use with the [Shader Functions](../../shaders/index.html) and sets the MRT (0 - 3) for native level shaders (DX9, DX11, OpenGL).",
        "return": "Boolean"
    },
    "font_set_cache_size": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the font to change the cache size of."
            },
            {
                "label": "max",
                "documentation": "The maximum number of cached copies of the font that can be stored."
            }
        ],
        "example": {
            "code": "font_set_cache_size(fnt_MainMenu, 2);",
            "description": ""
        },
        "signature": "font_set_cache_size(ind, max);",
        "function": "font_set_cache_size",
        "documentation": "When performing image blending and colouring, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore _GameMaker Studio 2_ has to temporarily save a blended copy of the images and load them in when needed. This function sets how many blended copies of the given font can be cached before old ones are overwritten. The default value is 4.",
        "return": "N/A"
    },
    "power": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The number to change."
            },
            {
                "label": "n",
                "documentation": "How many times to multiply x by itself."
            }
        ],
        "example": {
            "code": "score += power(dmg, 3);",
            "description": ""
        },
        "signature": "power(x, n);",
        "function": "power",
        "documentation": "This will return the value of a number multiplied by itself \"n\" number of times. For example, power(5,3) will multiply 5 by itself 3 times and return 125, which is the same as saying 5\\*5\\*5=125. Please note that the \"x\" value (the number to change) _cannot_ be a negative value.",
        "return": "Real"
    },
    "tilemap_set_height": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to set the height of"
            },
            {
                "label": "height",
                "documentation": "The height value (in \"cells\")"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> if tilemap_get_height(map_id) != room_height div 16<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;tilemap_set_height(map_id, room_height div 16);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_set_height(tilemap_element_id, height)",
        "function": "tilemap_set_height",
        "documentation": "This function can be used to resize a tilemap element. You give the tilemap element ID (which you get when you create a tilemap element using [layer\\_tilemap\\_create()](layer_tilemap_create.html) or when you use the function [layer\\_tilemap\\_get_id()](layer_tilemap_get_id.html)), and the new height of the tilemap in tile cells.",
        "return": "N/A"
    },
    "steam_set_stat_int": {
        "parameters": [
            {
                "label": "stat_name",
                "documentation": "The name of the statistic to set (a string)."
            },
            {
                "label": "value",
                "documentation": "The value (a 32bit integer) to set the stat to."
            }
        ],
        "example": {
            "code": "xp += 100;<br> steam_set_stat_int(\"Total_XP\", steam_get_stat_int(\"Total_XP\") + 100);<br> if steam_get_stat_int(\"Total_XP\") &gt; 1000<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !steam_get_achievement(\"Ach_1000XP\") steam_set_achievement(\"Ach_1000XP\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_set_stat_int(stat_name, value);",
        "function": "steam_set_stat_int",
        "documentation": "With this function you can set a specific statistic to a new, **signed integer**, value. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel. Examples of when you could use this are for tracking how many times the player dies or for tracking progress towards an achievement.",
        "return": "N/A"
    },
    "display_set_gui_size": {
        "parameters": [],
        "example": {
            "code": "display_set_gui_size(768, 1024);",
            "description": ""
        },
        "signature": "display_set_gui_size(width, height);",
        "function": "display_set_gui_size",
        "documentation": "",
        "return": "N/A"
    },
    "draw_texture_flush": {
        "parameters": [],
        "example": {
            "code": "draw_texture_flush();<br>",
            "description": ""
        },
        "signature": "draw_texture_flush();",
        "function": "draw_texture_flush",
        "documentation": "With this function you can remove all textures from video memory, and they will then be reloaded on first use. This is the only effective way to manage video memory when you have multiple texture pages for a game, and you should flush the texture memory between levels on your game and organise the graphics using the texture group feature to ensure that the minimum number of textures are used.",
        "return": "N/A"
    },
    "matrix_set": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of matrix to get the values of (see the constants listed above)"
            },
            {
                "label": "matrix",
                "documentation": "The matrix data as an array"
            }
        ],
        "example": {
            "code": "matrix_set(matrix_world, m_array);<br>",
            "description": ""
        },
        "signature": "matrix_set(type, matrix);",
        "function": "matrix_set",
        "documentation": "This function takes a 1D array of 16 values, corresponding to a given 4x4 matrix type, where elements \\[0 - 3\\] would be row 1, elements \\[4 -7\\] would be row 2, etc... (see the image on the [main page](index.html)). You can create such a matrix using the [matrix_build](matrix_build.html) or [matrix_get](matrix_get.html) functions or simply building the array yourself and passing that into the function. The available matrix types are _view_, _projection_ and _world_, for which you would use one of the following constants:",
        "return": "NA"
    },
    "layer_shader": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "shader",
                "documentation": "The shader index to assign to the layer"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Instances\");<br> layer_shader(lay_id, shd_Sepia);<br>",
            "description": ""
        },
        "signature": "layer_shader(layer_id, shader)",
        "function": "layer_shader",
        "documentation": "",
        "return": "N/A"
    },
    "layer_add_instance": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the instance layer to target (or the layer name as a string)"
            },
            {
                "label": "instance_id",
                "documentation": "The unique instance ID value of the instance to move over to the target layer"
            }
        ],
        "example": {
            "code": "var near = instance_nearest(x, y, obj_Tree);<br> var layer_id = layer_get_id(\"Instances Front\");<br> layer_add_instance(layer_id, near);<br>",
            "description": ""
        },
        "signature": "layer_add_instance(layer_id, instance_id)",
        "function": "layer_add_instance",
        "documentation": "",
        "return": "N/A"
    },
    "layer_force_draw_depth": {
        "parameters": [
            {
                "label": "force",
                "documentation": "Whether to enable (set to true or disable (set to false) Z depth forcing"
            },
            {
                "label": "depth",
                "documentation": "The new Z depth"
            }
        ],
        "example": {
            "code": "if !layer_is_draw_depth_forced()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_force_draw_depth(true, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_force_draw_depth(force, depth)",
        "function": "layer_force_draw_depth",
        "documentation": "This function forces _all_ layers to be drawn at the specified z depth. This **does not change the order the layers are rendered in** and they’ll still be drawn in depth order, it simply changes what z value is used. In general you do not need to worry about this, but if you have layers that have a depth outside of the legal range (-16000 to 16000) then they won't be rendered, so you can force the Z depth to a reasonable value - 0 for example - and they will all be rendered fine. Note that this is generally only for use with legacy projects from previous version of _GameMaker_ where you could have draw depths higher or lower than the permitted layer range.",
        "return": "N/A"
    },
    "shader_set_uniform_matrix_array": {
        "parameters": [
            {
                "label": "handle",
                "documentation": "The handle of the shader constant to set."
            },
            {
                "label": "array",
                "documentation": "A previously initialised array of floating point values."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> shader_params = shader_get_uniform(shader_tint, \"cMatrixArray\");<br> shader_set_uniform_matrix_array(shader_params, matrix_array);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set_uniform_matrix_array(handle, array);",
        "function": "shader_set_uniform_matrix_array",
        "documentation": "With this function you can set a shader constant to hold an array of matrix values. You must previously have gotten the \"handle\" of the constant using the function [shader\\_get\\_uniform](shader_get_uniform.html), and you will have to have previously initialised the array as an array of floating point values, where each successive group of 16 floats is a 4x4 matrix.",
        "return": "N/A"
    },
    "camera_set_end_script": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "script",
                "documentation": "The script to run each game frame"
            }
        ],
        "example": {
            "code": "camera_set_end_script(view_camera[0], endCamera);",
            "description": ""
        },
        "signature": "camera_set_end_script(camera_id, script)",
        "function": "camera_set_end_script",
        "documentation": "This function can be used to set a script that will be called at the end of every game frame that the camera is assigned to a visible and active view port, after everything for that view camera has been rendered. You give the unique camera ID value (as returned by the different camera_create functions) and the ID of the script to be called. The order in which scripts attached to cameras and the actual rendering of the camera view is as follows:",
        "return": "N/A"
    },
    "application_surface_is_enabled": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if application_surface_is_enabled()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application_surface_enable(false);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application_surface_enable(true);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "application_surface_is_enabled();",
        "function": "application_surface_is_enabled",
        "documentation": "This function will return true if the application surface is being used for drawing, or false if the screen buffer is being used.",
        "return": "Boolean"
    },
    "point_direction": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the first component of the vector"
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first component of the vector"
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second component of the vector"
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second component of the vector"
            }
        ],
        "example": {
            "code": "var ex, ey;<br> ex = instance_nearest(x, y, enemy).x;<br> ey = instance_nearest(x, y, enemy).y;<br> with (instance_create_layer(x, y, \"Bullets\", obj_Missile))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;direction = point_direction(x, y, ex, ey);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "point_direction(x1, y1, x2, y2)",
        "function": "point_direction",
        "documentation": "This function returns the direction of a vector formed by the specified components \\[x1,y1\\] and \\[x2,y2\\] in relation to the fixed x/y coordinates of the room. For example, in the image below if we want to get the direction from the player ship position to the enemy position so that we can fire a missile at the enemy then we would use this function (the exact code is in the example below the image):  \n  \n![](images/point_direction.png)",
        "return": "Real"
    },
    "physics_get_friction": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the id of the bound fixture"
            }
        ],
        "example": {
            "code": "var fric = physics_get_friction(fix_id);<br> physics_set_friction(fix_id, fric + 0.1);<br>",
            "description": ""
        },
        "signature": "physics_get_friction(fixture)",
        "function": "physics_get_friction",
        "documentation": "When you bind a fixture to an instance using [physics\\_fixture\\_bind](physics_fixture_bind.html) this returns an \"id\" for the bound fixture. You can use this id to get the friction value of the bound fixture (_not_ the \"base\" fixture) at any time using this function.",
        "return": "Real"
    },
    "layer_background_visible": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "visible",
                "documentation": "The visibility toggle, which can be true or false"
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var back = layer_background_get_id(layer);<br> &nbsp;&nbsp;&nbsp;if layer_background_get_visible(back)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_background_visible(back, false);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_background_visible(back, true);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_visible(background_element_id, visible)",
        "function": "layer_background_visible",
        "documentation": "",
        "return": "N/A"
    },
    "show_message": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to show in the pop-up message."
            }
        ],
        "example": {
            "code": "var i, tot;<br> tot = 0;<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;tot += inv[i];<br> &nbsp;&nbsp;&nbsp;}<br> show_message(\"Total = \" + string(tot));<br>",
            "description": ""
        },
        "signature": "show_message(str);",
        "function": "show_message",
        "documentation": "This function creates a pop-up message box which displays the string defined in the code and a button marked \"Ok\" to close it.",
        "return": "N/A"
    },
    "draw_set_swf_aa_level": {
        "parameters": [
            {
                "label": "AA",
                "documentation": "The anti-aliasing value to use from 0 to 1."
            }
        ],
        "example": {
            "code": "if draw_get_swf_aa_level() == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_enable_swf_aa(true);<br> &nbsp;&nbsp;&nbsp;draw_set_swf_aa_level(0.5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_set_swf_aa_level(AA);",
        "function": "draw_set_swf_aa_level",
        "documentation": "This function can be used to set the anti-aliasing (AA) level for SWF format vector sprites. This can be a real value from 0 to 1 and will \"smooth\" the edges of these sprites. Note that to see this effect, you must first have enabled AA using the function [draw\\_enable\\_swf_aa()](draw_enable_swf_aa.html).",
        "return": "N/A"
    },
    "json_decode": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The JSON format string that you are passing to the function for decoding"
            }
        ],
        "example": {
            "code": "var resultMap = json_decode(requestResult);<br> var list = ds_map_find_value(resultMap, \"default\");<br> var size = ds_list_size(list);<br> for (var n = 0; n &lt; ds_list_size(list); n++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var map = ds_list_find_value(list, n);<br> &nbsp;&nbsp;&nbsp;var curr = ds_map_find_first(map);<br> &nbsp;&nbsp;&nbsp;while (is_string(curr))<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.Name[n] = ds_map_find_value(map, \"name\");<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = ds_map_find_next(map, curr);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br> ds_map_destroy(resultMap);<br>",
            "description": ""
        },
        "signature": "json_decode(string)",
        "function": "json_decode",
        "documentation": "JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:",
        "return": "ds_map id or -1 if it fails"
    },
    "phy_speed_x": {
        "parameters": [],
        "example": {
            "code": "if phy_speed_x != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_speed_x = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_speed_x;",
        "function": "phy_speed_x;",
        "documentation": "This variable can be used to get or to change the x component the instances linear speed vector and is defined in pixels per step (for pixels per second, see [phy\\_linear\\_velocity_x](phy_linear_velocity_x.html)). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
        "return": "Real"
    },
    "physics_particle_draw_ext": {
        "parameters": [
            {
                "label": "typemask",
                "documentation": "The mask to compare the particles flags with."
            },
            {
                "label": "category",
                "documentation": "The user defined category to draw (use 0 to draw all categories)."
            },
            {
                "label": "sprite",
                "documentation": "The sprite to use for each particle."
            },
            {
                "label": "subimg",
                "documentation": "The image_index of the sprite to draw."
            },
            {
                "label": "xscale",
                "documentation": "The scale factor to apply to the sprite along the x axis."
            },
            {
                "label": "yscale",
                "documentation": "The scale factor to apply to the sprite along the y axis."
            },
            {
                "label": "ang",
                "documentation": "The angle (in degrees) to draw the sprite at."
            },
            {
                "label": "col",
                "documentation": "The colour to blend with the sprite (default is c_white)."
            },
            {
                "label": "alpha",
                "documentation": "The alpha value to use when drawing (0 - 1)."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> physics_particle_draw_ext(flags, 2, sprBlob, 0, 2, 2, 0, c_white, 0.5);<br>",
            "description": ""
        },
        "signature": "physics_particle_draw_ext(typemask, category, sprite, subimg, xscale, yscale, ang, col, alpha)",
        "function": "physics_particle_draw_ext",
        "documentation": "This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the flags when creating the particles (see the functions [physics\\_particle\\_create](physics_particle_create.html) for an example), ie: using the bitwise _or_ \"|\" to mask off the appropriate bits for each flag.",
        "return": "N/A"
    },
    "ds_map_secure_save": {
        "parameters": [
            {
                "label": "map",
                "documentation": "The id of the data structure to use."
            },
            {
                "label": "filename",
                "documentation": "The name of the file to save the map to."
            }
        ],
        "example": {
            "code": "ds_map_secure_save(purchase_map, \"p_data.dat\");",
            "description": ""
        },
        "signature": "ds_map_secure_save(map, filename);",
        "function": "ds_map_secure_save",
        "documentation": "This function will save the contents of the given ds_map to a file. The file itself can have almost any extension (for example, *.dat, *.json, *.bin, etc...) and will be encrypted and stored to a safe location on the target platform. In this way you can store sensitive information, like in app purchase details or passwords, locally in a secure way. you can then re-load the ds_map using the function [ds\\_map\\_secure_load()](ds_map_secure_load.html).",
        "return": "Boolean"
    },
    "draw_getpixel_ext": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the pixel to check"
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the pixel to check"
            }
        ],
        "example": {
            "code": "col = draw_getpixel_ext(mouse_x, mouse_y);<br> alpha = (col &gt;&gt; 24) &amp; 255;<br> blue = (col &gt;&gt; 16) &amp; 255;<br> green = (col &gt;&gt; 8) &amp; 255;<br> red = col &amp; 255;<br>",
            "description": ""
        },
        "signature": "draw_getpixel_ext(x, y);",
        "function": "draw_getpixel_ext",
        "documentation": "With this function you can get the full **abgr 32bit** value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used.  \n  \n_**NOTE:** This function is slow and so should only be used when absolutely necessary._",
        "return": "Real"
    },
    "gpu_push_state": {
        "parameters": [],
        "example": {
            "code": "gpu_push_state();<br> gpu_set_blendmode(bm_add);<br> gpu_set_blendenable(false);<br> gpu_set_cullmode(true);<br> with (obj_Effect_Parent)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_self();<br> &nbsp;&nbsp;&nbsp;}<br> gpu_pop_state();<br> <br>",
            "description": ""
        },
        "signature": "gpu_push_state();",
        "function": "gpu_push_state",
        "documentation": "With this function you can push the current GPU state onto a stack to be used later. You would generally use this if you want to \"save\" the current GPU state (things like blend mode, alpha writing, culling, etc... will all be pushed to the stack), then draw something with different settings, and then reset the GPU stack to what it was before (by calling [gpu\\_pop\\_state](gpu_pop_state.html)).",
        "return": "N/A"
    },
    "angle_difference": {
        "parameters": [
            {
                "label": "ang1",
                "documentation": "The first angle to use."
            },
            {
                "label": "ang2",
                "documentation": "The second angle to use."
            }
        ],
        "example": {
            "code": "var pd = point_direction(x, y, mouse_x, mouse_y);<br> var dd = angle_difference(image_angle, pd);<br> image_angle -= min(abs(dd), 10) * sign(dd);<br>",
            "description": ""
        },
        "signature": "angle_difference(ang1, ang2)",
        "function": "angle_difference",
        "documentation": "This function will return the smallest angle difference between two angles as a value between -180 and 180 degrees (where a positive angle is anti-clockwise and a negative angle clockwise).",
        "return": "Real"
    },
    "network_create_server_raw": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of server to create (see the constants listed below)."
            },
            {
                "label": "port",
                "documentation": "The port that the server will use."
            },
            {
                "label": "max_client",
                "documentation": "The maximum number of clients that can connect at once."
            }
        ],
        "example": {
            "code": "var port = 6510;<br> server = network_create_server_raw(network_socket_tcp, port, 32);<br> while (server &lt; 0 &amp;&amp; port &lt; 65535)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;port++<br> &nbsp;&nbsp;&nbsp;server = network_create_server(network_socket_tcp, port, 32);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "network_create_server_raw(type, port, max_client);",
        "function": "network_create_server_raw",
        "documentation": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU wonï¿½t be able to handle the processing of that number of players, so use with care). The function returns a unique _id_ which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
        "return": "Real"
    },
    "path_shift": {
        "parameters": [],
        "example": {
            "code": "path_shift(mypath, 50, 50);<br>",
            "description": ""
        },
        "signature": "path_shift(index, xshift, yshift);",
        "function": "path_shift",
        "documentation": "With this function you can shift a path along the horizontal and vertical axis. Please note that this will have no visible effect in-game if the instance following the path being shifted follows it relatively (rather than absolutely) as the path's position is disregarded then. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.",
        "return": "N/A"
    },
    "skeleton_animation_list": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The sprite index of the Spine skeletal animation to get the list from."
            },
            {
                "label": "list",
                "documentation": "The ID of the DS list to populate with the animation names."
            }
        ],
        "example": {
            "code": "var list = ds_list_create();<br> skeleton_animation_list(sprite_index, list);<br> for (var i = 1; i &lt; ds_list_size(list); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_animation_mix(list[| 0], list[| i], 0.5);<br> &nbsp;&nbsp;&nbsp;}<br> ds_list_destroy(list);<br>",
            "description": ""
        },
        "signature": "skeleton_animation_list(sprite, list);",
        "function": "skeleton_animation_list",
        "documentation": "With this function you can populate a (pre-created) [ds_list](../../data_structures/ds%20lists/index.html) with all the names of the animations included as part of the skeletal animation sprite. The names will be strings and can then be used in the other animation functions for these types of sprite.",
        "return": "N/A"
    },
    "ds_list_replace": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to change."
            },
            {
                "label": "pos",
                "documentation": "The position to replace the value, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1."
            },
            {
                "label": "val",
                "documentation": "The new value to replace the given value with."
            }
        ],
        "example": {
            "code": "ds_list_replace(n_list, 3, name);",
            "description": ""
        },
        "signature": "ds_list_replace(id, pos, val);",
        "function": "ds_list_replace",
        "documentation": "This function will replace the value at the given position for another one.",
        "return": "N/A"
    },
    "gpu_set_fog": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable or disable fog"
            },
            {
                "label": "colour",
                "documentation": "The fog colour"
            },
            {
                "label": "start",
                "documentation": "The distance to start applying fog from"
            },
            {
                "label": "end",
                "documentation": "The distance to end the fog"
            }
        ],
        "example": {
            "code": "var fog_a = gpu_get_fog();<br> fog_a[1] = c_red;<br> gpu_set_fog(fog_a);<br>",
            "description": ""
        },
        "signature": "gpu_set_fog(enable, colour, start, end);",
        "function": "gpu_set_fog",
        "documentation": "This function can be used to enable or disable fog drawing. Fog can be used in 3D games to make instances in the distance look blurred or even disappear, which helps in creating atmosphere as well as masking the fact that you are not drawing instances that are far away. You set whether it is enabled (true) or disabled (false), the colour that the fog should use for blending, as well as the start and end draw distances. Note that the fog start indicates the radius relative to the view camera where the fog starts, and the fog end indicates at which radius (also relative) instances will be completely invisible.",
        "return": "N/A"
    },
    "physics_fixture_set_density": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "density",
                "documentation": "the density of the fixture calculated as kg/m²"
            }
        ],
        "example": {
            "code": "physics_fixture_set_density(fix_Balloon, 0.1);",
            "description": ""
        },
        "signature": "physics_fixture_set_density(fixture, density)",
        "function": "physics_fixture_set_density",
        "documentation": "The density of something is defined as its mass per unit volume, which basically means _how much mass is crammed into the space it takes up in the world_. So, a balloon would have a low density as it has little mass that occupies a large space, while a lead bar would have a high density as it has a great mass, yet occupies little space.  \n  \n![](images/physics_fixture_set_density_image.png)",
        "return": "N/A"
    },
    "phy_position_x": {
        "parameters": [],
        "example": {
            "code": "xx = phy_position_x;<br> yy = phy_position_y;<br>",
            "description": ""
        },
        "signature": "phy_position_x;",
        "function": "phy_position_x;",
        "documentation": "This variable can be used to get (or to set) the x position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the continuous simulation.",
        "return": "Real"
    },
    "room_get_name": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to check the name of."
            }
        ],
        "example": {
            "code": "var roomname = room_get_name(room);<br> draw_text(32, 32, roomname);<br>",
            "description": ""
        },
        "signature": "room_get_name(index);",
        "function": "room_get_name",
        "documentation": "",
        "return": "String"
    },
    "ds_grid_multiply_grid_region": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the destination grid."
            },
            {
                "label": "source",
                "documentation": "The index of the source grid."
            },
            {
                "label": "x1",
                "documentation": "The left position of the region of cells to copy from the source grid."
            },
            {
                "label": "y1",
                "documentation": "The top position of the region of cells to copy from the source grid."
            },
            {
                "label": "x2",
                "documentation": "The right position of the region of cells to copy from the source grid."
            },
            {
                "label": "y2",
                "documentation": "The bottom position of the region of cells to copy from the source grid."
            },
            {
                "label": "xpos",
                "documentation": "The x position on the destination grid to multiply the source region with."
            },
            {
                "label": "ypos",
                "documentation": "The y position on the destination grid to multiply the source region with."
            }
        ],
        "example": {
            "code": "ds_grid_multiply_grid_region(mygrid, mygrid, 0, 0, 5, 5, 0, 0)<br>",
            "description": ""
        },
        "signature": "ds_grid_multiply_grid_region(index, source, x1, y1, x2, y2, xpos, ypos);",
        "function": "ds_grid_multiply_grid_region",
        "documentation": "With this function you can define an area within a given ds\\_grid, then take those values and multiply them with those found in a separate region of either the same ds\\_grid, or another one (which has been previously created). The original region will remain unchanged, while the region that they have been multiplied with will now store the new values for each cell.",
        "return": "N/A"
    },
    "ds_grid_value_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The x position of the left of the region in the grid."
            },
            {
                "label": "y1",
                "documentation": "The y position of the top of the region in the grid."
            },
            {
                "label": "x2",
                "documentation": "The x position of the right of the region in the grid."
            },
            {
                "label": "y2",
                "documentation": "The y position of the bottom of the region in the grid."
            },
            {
                "label": "val",
                "documentation": "The value to find."
            }
        ],
        "example": {
            "code": "if ds_grid_value_exists(grid, 0, 1, 5, 6, val)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;xpos = ds_grid_value_x(grid, 0, 1, 5, 6, val);<br> &nbsp;&nbsp;&nbsp;ypos = ds_grid_value_y(grid, 0, 1, 5, 6, val);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_value_exists(index, x1, y1, x2, y2, val);",
        "function": "ds_grid_value_exists",
        "documentation": "With this function you can check to see if a specific value (real or string) is present within a rectangular area of a given ds_grid. If it is present the function will return true otherwise it will return false.",
        "return": "Boolean"
    },
    "gpu_get_tex_mip_filter": {
        "parameters": [
            {
                "label": "tf_point",
                "documentation": "This means that blending between mipmap levels is disabled, which can cause visible texture transitions, but gives the best performance."
            },
            {
                "label": "tf_linear",
                "documentation": "This means that blending between mipmap levels is enabled (this is also known as trilinear filtering), which smooths the texture transitions, but it will give a minor hit to performance."
            },
            {
                "label": "tf_anisotropic",
                "documentation": "This means that anisotropic filtering is enabled, which greatly improves texture transition quality and can reduce the blurring visible with other filtering modes, but it has the highest hit on performance."
            }
        ],
        "example": {
            "code": "if keyboard_check(ck_enter)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;switch(gpu_get_tex_mip_filter())<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case tf_point: gpu_set_tex_mip_filter(tf_linear); break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case tf_linear: gpu_set_tex_mip_filter(tf_anisotropic); break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case tf_anisotropic: gpu_set_tex_mip_filter(tf_point); break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_mip_filter();",
        "function": "gpu_get_tex_mip_filter",
        "documentation": "With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.",
        "return": "Constant (listed below):"
    },
    "steam_ugc_set_item_content": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "content",
                "documentation": "The content (a path) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_set_item_content(ugc_update_handle, content);",
        "function": "steam_ugc_set_item_content",
        "documentation": "This function will set the content path to be used for the given item, and it should be a relative path to the folder which contains the content files to upload - which in turn should be in the save are _or_ the game bundle (ie: an included file). The update handle is the value returned when you called the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html). The function will return true if the API was successfully accessed and false if there was an issue.",
        "return": "Boolean"
    },
    "audio_create_buffer_sound": {
        "parameters": [
            {
                "label": "bufferId",
                "documentation": "The ID of the buffer to use."
            },
            {
                "label": "bufferFormat",
                "documentation": "The format of the data in the buffer (buffer_u8 or buffer_s16)."
            },
            {
                "label": "bufferRate",
                "documentation": "The sample rate of the data in the buffer."
            },
            {
                "label": "bufferOffset",
                "documentation": "The offset into the buffer to read the sample data from (in bytes)."
            },
            {
                "label": "bufferLength",
                "documentation": "The length of the buffer (the number of the samples in the buffer)."
            },
            {
                "label": "bufferChannels",
                "documentation": "The channels to use from one of the constants listed below."
            }
        ],
        "example": {
            "code": "rate = 44100;<br> hertz = irandom_range(220, 880);<br> samples = 44100;<br> bufferId = buffer_create(rate, buffer_fast, 1);<br> buffer_seek(bufferId, buffer_seek_start, 0);<br> num_to_write = rate / hertz;<br> val_to_write = 1;<br> for (var i = 0; i &lt; (samples / num_to_write) + 1; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;for (var j = 0; j &lt; num_to_write; j++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer_write(bufferId, buffer_u8, val_to_write * 255);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;val_to_write = (1 - val_to_write);<br> &nbsp;&nbsp;&nbsp;}<br> soundId = audio_create_buffer_sound(bufferId, buffer_u8, rate, 0, 44100, audio_mono);<br>",
            "description": ""
        },
        "signature": "audio_create_buffer_sound(bufferId, bufferFormat, bufferRate, bufferOffset, bufferLength, bufferChannels);",
        "function": "audio_create_buffer_sound",
        "documentation": "With this function you can create a new sound from the contents of a buffer. The buffer will have been created previously (see the [buffer functions](../buffers/index.html) for details on how to do this), and have had data added or loaded into it. You then pass it to this function with the data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and an offset into the buffer to get the data from. You also need to supply the number of samples in the buffer and the channels that the sound requires. These channels are defined by one of the following constants:",
        "return": "Index"
    },
    "ini_read_real": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section of the .ini to read from."
            },
            {
                "label": "key",
                "documentation": "The key within the relevant section of the .ini to read from."
            },
            {
                "label": "default",
                "documentation": "The value to return if a value is not found in the defined place (or the .ini file does not exist). Must be a real number."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> score = ini_read_real(\"save1\", \"score\", 0 );<br> ini_close();",
            "description": ""
        },
        "signature": "ini_read_real(section, key, default);",
        "function": "ini_read_real",
        "documentation": "You can use this function to read a number from an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** \\- **value** pairs. So a typical ini file would look something like this: ![](iniexample.png)",
        "return": "Real"
    },
    "layer_get_script_end": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "if layer_get_script_end(layer) == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_script_end(layer, scr_ResetShaderValues);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_script_end(layer_id);",
        "function": "layer_get_script_end",
        "documentation": "This function returns the script index of the script assigned to run at the end of rendering the given layer, or it will return -1 if no script is assigned. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact).",
        "return": "Script Index (Real) or -1 if no script is assigned"
    },
    "timeline_exists": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the time line to check for."
            }
        ],
        "example": {
            "code": "if timeline_exists(global.tl) timeline_delete(global.tl);",
            "description": ""
        },
        "signature": "timeline_exists(ind);",
        "function": "timeline_exists",
        "documentation": "With this function you can check and see whether a time line exists (returns true) or not (returns false). This is particularly useful when creating Timelines dynamically using the [timeline_add](timeline_add.html) function, but you should note that if you search for an uninitialised variable (that would otherwise be assigned to a time line's index) an error will be thrown.",
        "return": "Boolean"
    },
    "cloud_file_save": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The file to be uploaded (as a string)."
            },
            {
                "label": "description",
                "documentation": "A brief description of the data being stored."
            }
        ],
        "example": {
            "code": "var t_str = \"\";<br> for (var i = 0; i &lt; 10; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;t_str += string(global.Highscore[i]) + \"|\"<br> &nbsp;&nbsp;&nbsp;}<br> var file = file_text_open_write(\"Highscores.txt\");<br> file_text_write_string(file, t_str);<br> file_text_close(file);<br> save_check = cloud_file_save(\"Highscores.txt\", \"Current Highscores\");<br>",
            "description": ""
        },
        "signature": "cloud_file_save(file, description);",
        "function": "cloud_file_save",
        "documentation": "This function will commit a file to the chosen cloud service for storage. The function will return a unique **id** value that should then be used in the appropriate asynchronous event to identify the ds_map that is returned as a \"call back\" from the cloud service. The file should contain _all_ the information that you need to save for your game as you can only store one single \"data blob\" to the cloud, and running this function again will overwrite any previously stored values (as will using the [cloud\\_string\\_save](cloud_string_save.html) function). The description should be a short string of information that describes the save, eg: \"Level2, Stage2\".",
        "return": "Real"
    },
    "audio_resume_sound": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to resume."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause;<br> &nbsp;&nbsp;&nbsp;if global.Pause<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_pause_sound(snd_Waterfall);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_resume_sound(snd_Waterfall);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_resume_sound(index);",
        "function": "audio_resume_sound",
        "documentation": "With this function you can resume any sound that is currently paused (after using the function [audio\\_pause\\_sound](audio_pause_sound.html)). The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset, in which case _all_ instances of the given sound will be re-started.",
        "return": "N/A"
    },
    "view_xport": {
        "parameters": [],
        "example": {
            "code": "view_xport[0] = 0;<br> view_yport[0] = 0;<br>",
            "description": ""
        },
        "signature": "view_xport[0 .. 7];",
        "function": "view_xport[0 .. 7];",
        "documentation": "",
        "return": "Real"
    },
    "draw_getpixel": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the pixel to check"
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the pixel to check"
            }
        ],
        "example": {
            "code": "draw_set_colour(draw_getpixel(500,200))",
            "description": ""
        },
        "signature": "draw_getpixel(x, y);",
        "function": "draw_getpixel",
        "documentation": "With this function you can get the colour value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used. Note that this will _not_ return any alpha values, for that you should use [draw\\_getpixel\\_ext](draw_getpixel_ext.html).  \n  \n_**NOTE:** This function is incredibly slow and so should only be used when absolutely necessary._",
        "return": "Real"
    },
    "effect_create_below": {
        "parameters": [
            {
                "label": "kind",
                "documentation": "The kind of effect (use one of the constants listed here)."
            },
            {
                "label": "x",
                "documentation": "The x positioning of the effect if relevant."
            },
            {
                "label": "y",
                "documentation": "The y positioning of the effect if relevant."
            },
            {
                "label": "size",
                "documentation": "The size of the effect."
            },
            {
                "label": "colour",
                "documentation": "The colour of the effect."
            }
        ],
        "example": {
            "code": "if speed &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_below(ef_smoke, x, y, 0, c_gray);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "effect_create_below(kind, x, y, size, colour);",
        "function": "effect_create_below",
        "documentation": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other [ef_rain](ef_rain.html) or [ef_snow](ef_snow.html) then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
        "return": "N/A"
    },
    "ef_spark": {
        "parameters": [],
        "example": {
            "code": "if power<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_spark, bbox_left + random(sprite_width), bbox_top + random(sprite_height), choose(0, 1), merge_colour(c_white, c_yellow, random(1));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_spark;",
        "function": "ef_spark;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a spark effect as illustrated in the image below:  \n  \n![](images/ef_spark.png)",
        "return": "N/A."
    },
    "physics_pause_enable": {
        "parameters": [
            {
                "label": "flag",
                "documentation": "This can be set to true to pause the simulation, or false to start it again."
            }
        ],
        "example": {
            "code": "if os_is_paused()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_pause_enable(true);<br> &nbsp;&nbsp;&nbsp;instance_deactivate_all(true);<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Controllers\", obj_PauseMenu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_pause_enable(flag)",
        "function": "physics_pause_enable",
        "documentation": "Normally for a physics simulation to work, it must be continuous and cannot be stopped and started, or have instances suddenly moved from one place to another in the room. However, there are moments when you _need_ to pause the simulation as (for example) the device os has paused, and so you would use this function. It pauses the simulation if the flag is set to true and no further physics calculations will be done until the flag is set to false again.  \n  \n_**NOTE:** This is of particular use should you wish to deactivate all the instances in a room as even when deactivated a physical body will still continue being calculated and simulated in the physics world._",
        "return": "N/A"
    },
    "keyboard_lastchar": {
        "parameters": [],
        "example": {
            "code": "if keyboard_lastkey != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;str += keyboard_lastchar;<br> &nbsp;&nbsp;&nbsp;keyboard_lastkey = -1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_lastchar;",
        "function": "keyboard_lastchar;",
        "documentation": "This variable stores a string of the last key pressed. This variable is _not_ read only and you can change it, for example to set it to \"\" (an empty string) if you handled it already.",
        "return": "String"
    },
    "draw_clear": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour with which the screen will be cleared"
            }
        ],
        "example": {
            "code": "draw_clear(c_blue);",
            "description": ""
        },
        "signature": "draw_clear(col);",
        "function": "draw_clear",
        "documentation": "This function can be used to clear the entire screen (with no alpha blend) to the given colour, and is only for use in the draw event of an instance (it will not show if used in any other event). It can also be useful for clearing [surfaces](../surfaces/index.html) when they are newly created.",
        "return": "N/A"
    },
    "vertex_format_add_textcoord": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_textcoord();<br> vertex_format_add_position_3d();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_add_textcoord();",
        "function": "vertex_format_add_textcoord",
        "documentation": "Tell _GameMaker Studio 2_ to accept texture position data (u and v) as part of the new vertex format being created.",
        "return": "N/A"
    },
    "ini_key_delete": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section to delete a key from."
            },
            {
                "label": "key",
                "documentation": "The key to delete."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> ini_write_real(\"save1\",\"Score\",score);<br> ini_key_delete(\"save1\",\"Score\");<br> ini_close();",
            "description": ""
        },
        "signature": "ini_key_delete(section, key);",
        "function": "ini_key_delete",
        "documentation": "With this function you can remove the selected key (and its corresponding value) from an ini file.",
        "return": "N/A"
    },
    "date_date_string": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to use."
            }
        ],
        "example": {
            "code": "str = date_date_string(date_current_datetime());<br> draw_text(32, 32, str);<br>",
            "description": ""
        },
        "signature": "date_date_string(date);",
        "function": "date_date_string",
        "documentation": "With this function you can create a string containing the given date, formatted as day/month/year.",
        "return": "String"
    },
    "layer_background_alpha": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "alpha",
                "documentation": "The alpha for background sprite, from 0 to 1 (default is 1)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> layer_background_alpha(back_id, random(1));<br>",
            "description": ""
        },
        "signature": "layer_background_alpha(background_element_id, alpha);",
        "function": "layer_background_alpha",
        "documentation": "",
        "return": "N/A"
    },
    "layer_get_target_room": {
        "parameters": [],
        "example": {
            "code": "if layer_get_target_room() != room<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_reset_target_room();<br> &nbsp;&nbsp;&nbsp;}<br> ();<br>",
            "description": ""
        },
        "signature": "layer_get_target_room()",
        "function": "layer_get_target_room",
        "documentation": "This function will return the current room being targeted by the layer functions. See [layer\\_set\\_target_room()](layer_set_target_room.html) for more information.",
        "return": "Room ID (real)"
    },
    "webgl_enabled": {
        "parameters": [],
        "example": {
            "code": "if webgl_enabled global.quality = 1 else global.quality = 0;",
            "description": ""
        },
        "signature": "webgl_enabled",
        "function": "webgl_enabled",
        "documentation": "This **read-only** variable will return whether WebGL is enabled (true) or not (false) for your game. It will only work for those games running through a browser (ie: HTML5), and for all other platforms it will return true.",
        "return": "Boolean"
    },
    "camera_get_update_script": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var scr = camera_get_update_script(camera_view[0]);<br> if scr != scr_cutscene<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_update_script(camera_view[0], scr_cutscene);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_update_script(camera_id)",
        "function": "camera_get_update_script",
        "documentation": "This function can be used to retrieve the ID of the script assigned as the update script for the given camera. If no script is assigned then the function will return -1.",
        "return": "Script ID or -1 if no script assigned"
    },
    "display_mouse_get_x": {
        "parameters": [],
        "example": {
            "code": "my_x = display_mouse_get_x();",
            "description": ""
        },
        "signature": "display_mouse_get_x();",
        "function": "display_mouse_get_x",
        "documentation": "",
        "return": "Real"
    },
    "room_next": {
        "parameters": [],
        "example": {
            "code": "if room_next(room) != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto_next());<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_next;",
        "function": "room_next;",
        "documentation": "",
        "return": "Index"
    },
    "sprite_get_height": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to find the height of."
            }
        ],
        "example": {
            "code": "if sprite_height != sprite_get_height(sprite_index)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_yscale = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_get_height(index);",
        "function": "sprite_get_height",
        "documentation": "With this function you can find the height of the base resource sprite, with no transforms, in pixels.",
        "return": ""
    },
    "steam_get_user_persona_name": {
        "parameters": [
            {
                "label": "steamID",
                "documentation": "The unique Steam ID for a user."
            }
        ],
        "example": {
            "code": "request = steam_get_user_persona_name(global.UGC_UserID);",
            "description": ""
        },
        "signature": "steam_get_user_persona_name(steamID);",
        "function": "steam_get_user_persona_name",
        "documentation": "This function can be used to retrieve the user name (screen name) for any specific user ID. You give the user ID then the function returns a unique async ID value which can be used to check the details correctly in the Steam Async event. This event will have the async_load DS map which will be populated with the following key/value pairs:",
        "return": "Real"
    },
    "audio_destroy_sync_group": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to be destroyed."
            }
        ],
        "example": {
            "code": "audio_destroy_sync_group(sg);<br>",
            "description": ""
        },
        "signature": "audio_destroy_sync_group(group_index);",
        "function": "audio_destroy_sync_group",
        "documentation": "Audio sync groups need to be destroyed when not in use to free up the memory and sound resources associated with them using this function. It takes the group index as returned when the group was created using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html), and frees all resources used by the group.",
        "return": "N/A"
    },
    "view_set_yport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "y",
                "documentation": "The new y position"
            }
        ],
        "example": {
            "code": "if view_get_yport(0) != (display_get_height() / 2) - (view_hport[0] / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_yport(0, (display_get_height() / 2) - (view_hport[0] / 2));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_set_yport(view_port, y)",
        "function": "view_set_yport",
        "documentation": "This function can be used to set the y position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.",
        "return": "N/A"
    },
    "vertex_position": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "x",
                "documentation": "The x position."
            },
            {
                "label": "y",
                "documentation": "The y position."
            }
        ],
        "example": {
            "code": "vertex_position(buff, x - 100, y - 125);",
            "description": ""
        },
        "signature": "vertex_position(buffer, x, y);",
        "function": "vertex_position",
        "documentation": "This function will add 2D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x and y position for drawing.",
        "return": "N/A"
    },
    "script_execute": {
        "parameters": [
            {
                "label": "scr",
                "documentation": "the name of the script that you want to call"
            },
            {
                "label": "arg0 ... arg14",
                "documentation": "The different arguments that you want to pass through to the script"
            }
        ],
        "example": {
            "code": "script_execute(choose(scr_Up, scr_Down, scr_Left, scr_Right), irandom(5));<br>",
            "description": ""
        },
        "signature": "script_execute(scr, arg0, arg1, arg2, ...);",
        "function": "script_execute",
        "documentation": "There are times that you may want to pass a script to an instance in a dynamic way, and for these cases we provide the script_execute function. It will run a user created script resource and pass up to 15 arguments to that script. For more information about scripts, see [Scripts](../../3_gml_overview/3_scripts.html).",
        "return": "N/A"
    },
    "audio_sound_gain": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to set the gain for."
            },
            {
                "label": "volume",
                "documentation": "Value for the music volume."
            },
            {
                "label": "time",
                "documentation": "The length for the change in gain in milliseconds."
            }
        ],
        "example": {
            "code": "if val<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var snd = audio_play_sound(snd_fountain);<br> &nbsp;&nbsp;&nbsp;audio_sound_gain(snd, 0, 0);<br> &nbsp;&nbsp;&nbsp;audio_sound_gain(snd, 1, 5000);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sound_gain(index, volume, time);",
        "function": "audio_sound_gain",
        "documentation": "With this function you can fade a sound in or out over a given length of time, or it can be used to set the sound gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the sound to have reached by the end of that time. This gain can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. To instantly change the gain, simply set the time argument to 0.",
        "return": "N/A"
    },
    "window_set_size": {
        "parameters": [
            {
                "label": "w",
                "documentation": "The new width of the window."
            },
            {
                "label": "h",
                "documentation": "The new height of the window."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.scale += 1;<br> &nbsp;&nbsp;&nbsp;window_set_size(200 * global.scale, 150 * global.scale);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_set_size( w, h );",
        "function": "window_set_size",
        "documentation": "",
        "return": "N/A"
    },
    "physics_particle_group_get_ang_vel": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "ang_v = physics_particle_group_get_ang_vel(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_ang_vel(group)",
        "function": "physics_particle_group_get_ang_vel",
        "documentation": "With this function you can retrieve the angular velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "room_instance_clear": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to clear all instances in."
            }
        ],
        "example": {
            "code": "global.rm = room_add();<br> room_assign(rm_Base, global.rm);<br> room_instance_clear(global.rm);<br>",
            "description": ""
        },
        "signature": "room_instance_clear(index);",
        "function": "room_instance_clear",
        "documentation": "",
        "return": "N/A"
    },
    "layer_set_visible": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "visible",
                "documentation": "Whether the layer should be visible (true) or not (false)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Instances\");<br> if layer_get_visible(lay_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_set_visible(lay_id, false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_set_visible(lay_id, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_set_visible(layer_id, visible)",
        "function": "layer_set_visible",
        "documentation": "",
        "return": "N/A"
    },
    "camera_get_begin_script": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var scr = camera_get_begin_script(camera_view[0]);<br> if scr != scr_cutscene<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_update_script(camera_view[0], scr_cutscene);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_begin_script(camera_id)",
        "function": "camera_get_begin_script",
        "documentation": "This function can be used to retrieve the ID of the script assigned as the begin script for the given camera. If no script is assigned then the function will return -1.",
        "return": "Script ID or -1 if no script assigned"
    },
    "window_set_min_width": {
        "parameters": [
            {
                "label": "width",
                "documentation": "The minimum width in pixels for the game window."
            }
        ],
        "example": {
            "code": "window_set_min_width(640);<br> window_set_min_height(480);<br> window_set_max_width(1280);<br> window_set_max_height(960);<br>",
            "description": ""
        },
        "signature": "window_set_min_width(width);",
        "function": "window_set_min_width",
        "documentation": "",
        "return": "N/A"
    },
    "ds_grid_get_max": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The left cell column of the region."
            },
            {
                "label": "y1",
                "documentation": "The top cell row of the region."
            },
            {
                "label": "x2",
                "documentation": "The right cell column of the region."
            },
            {
                "label": "y2",
                "documentation": "The bottom cell row of the region."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_max(grid, 0, 0, 5, 5)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_max(index, x1, y1, x2, y2);",
        "function": "ds_grid_get_max",
        "documentation": "This function can be used to find the maximum value for all the cells found within the defined region of a grid, as shown in the image below: ![](ds_grid_get_max.png)",
        "return": "Real or String"
    },
    "debug_mode": {
        "parameters": [],
        "example": {
            "code": "if debug_mode<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ini_open(\"Cheats.ini\");<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ini_open(\"Game.ini\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "debug_mode",
        "function": "debug_mode",
        "documentation": "This **read only** variable returns true when the game is being played in debug mode and false when being played as normal.",
        "return": "Boolean"
    },
    "font_get_last": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "num = font_get_last(fnt_Main);",
            "description": ""
        },
        "signature": "font_get_last(ind);",
        "function": "font_get_last",
        "documentation": "When defining a font in _GameMaker Studio 2_, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an _image_ of the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that your game will need so as to keep texture memory as optimised as possible. This function can be used to find the last character (as an UTF8 value) that was used when your font asset was added to your game.",
        "return": "Real"
    },
    "game_set_speed": {
        "parameters": [
            {
                "label": "speed",
                "documentation": "The new game speed (as either FPS or MPF)."
            },
            {
                "label": "type",
                "documentation": "The type of method used to set the game speed (see the constants above)."
            }
        ],
        "example": {
            "code": "if os_browser == browser_not_a_browser<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;game_set_speed(60, gamespeed_fps);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;game_set_speed(30, gamespeed_fps);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "game_set_speed(speed, type);",
        "function": "game_set_speed",
        "documentation": "This function can be used to set the game speed. You can set this in one of two ways - as either game frames per second (FPS) or as microseconds per game frame (MPF) - using one of the following two constants:",
        "return": "N/A"
    },
    "highscore_name": {
        "parameters": [
            {
                "label": "place",
                "documentation": "The place on the table (1-10)."
            }
        ],
        "example": {
            "code": "var i;<br> i = 10;<br> repeat(10)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;name[i] = highscore_name(i);<br> &nbsp;&nbsp;&nbsp;i -= 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "highscore_name(place);",
        "function": "highscore_name",
        "documentation": "With this function you can retrieve the name string that has been stored in the high score list at the given position. If no name has been entered, the string \"Unknown\" will be returned.",
        "return": "String"
    },
    "room_set_view_enabled": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to set."
            },
            {
                "label": "val",
                "documentation": "Whether to enable (true) or disable (false) views in the given room."
            }
        ],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_view_enabled(global.myroom, true);<br>",
            "description": ""
        },
        "signature": "room_set_view_enabled(index, val);",
        "function": "room_set_view_enabled",
        "documentation": "",
        "return": "N/A"
    },
    "audio_listener_set_position": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The listener to get the data for (default 0)."
            },
            {
                "label": "x",
                "documentation": "The x position of the listener (default 0)."
            },
            {
                "label": "y",
                "documentation": "The y position of the listener (default 0)."
            },
            {
                "label": "z",
                "documentation": "The z position of the listener (default 0)."
            }
        ],
        "example": {
            "code": "var _vmat = camera_get_view_mat(view_camera[0]);<br> audio_listener_set_position(global.Player_Listener, _vmat[0], _vmat[1], _vmat[2]);<br> audio_listener_set_orientation(info[? \"index\"], _vmat[3], _vmat[4], _vmat[5], _vmat[6], _vmat[7], _vmat[8]);<br>",
            "description": ""
        },
        "signature": "audio_listener_set_position(index, x, y, z);",
        "function": "audio_listener_set_position",
        "documentation": "With this function you can change the position of a given _listener_ within the 3D audio space. The default listener index is 0, but you can use the function [audio\\_get\\_listener_info](audio_get_listener_info.html) to get the different indices available for the target platform. The example image below shows the default position for the listener in the audio space: ![](audio_listener.png)",
        "return": "N/A"
    },
    "audio_pause_sync_group": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to pause."
            }
        ],
        "example": {
            "code": "if (keyboard_check_pressed((ord)\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause<br> &nbsp;&nbsp;&nbsp;if global.Pause<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_pause_sync_group(sg);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_resume_sync_group(sg);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_pause_sync_group(group_index);",
        "function": "audio_pause_sync_group",
        "documentation": "This function will pause the given sync group if it is playing, with the group index being the value returned when you created the group using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html). This does not stop the sound, and calling [audio\\_resume\\_sync_group()](audio_resume_sync_group.html), will start it playing from the same position it was paused at again.",
        "return": "N/A"
    },
    "buffer_tell": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            }
        ],
        "example": {
            "code": "var pos = buffer_tell(buff); buffer_seek(buff, buffer_seek_start, 0);<br> val[0] = buffer_read(buff, buffer_S16);<br> val[1] = buffer_read(buff, buffer_S16);<br> val[2] = buffer_read(buff, buffer_S16);<br> buffer_seek(buff, buffer_seek_start, pos);<br>",
            "description": ""
        },
        "signature": "buffer_tell(buffer);",
        "function": "buffer_tell",
        "documentation": "When you read or write data to a buffer using the [buffer_read](buffer_read.html) or [buffer_write](buffer_write.html) the current \"seek\" position is advanced by the bytes written or read, and with this function you can get the current \"seek\" position for use in other buffer functions. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a buffer_tell, you'll get an return value of 1. However, if you write another piece of data, also 1 byte in size, then do a buffer_tell, you'll get a return value of 5 as the alignment has \"padded\" the data to that position.",
        "return": "Real"
    },
    "matrix_build_projection_ortho": {
        "parameters": [
            {
                "label": "w",
                "documentation": "The width of the projection."
            },
            {
                "label": "h",
                "documentation": "The height of the projection."
            },
            {
                "label": "znear",
                "documentation": "The near clipping plane."
            },
            {
                "label": "zfar",
                "documentation": "The far clipping plane."
            }
        ],
        "example": {
            "code": "viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);<br> projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);<br> camera_set_view_mat(view_camera[0], viewmat);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "matrix_build_projection_ortho(width, height, znear, zfar);",
        "function": "matrix_build_projection_ortho",
        "documentation": "This function builds an orthographic projection matrix based on the specified parameters listed below (this is the default projection method used when you create a room in _GameMaker Studio 2_ without changing anything). Sometimes you need to switch from a perspective projection to an orthographic projection which is what this function is for. It is typically used to draw an overlay, for example, to show the score or other aspects as this gives a \"flat\" view of the elements drawn (ie: no perspective) in a 3D game. See the image below to get an idea of the difference between orthographic and perspective views.",
        "return": "Matrix index"
    },
    "layer_background_exists": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_trees\");<br> if layer_background_exists(lay_id, global.TreesBackground)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_destroy(lay_id, global.TreesBackground);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_exists(layer_id, background_element_id)",
        "function": "layer_background_exists",
        "documentation": "You can use this function to check and see if a background element exists on any given layer. You supply the layer ID (which you get when you create the layer using [layer_create()](../layers/layer_create.html)) or the layer name (as a string - this will have a performance impact) and the background element ID (which you get when you create a background element using [layer\\_background\\_create()](layer_background_create.html) or when you use the function [layer\\_background\\_get_id()](layer_background_get_id.html)) and the function will return either true if the element exists, or false if it does not.",
        "return": "Boolean"
    },
    "layer_sprite_exists": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_Trees\");<br> if layer_sprite_exists(lay_id, global.TreesSprites)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_destroy(lay_id, global.TreesSprites);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_exists(layer_id, sprite_element_id)",
        "function": "layer_sprite_exists",
        "documentation": "You can use this function to check and see if a sprite element exists on any given layer. You supply the layer ID (which you get when you create the layer using [layer_create()](../layers/layer_create.html)) or the layer name (as a string - this will have a performance impact) and the sprite element ID (which you get when you create a sprite element using [layer\\_background\\_create()](layer_sprite_create.html) or when you use the function [layer\\_sprite\\_get_id()](layer_sprite_get_id.html)) and the function will return either true if the element exists, or false if it does not.",
        "return": "Boolean"
    },
    "gamepad_get_device_count": {
        "parameters": [],
        "example": {
            "code": "var gp_num = gamepad_get_device_count();<br> for (var i = 0; i &lt; gp_num; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if gamepad_is_connected(i) global.gp[i] = true else global.gp[i] = false;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_get_device_count();",
        "function": "gamepad_get_device_count",
        "documentation": "This function will tell you one of two things. Either the number of game pads connected, _or_ the number of available \"slots\" for game pads to be connected to. The actual return value will depend on the platform and the internal configuration of that platform and as such this function should be used in conjunction with the function [gamepad\\_is\\_connected](gamepad_is_connected.html) to make sure of the exact number of pads connected at any time.",
        "return": "Real"
    },
    "ds_grid_height": {
        "parameters": [
            {
                "label": "index",
                "documentation": "This index of the grid to find the height of."
            }
        ],
        "example": {
            "code": "var i, j;<br> for (i = 0; i &lt; ds_grid_width(grid); i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;for (j = 0; j &lt; ds_grid_height(grid); j += 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ds_grid_get(grid, i, j) = 1<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_create_Layer(i * 32, j * 32, \"Walls\", obj_Wall);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_height(index);",
        "function": "ds_grid_height",
        "documentation": "This function will return the height of the given grid. This value is the number of cells the grid has along the y-axis and is always an integer, as shown in the image below: ![](ds_grid_height.png)",
        "return": "Real"
    },
    "persistent": {
        "parameters": [],
        "example": {
            "code": "if !persistent<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;persistent = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "persistent;",
        "function": "persistent;",
        "documentation": "",
        "return": "Boolean"
    },
    "date_inc_second": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to."
            },
            {
                "label": "amount",
                "documentation": "The number of seconds (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_second(date_current_datetime(), 60);",
            "description": ""
        },
        "signature": "date_inc_second(date, amount);",
        "function": "date_inc_second",
        "documentation": "With this function you can increment a given datetime value by a specific number of seconds, and it will return the new datetime value.",
        "return": "Real"
    },
    "date_valid_datetime": {
        "parameters": [
            {
                "label": "year",
                "documentation": "The year to check."
            },
            {
                "label": "month",
                "documentation": "The month to check."
            },
            {
                "label": "day",
                "documentation": "The day to check."
            },
            {
                "label": "hour",
                "documentation": "The hour to check."
            },
            {
                "label": "minute",
                "documentation": "The minute to check."
            },
            {
                "label": "second",
                "documentation": "The second to check."
            }
        ],
        "example": {
            "code": "if date_valid_datetime(2011, 9, 15, 10, 3, 30))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;mydatetime = date_create_datetime( 2011, 9, 15, 10, 3, 30 );<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "date_valid_datetime(year, month, day, hour, minute, second);",
        "function": "date_valid_datetime",
        "documentation": "With this function you can check a datetime value to see if it is valid (returns true) or not (returns false). Note that this function will only consider a valid datetime as being _after_ 1/1/1970 and anything before that will return false, so the earliest you can check would be:",
        "return": "Boolean"
    },
    "dot_product_normalised": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the first vector."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first vector."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second vector."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second vector."
            }
        ],
        "example": {
            "code": "var x1, y1, x2, y2;<br> x1 = lengthdir_x(1, image_angle);<br> y1 = lengthdir_y(1, image_angle);<br> x2 = o_Player.x - x;<br> y2 = o_Player.y - y;<br> if dot_product_normalised(x1, y1, x2, y2) &gt; 0 seen=true else seen=false;<br>",
            "description": ""
        },
        "signature": "dot_product_normalised(x1, y1, x2, y2)",
        "function": "dot_product_normalised",
        "documentation": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).  \n  \nThe actual mathematical formula can be written like this:  \n  \n![](images/dot_product_image.png)",
        "return": "Real"
    },
    "physics_particle_group_circle": {
        "parameters": [
            {
                "label": "radius",
                "documentation": "The radius (in pixels) of the circle to create."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid;<br> physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_circle(100);<br> mLastGroup = physics_particle_group_end();<br>",
            "description": ""
        },
        "signature": "physics_particle_group_circle(radius)",
        "function": "physics_particle_group_circle",
        "documentation": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function [physics\\_particle\\_group_begin()](physics_particle_group_begin.html), and then you would use this function to set the approximate radius of the group in pixels - approximate because the exact radius will depend on the size of the base particles, as defined by the [physics\\_particle\\_set_radius()](physics_particle_set_radius.html) function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape. Finally you need to call [physics\\_particle\\_group_end()](physics_particle_group_end.html) to create the group of particles in the room.",
        "return": "N/A"
    },
    "physics_world_create": {
        "parameters": [
            {
                "label": "pixeltometrescale",
                "documentation": "defines the ratio of pixels on screen to metres in the real world. A ratio of 32:1 will be specified as 1/32 (or 0.03125)."
            }
        ],
        "example": {
            "code": "physics_world_create(1/32)",
            "description": ""
        },
        "signature": "physics_world_create(pixeltometrescale);",
        "function": "physics_world_create",
        "documentation": "Even if you have defined the physics for your objects, without a world to place them in they will default to the traditional _GameMaker Studio 2_ collision system, so you need this function to create the physics system for the specified room either in an object event, or the creation code of the room itself (it can also be defined without using code in the room editor). This function will associate a physics \"world\" with the room and all instances created in the room will behave using the physics that has been defined for them and the world itself.  \n  \n![](images/physics_world_create_image.png)",
        "return": "N/A"
    },
    "audio_start_recording": {
        "parameters": [
            {
                "label": "recorder_index",
                "documentation": "The index of the recorder source to use."
            }
        ],
        "example": {
            "code": "audio_record = audio_start_recording(0);",
            "description": ""
        },
        "signature": "audio_start_recording(recorder_index);",
        "function": "audio_start_recording",
        "documentation": "This function will start recording audio from the recorder source indexed. You can get the number of recorder sources using the function [audio\\_get\\_recorder_count()](audio_get_recorder_count.html), and once you start recording the audio will be stored in a temporary buffer and start triggering an [Audio Recording Asynchronous Event](../../../2_interface/1_editors/events/async_events.html). This event is triggered every step that recording takes place and will create the special ds_map in the variable async_load with the following key/value pairs:",
        "return": "Index"
    },
    "device_mouse_check_button_pressed": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button_pressed(0, mb_left)<br> {<br> press=true;<br> }<br>",
            "description": ""
        },
        "signature": "device_mouse_check_button_pressed(device, button);",
        "function": "device_mouse_check_button_pressed",
        "documentation": "This function returns true or false depending on whether the device that you specify has been \"touched\" (clicked) or not. The _device_ argument refers to the touch number, which can be from 0 to _n_ (the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs). This function is only triggered _once_ by the actual pressing action, and the standard constants of mb_left and mb_right can be used to check for either button.",
        "return": "Boolean"
    },
    "gamepad_is_connected": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad \"slot\" to check."
            }
        ],
        "example": {
            "code": "var gp_num = gamepad_get_device_count();<br> for (var i = 0; i &lt; gp_num; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if gamepad_is_connected(i) global.gp[i] = true else global.gp[i] = false;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_is_connected(numb);",
        "function": "gamepad_is_connected",
        "documentation": "This function will return whether a gamepad is connected to the given \"slot\" (returns true) or not (returns false). You would normally use this function in conjunction with the [gamepad\\_get\\_device_count](gamepad_get_device_count.html) function to get the correct number of available game pads and/or gamepad \"slots\". Note that there may be a slight delay between the user connecting the gamepad and _GameMaker Studio 2_ detecting it as being connected (this is especially the case when dealing with bluetooth connected controllers).",
        "return": "Boolean"
    },
    "vertex_format_add_normal": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_textcoord();<br> vertex_format_add_normal();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_add_normal();",
        "function": "vertex_format_add_normal",
        "documentation": "Tell _GameMaker Studio 2_ to accept surface normal data (nx, ny and nz) as part of the new vertex format being created.",
        "return": "N/A"
    },
    "iap_consume": {
        "parameters": [
            {
                "label": "purchase_id",
                "documentation": "The product ID string for the purchase."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;iap_consume(\"noads\")<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "iap_consume(purchase_id);",
        "function": "iap_consume",
        "documentation": "This function can be used for clearing the purchase status of any unmanaged (consumable) purchases. The \"purchase_id\" is the product ID string which you specified when activating the IAP using [iap_activate](iap_activate.html), and should be the same as that which you used to identify the product on the target store. This function will trigger an [**IAP Event**](../../../2_interface/1_editors/events/async_events.html) of the \"type\" iap\\_ev\\_consume, which will contain the following additional keys:",
        "return": "N/A"
    },
    "physics_joint_distance_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "w_anchor1_x",
                "documentation": "The first x coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor1_y",
                "documentation": "The first y coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor2_x",
                "documentation": "The second x coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor2_y",
                "documentation": "the second y coordinate for the joint, within the game world"
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var mainFixture, o_id;<br> mainFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br> o_id=instance_create_layer(x+300, y, \"Instances\", obj_Rudder);<br> physics_fixture_bind(mainFixture, id);<br> physics_fixture_bind(mainFixture, o_id);<br> physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0);<br> physics_fixture_delete(mainFixture);<br>",
            "description": ""
        },
        "signature": "physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col)",
        "function": "physics_joint_distance_create",
        "documentation": "One of the simplest joint is a distance joint which says that the distance between two points on two instances must be constant. When you specify a distance joint the two instances should already be created and have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance between these points imply the length of the distance constrain. The image below shows how this works:  \n  \n![](images/direction_joint_image.png)",
        "return": "Index of the joint"
    },
    "physics_particle_group_get_centre_x": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "xx = physics_particle_group_get_centre_x(group1);<br> yy = physics_particle_group_get_centre_y(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_centre_x(group)",
        "function": "physics_particle_group_get_centre_x",
        "documentation": "With this function you can retrieve the x component of the center of mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "physics_particle_group_get_vel_y": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "vx = physics_particle_group_get_vel_x(group1);<br> vy = physics_particle_group_get_vel_y(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_vel_y(group)",
        "function": "physics_particle_group_get_vel_y",
        "documentation": "With this function you can retrieve the vertical velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "sprite_get_xoffset": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to find the xoffset of."
            }
        ],
        "example": {
            "code": "if x - sprite_get_xoffset(sprite_index) &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = sprite_get_xoffset(sprite_index);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_get_xoffset(index);",
        "function": "sprite_get_xoffset",
        "documentation": "When you define a sprite in the sprite editor, you need to set the _origin_ for that sprite. This is the point at which the sprite will be \"attached\" or \"drawn\" when used with an instance. This function returns the relative offset for the x-axis of the origin based on the upper left corner being the 0,0 position, with a +x being right and a -x being left of this. The following image illustrates this: ![](spr_xyoffset.png)",
        "return": ""
    },
    "audio_emitter_get_x": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_x(emitter_player) != x<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_position(emitter_player, x, y, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_x(emitter);",
        "function": "audio_emitter_get_x",
        "documentation": "This function returns the current x position of the given audio emitter.",
        "return": "Real"
    },
    "part_emitter_region": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system that the emitter is in."
            },
            {
                "label": "ind",
                "documentation": "The index of the emitter to set."
            },
            {
                "label": "xmin",
                "documentation": "The x coordinate of the left side of the region."
            },
            {
                "label": "xmax",
                "documentation": "The x coordinate of the right side."
            },
            {
                "label": "ymin",
                "documentation": "The y coordinate of the top of the region."
            },
            {
                "label": "ymax",
                "documentation": "The y coordinate of the bottom of the region."
            },
            {
                "label": "shape",
                "documentation": "The shape of the region."
            },
            {
                "label": "distribution",
                "documentation": "The distribution style of the particles."
            }
        ],
        "example": {
            "code": "part_emitter_region(global.Sname , emit_1, x - 50, x + 50, y - 50, y + 50, ps_shape_ellipse, ps_distr_linear)",
            "description": ""
        },
        "signature": "part_emitter_region(ps, ind, xmin, xmax, ymin, ymax, shape, distribution);",
        "function": "part_emitter_region",
        "documentation": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
        "return": "N/A"
    },
    "path_orientation": {
        "parameters": [],
        "example": {
            "code": 0,
            "description": "<br> "
        },
        "signature": "path_orientation;",
        "function": "path_orientation;",
        "documentation": "",
        "return": "Real"
    },
    "physics_set_restitution": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the id of the bound fixture"
            },
            {
                "label": "restitution",
                "documentation": "the new restitution value to apply"
            }
        ],
        "example": {
            "code": "var rest = physics_get_restitution(fix_id);<br> physics_set_restitution(fix_id, rest * 2);<br>",
            "description": ""
        },
        "signature": "physics_set_restitution(fixture, restitution)",
        "function": "physics_set_restitution",
        "documentation": "When you bind a fixture to an instance using [physics\\_fixture\\_bind](physics_fixture_bind.html) this returns an \"id\" for the bound fixture. You can use this id to set the restitution value of the bound fixture, _not_ the \"base\" fixture, at any time using this function. Restitution is usually set as a value between 0 and 1, but you can use higher values if required, although the results may be unpredictable.",
        "return": "N/A"
    },
    "window_get_fullscreen": {
        "parameters": [],
        "example": {
            "code": "if window_get_fullscreen()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_text(32, 32, \"Fullscreen is ON\");<br> &nbsp;&nbsp;&nbsp;}<br> else &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_text(32, 32, \"Fullscreen is OFF\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_get_fullscreen();",
        "function": "window_get_fullscreen",
        "documentation": "This function returns whether the game window is in fullscreen mode (true) or not (false).",
        "return": "Boolean"
    },
    "gpu_get_tex_min_mip_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_min_mip_ext(_sampleIndex) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_min_mip_ext(_sampleIndex, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_min_mip_ext(sampler_index);",
        "function": "gpu_get_tex_min_mip_ext",
        "documentation": "With this function you can get the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return a value of 0 for full resolution, 1 for the first mipmap, 2 for the second etc...",
        "return": "Real (default: 0)"
    },
    "vertex_float4": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "float",
                "documentation": "The first input value."
            },
            {
                "label": "float",
                "documentation": "The second input value."
            },
            {
                "label": "float",
                "documentation": "The third input value."
            },
            {
                "label": "float",
                "documentation": "The fourth input value."
            }
        ],
        "example": {
            "code": "vertex_float4(buff, 0.05, 0.01, room_width / x, room_height / y);",
            "description": ""
        },
        "signature": "vertex_float4(buffer, float, float, float, float);",
        "function": "vertex_float4",
        "documentation": "This function will add four floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the [vertex\\_format\\_add_custom](../vertex%20formats/vertex_format_add_custom.html) function.",
        "return": "N/A"
    },
    "timeline_loop": {
        "parameters": [],
        "example": {
            "code": "if !timeline_loop timeline_loop = true;",
            "description": ""
        },
        "signature": "timeline_loop;",
        "function": "timeline_loop;",
        "documentation": "This variable will return whether the time line is looping (true) or not (false). You can change this variable to switch looping on or off and it works with a negative time line speed (if the time line position goes below 0 it will start again at the last defined moment).",
        "return": "Boolean"
    },
    "darcsin": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in degrees) to return the inverse sine of."
            }
        ],
        "example": {
            "code": "val = darcsin(-1);",
            "description": ""
        },
        "signature": "darcsin(x);",
        "function": "darcsin",
        "documentation": "Returns the inverse sine of x, in that if dsin(x)=n, darcsin(n)=x, and the resulting number will be between -90 and 90.",
        "return": "Real"
    },
    "physics_fixture_bind_ext": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the fixture that is to be bound"
            },
            {
                "label": "target",
                "documentation": "the target instance that is to receive the fixture (can be an instance id, an object id, other, or all)"
            },
            {
                "label": "xoffset",
                "documentation": "the offset along the x-axis"
            },
            {
                "label": "yoffset",
                "documentation": "the offset along the y-axis"
            }
        ],
        "example": {
            "code": "var fix, inst;<br> fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(fix, 16);<br> physics_fixture_set_density(fix, 1.0);<br> inst = instance_create_layer(x, y, \"Instances\", genericBodyObject);<br> my_fix = physics_fixture_bind_ext(fix, inst, sprite_width / 2, -(sprite_height / 2));<br> physics_fixture_delete(fix);<br>",
            "description": ""
        },
        "signature": "physics_fixture_bind_ext(fixture, target, xoffset, yoffset)",
        "function": "physics_fixture_bind_ext",
        "documentation": "Once we have defined our fixture it has to be bound to an instance. This means that its _properties_ are transferred to the selected instance, **not the actual fixture itself**, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords _other_ and _all_. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.  \n  \nNormally, the fixture will be bound to the instance with the center of mass being positioned at the origin of the instance, however this is not always what you require and so this function also permits you to offset the x and y position where the fixture is bound by a given amount (if you do not require this then use [physics\\_fixture\\_bind](physics_fixture_bind.html) instead). It is important to note that a fixture can only support a _single_ offset, as adding multiple offsets to a single fixture is not supported by Box2D. ![](images/physics_fixture_bind_ext_image.png) The function will also return a unique \"id\" value for the _bound_ fixture (**not the fixture itself**) which can then be used to remove (\"un-bind\") the physics properties from the instance using the function [physics\\_remove\\_fixture](physics_remove_fixture.html). This permits you to add and remove physical properties from an instance without destroying and re-creating objects.  \n  \n_**Note:** Fixtures should be deleted when no longer needed as failure to do so may cause a memory leak which will slow down and eventually crash your game._",
        "return": "Real"
    },
    "layer_get_all": {
        "parameters": [],
        "example": {
            "code": "var a = layer_get_all();<br> for (var i = 0; i &lt; array_length_1d(a); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_destroy(a[i]);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_all()",
        "function": "layer_get_all",
        "documentation": "This function will return an array populated with the unique ID values of each layer in the room.",
        "return": "Array (1D, populated with Layer IDs)"
    },
    "layer_get_shader": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "if layer_get_shader(layer) == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_shader(layer, shd_Sepia);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_shader(layer_id)",
        "function": "layer_get_shader",
        "documentation": "",
        "return": "Shader Index or -1if no shader is assigned"
    },
    "tilemap_set_width": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to set the width of"
            },
            {
                "label": "width",
                "documentation": "The width value (in \"cells\")"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> if tilemap_get_width(map_id) != room_width div 16<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;tilemap_set_width(map_id, room_width div 16);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_set_width(tilemap_element_id, width)",
        "function": "tilemap_set_width",
        "documentation": "This function can be used to resize a tilemap element. You give the tilemap element ID (which you get when you create a tilemap element using [layer\\_tilemap\\_create()](layer_tilemap_create.html) or when you use the function [layer\\_tilemap\\_get_id()](layer_tilemap_get_id.html)), and the new width of the tilemap in tile cells.",
        "return": "N/A"
    },
    "audio_get_recorder_info": {
        "parameters": [
            {
                "label": "recorder_index",
                "documentation": "The index of the recorder source to get the information from."
            }
        ],
        "example": {
            "code": "len = async_load[? \"data_len\"];<br> audio_buff = buffer_create(len, buffer_fast, 1);<br> buffer_copy(async_load[? \"buffer_id\"], 0, len, buff, 0);<br> audio_queue_sound(audio_queue, audio_buff, 0, len);<br> audio_play_sound(audio_queue, 10, 0);<br>",
            "description": ""
        },
        "signature": "audio_get_recorder_info(recorder_index);",
        "function": "audio_get_recorder_info",
        "documentation": "This function will return a ds_map with information about the given recorder source index. You can find out how many recorder sources are available using the function [audio\\_get\\_recorder_count](audio_get_recorder_count.html), and the map returned will contain the following key/value pairs:",
        "return": "ds_map"
    },
    "file_bin_open": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to read from."
            },
            {
                "label": "mode",
                "documentation": "the indicator of what can be done with the file."
            }
        ],
        "example": {
            "code": "file = file_bin_open('myfile.bin', 2);",
            "description": ""
        },
        "signature": "file_bin_open(fname, mode);",
        "function": "file_bin_open",
        "documentation": "This function will open the binary file with the indicated name. The mode indicates what can be done with the file:",
        "return": "Real"
    },
    "filename_name": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The file to use."
            }
        ],
        "example": {
            "code": "name = filename_name(file_find_first(\"C:\\Games\\*.doc\", 0));<br>",
            "description": ""
        },
        "signature": "filename_name(fname);",
        "function": "filename_name",
        "documentation": "Using this function returns the name part of the indicated file, _with_ the extension but _without_ the path",
        "return": "String."
    },
    "file_find_close": {
        "parameters": [],
        "example": {
            "code": "file_find_close();",
            "description": ""
        },
        "signature": "file_find_close();",
        "function": "file_find_close",
        "documentation": "Must be called after handling files opened using file\\_find\\_first() and file\\_find\\_next() functions to free memory. The file find functions open handles into the file directory and these take up a minimal amount of memory, which (over time) mounts up. Therefore you should always call this function after you have found the files you require to \"close\" these handles.",
        "return": ""
    },
    "network_send_broadcast": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "port",
                "documentation": "The port that the server will use."
            },
            {
                "label": "buffer",
                "documentation": "The id of the buffer to get the data from."
            },
            {
                "label": "size",
                "documentation": "The size (in bytes) of the data."
            }
        ],
        "example": {
            "code": "buffer_seek(broadcast_buffer, buffer_seek_start, 0);<br> buffer_write(broadcast_buffer, buffer_string, global.ServerName);<br> network_send_broadcast(server, 6511, broadcast_buffer, buffer_tell(broadcast_buffer));<br>",
            "description": ""
        },
        "signature": "network_send_broadcast(socket, port, buffer, size);",
        "function": "network_send_broadcast",
        "documentation": "With this function you can broadcast the data from a buffer locally to a range of IP addresses (for more information on buffers see [Reference - Buffers](../buffers/index.html)). The range is limited to that of the device running the server, such that if the device has an IP of 92.168.11.130, then the data will be broadcast over the range 92.168.11.*. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
        "return": "Real"
    },
    "network_send_packet": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "buffer",
                "documentation": "The id of the buffer to get the data from."
            },
            {
                "label": "size",
                "documentation": "The size (in bytes) of the data."
            }
        ],
        "example": {
            "code": "buff = buffer_load(\"player_save.dat\");<br> network_send_packet(sock, buff, buffer_get_size(buff));<br>",
            "description": ""
        },
        "signature": "network_send_packet(socket, buffer, size);",
        "function": "network_send_packet",
        "documentation": "With this function you can send a data \"packet\" through the network. The function takes the _socket id_ to connect through and then you must supply the _buffer id_ which contains the data to be sent (for more information on buffers see [Reference - Buffers](../buffers/index.html)) and finally the size (in bytes) of the data packet. Packets sent with this function are formatted such that the _GameMaker Studio 2_ game receiving the data can correctly \"split\" the packets correctly, and the function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.",
        "return": "Real"
    },
    "sprite_merge": {
        "parameters": [
            {
                "label": "ind1",
                "documentation": "The index of the sprite to merge."
            },
            {
                "label": "ind2",
                "documentation": "The index of the sprite that ind1 is to be merged with."
            }
        ],
        "example": {
            "code": "var tspr;<br> tspr[0] = spr_add(working_directory + \"Sprite Assets\\explode1.png\", 16, true, true, 0, 0);<br> tspr[1] = sprite_duplicate(spr_Explosion);<br> sprite_merge(tspr[0], tspr[1]);<br> sprite_index = t_spr[0];<br> sprite_delete(tspr[1]);<br>",
            "description": ""
        },
        "signature": "sprite_merge(ind1, ind2);",
        "function": "sprite_merge",
        "documentation": "This function will merge the sprite indexed in argument1 (\"ind2\") with that which is indexed in argument0 (\"ind1\"). The images themselves are **NOT** merged together, but rather the image indices are merged, with the sub images from sprite \"ind2\" appended onto those of sprite \"ind1\", ie: they are added on at the end. Note that if the sprites are different sizes, then the appended sprites are stretched to fit the image size for \"ind1\".",
        "return": ""
    },
    "audio_play_in_sync_group": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to assign the sound to."
            },
            {
                "label": "sound_index",
                "documentation": "The sound index to be assigned to the group."
            }
        ],
        "example": {
            "code": "sg = audio_create_sync_group(true);<br> audio_play_in_sync_group(sg, sound1);<br> audio_play_in_sync_group(sg, sound2);<br> audio_play_in_sync_group(sg, sound3);<br> audio_play_in_sync_group(sg, sound4);<br> audio_start_sync_group(sg);<br>",
            "description": ""
        },
        "signature": "audio_play_in_sync_group(group_index, sound_index);",
        "function": "audio_play_in_sync_group",
        "documentation": "With this function you can assign a sound to a previously create sync group. The group index is the value returned when you created the group using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html), and the sound index is the index of any _compressed_ sound (*.ogg or *.mp3) from the resource tree. This function only adds the sound to the group, but it does not play the sound, and will a value > -1 if it succeeds and -1 if it fails.",
        "return": "Index"
    },
    "buffer_save": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to save."
            },
            {
                "label": "filename",
                "documentation": "The name of the file to save as."
            }
        ],
        "example": {
            "code": "buffer_save(buff, \"Player_Save.sav\");<br>",
            "description": ""
        },
        "signature": "buffer_save(buffer, filename);",
        "function": "buffer_save",
        "documentation": "With this function you can save the contents of a buffer to a file, ready to be read back into memory using the [buffer_load](buffer_load.html) function.",
        "return": "N/A"
    },
    "camera_set_begin_script": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "script",
                "documentation": "The script to run each game frame"
            }
        ],
        "example": {
            "code": "camera_set_begin_script(view_camera[0], beginCamera);",
            "description": ""
        },
        "signature": "camera_set_begin_script(camera_id, script)",
        "function": "camera_set_begin_script",
        "documentation": "This function can be used to set a script that will be called at the beginning of every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned by the different camera_create functions) and the ID of the script to be called. The order in which scripts attached to cameras and the actual rendering of the camera view is as follows:",
        "return": "N/A"
    },
    "ds_queue_empty": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if count == 15 &amp;&amp; !ds_queue_empty(command_queue)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_queue_clear(command_queue);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_queue_empty(id);",
        "function": "ds_queue_empty",
        "documentation": "With this function you can check the given ds_queue to see if it is empty (returns true) or not (returns false).",
        "return": "Boolean"
    },
    "place_snapped": {
        "parameters": [
            {
                "label": "hsnap",
                "documentation": "The horizontal snapping to check."
            },
            {
                "label": "vsnap",
                "documentation": "The vertical snapping to check."
            }
        ],
        "example": {
            "code": "with (obj_Pieces)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !place_snapped(32, 32)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move_snap(32, 32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "place_snapped(hsnap, vsnap);",
        "function": "place_snapped",
        "documentation": "With this function you can check and see if the origin of an instance (its x and y position) is aligned to a grid with the hsnap and vsnap values specified by you.",
        "return": "Boolean"
    },
    "physics_apply_impulse": {
        "parameters": [
            {
                "label": "xpos",
                "documentation": "The x coordinate in the room where the impulse will be applied"
            },
            {
                "label": "ypos",
                "documentation": "The y coordinate in the room where the impulse will be applied"
            },
            {
                "label": "ximpulse",
                "documentation": "the x component of the impulse vector"
            },
            {
                "label": "yimpulse",
                "documentation": "the y component of the impulse vector"
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (place_meeting(mouse_x, mouse_y, all))<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_apply_impulse(mouse_x, mouse_y, -10 + irandom(20), -10 + irandom(20));<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_apply_impulse(xpos, ypos, ximpulse, yimpulse)",
        "function": "physics_apply_impulse",
        "documentation": "Not only can you apply force and gravity to an object with the physics in _GameMaker Studio 2_ but you can also apply an impulse. This is slightly different to a force in that when it is applied it will _immediately_ affect the speed, and, potentially the torque (or \"spin\") of the object, particularly if the point chosen to apply the impulse is not aligned with the center of mass (note: the center of mass is _not necessarily_ the same as the origin!). Here is an illustration:  \n  \n![](images/physics_apply_impulse_image.png)",
        "return": "N/A"
    },
    "layer_sprite_get_x": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_x(spr_id) &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_x(spr_id, room_width);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_x(sprite_element_id);",
        "function": "layer_sprite_get_x",
        "documentation": "",
        "return": "Real"
    },
    "audio_emitter_get_vy": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_vy(emitter_player) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_velocity(emitter_player, 0, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_vy(emitter);",
        "function": "audio_emitter_get_vy",
        "documentation": "This function returns the current velocity along the y axis for the given audio emitter.",
        "return": "Real"
    },
    "camera_set_view_speed": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "xspeed",
                "documentation": "The speed (number of pixels per game frame) that the view should move on the horizontal (x) axis"
            },
            {
                "label": "yspeed",
                "documentation": "The speed (number of pixels per game frame) that the view should move on the vertical (y) axis"
            }
        ],
        "example": {
            "code": "camera_set_view_speed(view_camera[0], 5, 5);",
            "description": ""
        },
        "signature": "camera_set_view_speed(camera_id, xspeed, yspeed)",
        "function": "camera_set_view_speed",
        "documentation": "You can use this function to update the speed of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the x and y (horizontal and vertical) speed that it should move when set to follow a given instance. The speed is calculated as pixels per step and can be set to \"-1\" to make the camera move instantly, but if the camera is not set to follow any instance then the values set here will have no visible effect.",
        "return": "N/A"
    },
    "view_camera": {
        "parameters": [],
        "example": {
            "code": "if view_camera[0] == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_camera[0] = camera_create_view(0, 0, room_width, room_height);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_camera[0 ... 7];",
        "function": "view_camera[0 ... 7];",
        "documentation": "",
        "return": "Camera index or -1 if no camera is assigned"
    },
    "part_type_sprite": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "sprite",
                "documentation": "The index of the sprite to set the particle type to."
            },
            {
                "label": "animate",
                "documentation": "Whether to follow the sprite's animation normally (true) or not (false)."
            },
            {
                "label": "stretch",
                "documentation": "Whether to stretch the sprite's animation to match the particle lifespan (true) or not (false)."
            },
            {
                "label": "random",
                "documentation": "Whether to choose a random sub-image (true) or not (false)."
            }
        ],
        "example": {
            "code": "global.p1 = part_type_create();<br> part_type_sprite(global.p1 , spr_Coins, 1, 0, 0);<br> part_type_size(global.p1, 1, 3, 0, 0);<br> part_type_scale(global.p1, 1, 1);<br> part_type_colour1(global.p1, c_white);<br> part_type_alpha2(global.p1, 1, 0);<br> part_type_speed(global.p1, 2, 4, 0, 0);<br> part_type_direction(global.p1, 0, 180, 0, 0);<br> part_type_gravity(global.p1, 0.20, 270);<br> part_type_orientation(global.p1, 0, 0, 0, 0, 1);<br> part_type_blend(global.p1, 1);<br> part_type_life(global.p1, 15, 60);<br>",
            "description": ""
        },
        "signature": "part_type_sprite(ind, sprite, animate, stretch, random);",
        "function": "part_type_sprite",
        "documentation": "This function can be used to set a particle type to use a custom sprite from the game assets. You can select the sprite and then tell _GameMaker Studio 2_ to use the sprite and animate it or not, and if you choose animated, then you can also choose to have the sub-images changed at an interval such that the animation will begin and end at the beginning and end of the lifetime of each particle created (so that if you have a lifetime set to a15 step minimum and a 30 step maximum, no matter what value the lifetime has the animation will be made to fit, with it running faster for the shorter lifetimes and slower for the longer). You can also select to choose a random sub-image so that if the sprite is not animated, a different image will be chosen at random to create the sprite, or if the particle is animated it will start the animation at a random point.",
        "return": "N/A"
    },
    "mp_grid_clear_cell": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "h",
                "documentation": "Horizontal position of the cell to clear"
            },
            {
                "label": "v",
                "documentation": "vertical position of the cell to clear"
            }
        ],
        "example": {
            "code": "with (obj_Box)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;mp_grid_clear_cell(grid, floor(x / 32), floor(y /32));<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_grid_clear_cell(id, h, v);",
        "function": "mp_grid_clear_cell",
        "documentation": "This function can be used to clear a specific \"cell\" of an mp_grid. Cells are _not_ calculated as room coordinates, but rather as grid coordinates, where (0,0) is the top let corner of the grid. this means that to clear a cell at a specific position in the room, we must change the x and y coordinates into cell coordinate dividing them by the resolution of the mp_grid. The code example below shows how this works.",
        "return": "Boolean."
    },
    "phy_col_normal_y": {
        "parameters": [],
        "example": {
            "code": "repeat(5 + irandom(5))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (instance_create_layer(x, y, \"Effects\", obj_Debris)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_apply_local_impulse(0, 0, other.phy_col_normal_x[0], other.phy_col_normal_y[0]);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_col_normal_y;",
        "function": "phy_col_normal_y;",
        "documentation": "This **read-only** variable returns the y component of the collision normal corresponding to the [phy\\_collision\\_y](phy_collision_y.html) array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct \"push\" direction to resolve collisions.  \n  \n_**NOTE:** This variable is only available in the collision event of a physics enabled instance._",
        "return": "Boolean"
    },
    "skeleton_bone_data_set": {
        "parameters": [
            {
                "label": "bone",
                "documentation": "The name (as a string) of the bone."
            },
            {
                "label": "map",
                "documentation": "The (previously created) ds_map that stores the bone data."
            }
        ],
        "example": {
            "code": "var bone_map = ds_map_create();<br> skeleton_bone_data_get(\"head\", bone_map);<br> ds_map_replace(bone_map, \"parent\", \"body\");<br> skeleton_bone_data_set(\"head\", bone_map);<br> ds_map_destroy(bone_map);<br>",
            "description": ""
        },
        "signature": "skeleton_bone_data_set(bone, map);",
        "function": "skeleton_bone_data_set",
        "documentation": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data refers to the **default** pose for the skeleton, and _not_ the current pose that is being drawn (for that use the function [skeleton\\_bone\\_state_set](skeleton_bone_state_set.html)), and must be set from a previously created [ds_map](../../data_structures/ds%20maps/index.html), which should have the following keys and their equivalent values:",
        "return": "N/A"
    },
    "buffer_save_ext": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to save."
            },
            {
                "label": "filename",
                "documentation": "The name of the file to save as."
            },
            {
                "label": "offset",
                "documentation": "The offset within the buffer to save from (in bytes)."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer area to save (in bytes)."
            }
        ],
        "example": {
            "code": "buffer_save_ext(buff, \"Player_Save.sav\", 0, 16384);<br>",
            "description": ""
        },
        "signature": "buffer_save_ext(buffer, filename, offset, size);",
        "function": "buffer_save_ext",
        "documentation": "With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the [buffer_load](buffer_load.html) function. The \"offset\" defines the start position within the buffer for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes).",
        "return": "N/A"
    },
    "ds_stack_empty": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if ai_count == 15 &amp;&amp; !ds_stack_empty(AI_stack)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_stack_clear(AI_stack);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_stack_empty(id);",
        "function": "ds_stack_empty",
        "documentation": "With this function you can check the given ds_stack to see if it is empty (returns true) or not (returns false).",
        "return": "Boolean"
    },
    "effect_clear": {
        "parameters": [],
        "example": {
            "code": "effect_clear();",
            "description": ""
        },
        "signature": "effect_clear();",
        "function": "effect_clear",
        "documentation": "This will clear all particles that are currently visible in the room which have been made using either [effect\\_create\\_above](effect_create_above.html) or [effect\\_create\\_below](effect_create_below.html).",
        "return": "N/A."
    },
    "file_bin_read_byte": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to get the data from."
            }
        ],
        "example": {
            "code": "file = file_bin_open('myfile.bin', 2);<br> data = file_bin_read_byte(file);<br> file_bin_close(file);<br>",
            "description": ""
        },
        "signature": "file_bin_read_byte(binfile);",
        "function": "file_bin_read_byte",
        "documentation": "This function will return a byte of data from current position within the file with the given file ID. You supply the file ID value, as returned by the function [file\\_bin\\_open](file_bin_open.html).",
        "return": "Real"
    },
    "file_text_write_real": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to edit."
            },
            {
                "label": "val",
                "documentation": "The real value to write to the file."
            }
        ],
        "example": {
            "code": "var i, file;<br> file = file_text_open_write(working_directory + \"hiscore.txt\");<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_text_write_real(file, scr[i]);<br> &nbsp;&nbsp;&nbsp;file_text_writeln(file);<br> &nbsp;&nbsp;&nbsp;file_text_write_string(file, scr_name[i]);<br> &nbsp;&nbsp;&nbsp;file_text_writeln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_write_real(fileid, val);",
        "function": "file_text_write_real",
        "documentation": "With this function you can write a number to the previously opened text file. Note that as the value to be written can be a real number, all decimals will be written with a \".\" point as separator. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the [file\\_text\\_open_append](file_text_open_append.html). You can also avoid this by using the [file\\_text\\_readln](file_text_readln.html) function along with the [file\\_text\\_eof](file_text_eof.html) function to loop through the contents of the file until you get to the end and then start writing.",
        "return": "Real"
    },
    "arccos": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The angle (in radians) to return the inverse cosine of."
            }
        ],
        "example": {
            "code": "val = arccos(0);",
            "description": ""
        },
        "signature": "arccos(x)",
        "function": "arccos",
        "documentation": "Returns the inverse cosine of x, in that if cos(val)=n, arccos(n)=val, and the resulting number will be between pi and 0.",
        "return": "Real"
    },
    "max": {
        "parameters": [
            {
                "label": "val0 ... max_val",
                "documentation": "The values to compare."
            }
        ],
        "example": {
            "code": "x = max(x, 0);",
            "description": ""
        },
        "signature": "max(val1, val2, ... max_val);",
        "function": "max",
        "documentation": "This function returns the maximum of the input values, of which it can have up to 16. For example max(12, 96, 32, 75) will return 96 as that is the highest of all the input values.",
        "return": "Real"
    },
    "layer_sprite_alpha": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "alpha",
                "documentation": "The alpha for sprite sprite, from 0 to 1 (default is 1)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> layer_sprite_alpha(spr_id, random(1));<br>",
            "description": ""
        },
        "signature": "layer_sprite_alpha(sprite_element_id, alpha);",
        "function": "layer_sprite_alpha",
        "documentation": "",
        "return": "N/A"
    },
    "sprite_prefetch_multi": {
        "parameters": [
            {
                "label": "array",
                "documentation": "Array with the sprite indices to fetch"
            }
        ],
        "example": {
            "code": "spr_a[0] = spr_Player_Aura1;<br> spr_a[1] = spr_Player_Aura2;<br> spr_a[2] = spr_Player_Aura3;<br> spr_a[3] = spr_Player_Aura4;<br> sprite_prefetch_multi(spr_a);<br>",
            "description": ""
        },
        "signature": "sprite_prefetch_multi",
        "function": "sprite_prefetch_multi",
        "documentation": "This function can be used to prefetch (place into texture memory) a number of texture pages that contain the sprites given. You supply an array populated with the sprite indices (as defined when you created the sprite asset) and the texture pages that they are on will be loaded into memory.",
        "return": "N/A"
    },
    "buffer_create_from_vertex_buffer": {
        "parameters": [
            {
                "label": "vertex_buffer",
                "documentation": "The vertex buffer index to use."
            },
            {
                "label": "type",
                "documentation": "The type of buffer to create (see the constants list below)."
            },
            {
                "label": "alignment",
                "documentation": "The byte alignment for the buffer"
            }
        ],
        "example": {
            "code": "player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1);<br>",
            "description": ""
        },
        "signature": "buffer_create_from_vertex_buffer(vertex_buffer, type, alignment)",
        "function": "buffer_create_from_vertex_buffer",
        "documentation": "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created [vertex buffer](../drawing/primitives/primitive%20building/index.html). The function returns a unique _buffer id_ that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function [vertex\\_create\\_buffer()](../drawing/primitives/primitive%20building/vertex_create_buffer.html), for example) with the following constants being used to define the buffer type:",
        "return": "Real"
    },
    "camera_set_view_mat": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "matrix",
                "documentation": "The unique matrix ID returned when you created the matrix."
            }
        ],
        "example": {
            "code": "view_camera[0] = camera_create();<br> var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);<br> var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);<br> camera_set_view_mat(view_camera[0], viewmat);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "camera_set_view_mat(camera_id, matrix)",
        "function": "camera_set_view_mat",
        "documentation": "This function will set the **view matrix** for a given camera. You give the unique camera ID value (as returned by the different camera_create functions) and a view matrix to be applied. You can find out more about creating view matrices from the section [Matrix Functions](../../matrices/index.html), specifically [matrix\\_build\\_lookat](../../matrices/matrix_build_lookat.html). Note that if your camera does automatic object tracking - ie: it has been created using [camera\\_create\\_view](camera_create_view.html) with an object index / instance ID that isn't -1, or you are setting a camera defined in the Room Editor, or you are setting the default camera - then this matrix will get overwritten the next game frame.",
        "return": "N/A"
    },
    "view_get_wport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "if view_get_wport(0) != (display_get_width () / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_wport(0, display_get_width() / 2);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_get_wport(view_port)",
        "function": "view_get_wport",
        "documentation": "This function can be used to retrieve the width of the given view port.",
        "return": "Real"
    },
    "keyboard_key_press": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to simulate a press of."
            }
        ],
        "example": {
            "code": "keyboard_key_press(vk_space);<br>",
            "description": ""
        },
        "signature": "keyboard_key_press(key);",
        "function": "keyboard_key_press",
        "documentation": "With this function you can simulate the press of any key on the keyboard. When used, the key will be flagged as being pressed until the corresponding release function is called (see [keyboard\\_key\\_release()](keyboard_key_release.html)). The function accepts any of the vk_ constants as well as the standard keys and ascii code. Note that after calling this function, if the key is _physically_ pressed on the keyboard, this press event will _not_ be registered again until the key has been physically released (triggering the release event and stopping this function), or the corresponding release key function has been called, and the key pressed again.",
        "return": "N/A"
    },
    "matrix_stack_pop": {
        "parameters": [],
        "example": {
            "code": "var m1 = matrix_build(66, 145, 0, 0, 0, 0, 1, 1, 1);<br> var m2 = matrix_build(0, 0, 0, 0, 0, image_angle * 6, 1, 1, 1) ;<br> matrix_stack_push(m1);<br> matrix_stack_push(m2);<br> matrix_set(matrix_world, matrix_stack_top());<br> draw_sprite(tyre, 0, 0, 0);<br> matrix_stack_pop();<br> matrix_stack_pop();<br>",
            "description": ""
        },
        "signature": "matrix_stack_pop();",
        "function": "matrix_stack_pop",
        "documentation": "This function pops the current top matrix off the stack.",
        "return": "N/A"
    },
    "position_destroy": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of where to destroy colliding instances."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to destroy colliding instances."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;position_destroy(mouse_x, mouse_y);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "position_destroy(x, y);",
        "function": "position_destroy",
        "documentation": "This function simply destroys all instances that are found to be in collision with the specified position. Collisions are based on the mask of the instances, and if any part of the mask over-laps with the target point it then the function will destroy that instance. Instances destroyed in this way will trigger their Destroy and Clean Up events.",
        "return": "N/A"
    },
    "room_set_camera": {
        "parameters": [
            {
                "label": "rm",
                "documentation": "The index of the room to set the view camera of"
            },
            {
                "label": "vind",
                "documentation": "The index of the view port to assign the camera to"
            },
            {
                "label": "camera",
                "documentation": "The index of the camera to assign"
            }
        ],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_camera(global.myroom, 0, global.MainCam);<br>",
            "description": ""
        },
        "signature": "room_set_camera(rm, vind, camera);",
        "function": "room_set_camera",
        "documentation": "With this function you can assign a camera to a specific viewport in a room other than the current one. You supply the room index, the view index (from 0 to 7) and then the index of the camera to use.",
        "return": "N/A"
    },
    "sprite_get_bbox_bottom": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to check."
            }
        ],
        "example": {
            "code": "var ww, hh;<br> ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index);<br> hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);<br>",
            "description": ""
        },
        "signature": "sprite_get_bbox_bottom(ind);",
        "function": "sprite_get_bbox_bottom",
        "documentation": "This function returns the relative position of the bottom of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the [collision mask properties](../../../2_interface/1_editors/sprites.html). The image below shows how it is calculated: ![](spr_bbox.png)",
        "return": ""
    },
    "audio_get_type": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to check."
            }
        ],
        "example": {
            "code": "type = audio_get_type(snd_Music_1);",
            "description": ""
        },
        "signature": "audio_get_type(index);",
        "function": "audio_get_type",
        "documentation": "When adding audio to _GameMaker Studio 2_ it can be either _streamed_ or _in memory_. If you need to know whether a given sound index is for streamed audio or not you can use this function which will return 1 for streamed, 0 for sound in memory, and -1 if there is any error or the index does not point to a valid sound resource.",
        "return": "Real"
    },
    "camera_get_view_x": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var vx = camera_get_view_x(view_camera[0]);<br> var vy = camera_get_view_y(view_camera[0]);<br> draw_text(vx + 5, vy + 5, \"SCORE\" + string(score));<br>",
            "description": ""
        },
        "signature": "camera_get_view_x(camera_id)",
        "function": "camera_get_view_x",
        "documentation": "This function can be used to retrieve the x position of the view for a given camera.",
        "return": "Real"
    },
    "ds_list_delete": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to change."
            },
            {
                "label": "pos",
                "documentation": "Where in the list to delete the value."
            }
        ],
        "example": {
            "code": "if ds_list_size(sc_list)&gt;10<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;while (ds_list_size(sc_list) &gt; 10)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds_list_delete(sc_list, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_delete(id, pos);",
        "function": "ds_list_delete",
        "documentation": "With this function you can remove the value stored at a specific position within the list.",
        "return": "N/A"
    },
    "gpu_get_ztestenable": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_ztestenable() == false<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_ztestenable(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_ztestenable();",
        "function": "gpu_get_ztestenable",
        "documentation": "This function can be used to retrieve whether z-testing is enabled (the function returns true) or not (the function returns false). The default value is that z-testing is _disabled_, so the function will return false.",
        "return": "Boolean"
    },
    "file_text_eoln": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to check."
            }
        ],
        "example": {
            "code": "file = file_text_open_read(working_directory + \"Game_Data.txt\");<br> var num = 0; while (!file_text_eoln(file))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score_array[num] = file_text_read_real(file);<br> &nbsp;&nbsp;&nbsp;num++;<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_eoln(fileid);",
        "function": "file_text_eoln",
        "documentation": "With this function you can get _GameMaker Studio 2_ to check the currently opened file to see if the line being read has finished. The function returns true if the end of the line has been reached and false otherwise.",
        "return": "Boolean"
    },
    "image_number": {
        "parameters": [],
        "example": {
            "code": "if image_speed &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if image_index &gt; image_number - 1 instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "image_number;",
        "function": "image_number;",
        "documentation": "",
        "return": "Real"
    },
    "date_get_day_of_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to check."
            }
        ],
        "example": {
            "code": "mydayyear = date_get_day_of_year(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_day_of_year( date );",
        "function": "date_get_day_of_year",
        "documentation": "This function returns the day (from 1 to 366) within the year of the given datetime.",
        "return": "Real"
    },
    "dot_product_3d_normalised": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the first vector."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first vector."
            },
            {
                "label": "z1",
                "documentation": "The z coordinate of the first vector."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second vector."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second vector."
            },
            {
                "label": "z2",
                "documentation": "The z coordinate of the second vector."
            }
        ],
        "example": {
            "code": "var x1, y1, x2, y2;<br> x1 = 0;<br> y1 = 1;<br> z1 = 0;<br> x2 = o_Player.x - x;<br> y2 = o_Player.y - y;<br> z2 = o_Player.z - z;<br> if dot_product_3d_normalised(x1, y1, z1, x2, y2, z2) &gt; 0 above=true else above=false;<br>",
            "description": ""
        },
        "signature": "dot_product_3d_normalised(x1, y1, z1, x2, y2, z2)",
        "function": "dot_product_3d_normalised",
        "documentation": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).  \n  \nThe actual mathematical formula can be written like this:  \n  \n![](images/dot_product_image.png)",
        "return": "Real"
    },
    "event_inherited": {
        "parameters": [],
        "example": {
            "code": "event_inherited();<br> switch (sprite_index)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case spr_Enemy_1: dmg += 2; break;<br> &nbsp;&nbsp;&nbsp;case spr_Enemy_4: dmg -= 1; break;<br> &nbsp;&nbsp;&nbsp;case spr_Enemy_10: dmg +=10; break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "event_inherited();",
        "function": "event_inherited",
        "documentation": "This function will call the current event of the parent object of the instance. Normally, when an instance has a parent object, it automatically inherits all the same events as the parent, but if (for example) your parent object has a create event and you add one to your child object, all instances of the child object will run the new create event that you have added and _not_ that which is in the parent object. Should you need to use both the parent object event and the child object event of the same type, you should use this function as it will run the parent object event before continuing with the rest of the code or actions that the child event contains.",
        "return": "N/A."
    },
    "audio_set_master_gain": {
        "parameters": [
            {
                "label": "listenerIndex",
                "documentation": "The index of the listener to set the gain on."
            },
            {
                "label": "gain",
                "documentation": "Value for the global volume (0 to 1)."
            }
        ],
        "example": {
            "code": "var num = audio_get_listener_count();<br> for( var i = 0; i &lt; num; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;audio_set_master_gain(info[? \"index\"], 0.75);<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_set_master_gain(listenerIndex, gain);",
        "function": "audio_set_master_gain",
        "documentation": "With this function you can set the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function [audio\\_get\\_listener_info](audio_get_listener_info.html) to get the different indices available for the target platform. The gain value is based on a linear scale from 0 (silent) to 1 (full volume) and will affect the relative volume of all sounds and music played from within your game through that listener.",
        "return": "N/A"
    },
    "camera_set_view_pos": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "x",
                "documentation": "The x position to place the view at (in the room)"
            },
            {
                "label": "y",
                "documentation": "The y position to place the view at (in the room)"
            }
        ],
        "example": {
            "code": "camera_set_view_pos(view_camera[0], x - (view_wport[0] / 2), y - (view_hport[0] / 2));",
            "description": ""
        },
        "signature": "camera_set_view_pos(camera_id, x, y)",
        "function": "camera_set_view_pos",
        "documentation": "You can use this function to update the position of the camera view within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the x and y positions to set the camera to.",
        "return": "N/A"
    },
    "ds_list_write": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to write."
            }
        ],
        "example": {
            "code": "var str;<br> ini_open(\"save.ini\");<br> str =ds_list_write(list);<br> ini_write_string(\"Lists\", \"0\", str);<br> ds_list_clear(list);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ds_list_write(id);",
        "function": "ds_list_write",
        "documentation": "This function returns a string which can then be stored or transferred to another data structure using the [ds\\_list\\_read](ds_list_read.html) function.  \n  \n_**NOTE:** The returned string is not a human readable string, but rather a dump of the contents of the data-structure_",
        "return": "String"
    },
    "gpu_set_texfilter_ext": {
        "parameters": [
            {
                "label": "sampler_id",
                "documentation": "The sampler id from the shader."
            },
            {
                "label": "enable",
                "documentation": "Enable or disable texture filtering (true / false)"
            }
        ],
        "example": {
            "code": "var s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");<br> if gpu_get_texfilter_ext(s_tex)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter_ext(s_tex, false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter_ext(s_tex, true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_texfilter_ext(sampler_id, enable);",
        "function": "gpu_set_texfilter_ext",
        "documentation": "This function can be used to set the linear interpolation for a single sampler \"slot\" when using [Shaders](../../shaders/index.html) in _GameMaker Studio 2_. When this is enabled (true) the sampler texture will be smoothed and if this is disabled (false) then images will be drawn based on the nearest pixel. The default value is that set by the **Global Game Options** for your game, or that set using the function [gpu\\_set\\_texfilter](gpu_set_texfilter.html).",
        "return": "N/A"
    },
    "vertex_create_buffer": {
        "parameters": [],
        "example": {
            "code": "v_buff = vertex_create_buffer();",
            "description": ""
        },
        "signature": "vertex_create_buffer();",
        "function": "vertex_create_buffer",
        "documentation": "With this function you can create a new vertex buffer. This is a special _grow_ buffer created by _GameMaker Studio 2_ which is pre-formatted for use when building primitives (for use with shaders, for example). The function will return a \"Pointer\" (index) for the buffer which should then be used in all further calls to it.  \n  \nWhen using a vertex buffer created with this function you simply call [vertex_begin](vertex_begin.html) to start assigning vertex data to it to start to define your custom primitive, which will then be held in the buffer ready for submission to the shader. The buffer can be re-used when necessary (unless you have used the [vertex_freeze](vertex_freeze.html) function), with each call of [vertex_begin](vertex_begin.html) wiping the previous buffer data ready to accept the new data.",
        "return": "Pointer"
    },
    "draw_surface_part": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "left",
                "documentation": "The left position in the surface of the part to be drawn."
            },
            {
                "label": "top",
                "documentation": "The top position in the surface of the part to be drawn."
            },
            {
                "label": "w",
                "documentation": "The width of the part to be draw, from left."
            },
            {
                "label": "h",
                "documentation": "The height of the part to be drawn, from top."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            }
        ],
        "example": {
            "code": "draw_surface_part(surf, 8, 8, 32, 32, x, y);",
            "description": ""
        },
        "signature": "draw_surface_part(id, left, top, w, h, x, y);",
        "function": "draw_surface_part",
        "documentation": "With this function you can draw part of any surface at a given position within the room. As with [draw_surface](draw_surface.html) you can specify a surface, but you then need to specify the _relative coordinates_ within the surface of an area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the surface and all further coordinates should be taken from that position.",
        "return": "N/A"
    },
    "move_random": {
        "parameters": [
            {
                "label": "hsnap",
                "documentation": "The horizontal snapping (the size in pixels between 'cells')."
            },
            {
                "label": "vsnap",
                "documentation": "The vertical snapping (the size in pixels between 'cells')."
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_space) move_random(1,1);",
            "description": ""
        },
        "signature": "move_random(hsnap, vsnap);",
        "function": "move_random",
        "documentation": "With this function you can set the instance to a position anywhere in the room, but aligned to an \"invisible\" grid. So a value of 32 for the hsnap and vsnap will set the instance to a random position that is aligned to a grid of 32x32 squares. you can set these values to 1 to get a position anywhere in the room.  \n  \n_**NOTE:** This function will snap to the same positions every time the game is run afresh due to the fact that_ GameMaker Studio 2 generates the same initial random seed every time to make debugging code a far easier task. To avoid this behaviour use [randomise](../../maths/real%20valued%20functions/randomise.html) at the start of your game. This is only true when testing and debugging the game, as the final executable package will not show this behaviour and will be random every play.",
        "return": "N/A"
    },
    "layer_is_draw_depth_forced": {
        "parameters": [],
        "example": {
            "code": "if !layer_is_draw_depth_forced()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_force_draw_depth(true, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_is_draw_depth_forced()",
        "function": "layer_is_draw_depth_forced",
        "documentation": "This function can be used to check and see whether forced Z depth is enabled for rendering the layers in the project. See [layer\\_force\\_draw_depth](layer_force_draw_depth.html) for more information.",
        "return": "Boolean"
    },
    "audio_master_gain": {
        "parameters": [
            {
                "label": "gain",
                "documentation": "Value for the global volume (0 to 1)."
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_up)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if vol &lt; 1 vol += 0.05;<br> &nbsp;&nbsp;&nbsp;audio_master_gain(vol);<br> &nbsp;&nbsp;&nbsp;}<br> if keyboard_check(vk_down)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if vol &gt; 0 vol -= 0.05;<br> &nbsp;&nbsp;&nbsp;audio_master_gain(vol);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_master_gain(gain);",
        "function": "audio_master_gain",
        "documentation": "With this function you can set the absolute value for the global volume of all sounds and music. It is based on a linear scale from 0 (silent) to 1 (full volume) and will affect the relative volume of all sounds and music played from within your game. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
        "return": "N/A"
    },
    "device_mouse_x_to_gui": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if device_mouse_x_to_gui(0) &gt; 0 &amp;&amp; device_mouse_x_to_gui(0) &lt; 32<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_x_to_gui(device);",
        "function": "device_mouse_x_to_gui",
        "documentation": "This function returns the x position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution _and_ the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs. touched.",
        "return": "Real"
    },
    "gamepad_get_button_threshold": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            }
        ],
        "example": {
            "code": "if gamepad_get_button_threshold(0) != 0.5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gamepad_set_button_threshold(0, 0.5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_get_button_threshold(device);",
        "function": "gamepad_get_button_threshold",
        "documentation": "This function can be used to detect the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being \"pressed\" for games that require them to act as a digital button.",
        "return": "Real"
    },
    "ds_grid_add_grid_region": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the destination grid."
            },
            {
                "label": "source",
                "documentation": "The index of the source grid."
            },
            {
                "label": "x1",
                "documentation": "The left position of the region of cells to copy from the source grid."
            },
            {
                "label": "y1",
                "documentation": "The top position of the region of cells to copy from the source grid."
            },
            {
                "label": "x2",
                "documentation": "The right position of the region of cells to copy from the source grid."
            },
            {
                "label": "y2",
                "documentation": "The bottom position of the region of cells to copy from the source grid."
            },
            {
                "label": "xpos",
                "documentation": "The x position on the destination grid to add the source region to."
            },
            {
                "label": "ypos",
                "documentation": "The y position on the destination grid to add the source region to."
            }
        ],
        "example": {
            "code": "ds_grid_add_grid_region(grid, grid, 0, 0, 1, 5, 2, 0)<br>",
            "description": ""
        },
        "signature": "ds_grid_add_grid_region(index, source, x1, y1, x2, y2, xpos, ypos);",
        "function": "ds_grid_add_grid_region",
        "documentation": "This function can be used to add all the values of all the cells found within the source area of a grid to the values within the destination grid, as illustrated below: ![](ds_grid_add_grid_region.png)",
        "return": "N/A"
    },
    "draw_get_swf_aa_level": {
        "parameters": [],
        "example": {
            "code": "if draw_get_swf_aa_level() == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_enable_swf_aa(true);<br> &nbsp;&nbsp;&nbsp;draw_set_swf_aa_level(0.5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_get_swf_aa_level();",
        "function": "draw_get_swf_aa_level",
        "documentation": "This function can be used to get the anti-aliasing (AA) level for SWF format vector sprites. The return value will between 0 and 1 and shows how \"smooth\" the edges of these sprites will be drawn. You can set the AA level using the function [draw\\_set\\_swf\\_aa\\_level()](draw_set_swf_aa_level.html).",
        "return": "Real"
    },
    "filename_path": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The file name and path to use."
            }
        ],
        "example": {
            "code": "path = filename_path(working_directory + \"Test.ini\");<br>",
            "description": ""
        },
        "signature": "filename_path(fname);",
        "function": "filename_path",
        "documentation": "Using this function returns the path part of the indicated file path, including the final backslash.",
        "return": "String"
    },
    "cos": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in radians) to return the cosine of."
            }
        ],
        "example": {
            "code": "val = cos( 0 );",
            "description": ""
        },
        "signature": "cos(val);",
        "function": "cos",
        "documentation": "In a right angled triangle _cos(val) = Adjacent / Hypotenuse_ where val is one of the three angles. This function will always return a number between 1 and -1.",
        "return": "Real"
    },
    "lengthdir_y": {
        "parameters": [
            {
                "label": "len",
                "documentation": "The length away of the point to return."
            },
            {
                "label": "dir",
                "documentation": "The direction of the point to return."
            }
        ],
        "example": {
            "code": "var _xx = x + lengthdir_x(64, image_angle);<br> var _yy = y + lengthdir_y(64, image_angle);<br> instance_create_layer(_xx, _yy, \"Bullets\", obj_bullet);",
            "description": ""
        },
        "signature": "lengthdir_y(len, dir);",
        "function": "lengthdir_y",
        "documentation": "This function is used to get the **y** component of a position \"len\" pixels from the starting point and in direction \"dir\". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move to that point we need to move the object so many pixels in that direction... so this function (when used with [lengthdir_x](lengthdir_x.html)) gets the position of that point on the circle to be used in code by the instance. See the image below for details: ![](lengthdir_image.png)",
        "return": "Real"
    },
    "logn": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The log base."
            },
            {
                "label": "val",
                "documentation": "The input value."
            }
        ],
        "example": {
            "code": "logval = logn(5, num);",
            "description": ""
        },
        "signature": "logn(n, val);",
        "function": "logn",
        "documentation": "This function is similar to the [log2(n)](log2.html) and [log10(n)](log10.html)functions, only you stipulate the log base value. For example, logn(5,25) will return how many 5's we need to multiply to get 25 (which is 2).",
        "return": "Real"
    },
    "room_goto_previous": {
        "parameters": [],
        "example": {
            "code": "if room_exists(room_previous(room)) room_goto_previous();",
            "description": ""
        },
        "signature": "room_goto_previous();",
        "function": "room_goto_previous",
        "documentation": "",
        "return": "N/A"
    },
    "sprite_get_bbox_top": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to check."
            }
        ],
        "example": {
            "code": "var ww, hh;<br> ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index);<br> hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);<br>",
            "description": ""
        },
        "signature": "sprite_get_bbox_top(ind);",
        "function": "sprite_get_bbox_top",
        "documentation": "This function returns the relative position of the top of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the [collision mask properties](../../../2_interface/1_editors/sprites.html). The image below shows how it is calculated: ![](spr_bbox.png)",
        "return": ""
    },
    "current_minute": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, \"The time is \" + string(current_hour) + \":\" + string(current_minute) + \".\" + string(current_second));<br>",
            "description": ""
        },
        "signature": "current_minute;",
        "function": "current_minute;",
        "documentation": "This **read only** variable will return the minutes that correspond to the current moment.",
        "return": "Real"
    },
    "layer_background_get_htiled": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if !layer_background_get_htiled(back_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_htiled(back_id, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_htiled(background_element_id);",
        "function": " layer_background_get_htiled",
        "documentation": "",
        "return": "Boolean"
    },
    "skeleton_animation_mix": {
        "parameters": [
            {
                "label": "animfrom",
                "documentation": "The name (a string) of the first animation set to interpolate from."
            },
            {
                "label": "animto",
                "documentation": "The name (a string) of the second animation set to interpolate to."
            },
            {
                "label": "duration",
                "documentation": "The duration of the interpolation (from 0 to 1)"
            }
        ],
        "example": {
            "code": "skeleton_animation_set(\"walk\");<br> skeleton_animation_mix(\"walk\", \"jump\", 0.2);<br> skeleton_animation_mix(\"jump\", \"walk\", 0.4);<br>",
            "description": ""
        },
        "signature": "skeleton_animation_mix(animfrom, animto, duration);",
        "function": "skeleton_animation_mix",
        "documentation": "You can switch animation sets easily using the [skeleton\\_animation\\_set](skeleton_animation_set.html) function, but this may cause a skip or stutter as one animation is swapped for another. To prevent this, you can set the mix value between two animation sets and the sprite will interpolate between them. normally you would want to do this in the Create Event of the instance with the skeletal animation as it only needs set once, and _GameMaker Studio 2_ will interpolate all further changes to the sprite using the animation sets in that instance. Note that the duration value is from 0 to 1, where a value of 0.5 would have a \"half and half\" interpolation from one set to the other.",
        "return": "N/A"
    },
    "gamepad_button_value": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "button",
                "documentation": "Which gamepad button constant to check for."
            }
        ],
        "example": {
            "code": "speed = gamepad_button_value(0, gp_shoulderrb) * 4;",
            "description": ""
        },
        "signature": "gamepad_button_value(device, button);",
        "function": "gamepad_button_value",
        "documentation": "With this function you can get the current value of an analogue button, from 0 to 1, where 0 is no pressure and 1 is full pressure.",
        "return": "Real"
    },
    "gpu_get_blendmode": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_blendmode() != bm_normal<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_blendmode(bm_normal);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode();",
        "function": "gpu_get_blendmode",
        "documentation": "This function can be used to retrieve the current blend mode being used for drawing. The returned value wll be one of the following constants (the default value is bm_normal):",
        "return": "Constant (see above for constants)"
    },
    "draw_light_define_direction": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index number of the light (arbitrary)"
            },
            {
                "label": "x",
                "documentation": "The x component of the light vector"
            },
            {
                "label": "y",
                "documentation": "The y component of the light vector"
            },
            {
                "label": "z",
                "documentation": "The z component of the light vector"
            },
            {
                "label": "col",
                "documentation": "The colour to use for the light (either a constant, a real or a hex value)."
            }
        ],
        "example": {
            "code": "draw_set_lighting(true);<br> draw_light_define_direction(1, 0, 1, 0, c_white);<br> draw_light_enable(1, true);<br>",
            "description": ""
        },
        "signature": "draw_light_define_direction(ind, x, y, z, col)",
        "function": "draw_light_define_direction",
        "documentation": "This function is for defining a directional light, where the direction and intensity are set by the values input for the x, y and z unit vector (meaning that they must be between -1 and 1, where 1 or -1 is full intensity, and 0 is no intensity). The lights can also be given a colour, which will also affect the perceived intensity of the light as certain colours appear \"darker\" than others. You must also give the light an index number which what will be used in other functions to reference it.",
        "return": "N/A"
    },
    "draw_set_valign": {
        "parameters": [
            {
                "label": "valign",
                "documentation": "Vertical alignment."
            }
        ],
        "example": {
            "code": "draw_set_halign(fa_center);<br> draw_set_valign(fa_middle);<br> draw_text(100, 32, \"Score: \" + string(score));<br>",
            "description": ""
        },
        "signature": "draw_set_valign(valign);",
        "function": "draw_set_valign",
        "documentation": "This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being **fa_top**. The following constants are accepted:",
        "return": "N/A"
    },
    "date_time_string": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to use."
            }
        ],
        "example": {
            "code": "str = date_time_string( date_current_datetime() );",
            "description": ""
        },
        "signature": "date_time_string( date );",
        "function": "date_time_string",
        "documentation": "With this function you can create a string containing the given time, formatted for the system or device that is running the game when the function is called.",
        "return": "String"
    },
    "date_week_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "diff = date_week_span( date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime() );",
            "description": ""
        },
        "signature": "date_week_span(date1, date2);",
        "function": "date_week_span",
        "documentation": "With this function you can get the number of weeks between two dates. This value is always positive, and incomplete weeks will be returned as a fraction.",
        "return": "Real"
    },
    "math_set_epsilon": {
        "parameters": [
            {
                "label": "epsilon",
                "documentation": "The new epsilon value (from 0 to 0.999999999)."
            }
        ],
        "example": {
            "code": "math_set_epsilon(0.0001);",
            "description": ""
        },
        "signature": "math_set_epsilon(epsilon);",
        "function": "math_set_epsilon",
        "documentation": "Epsilon is a value used to determine whether two numbers subject to rounding error are close enough to be considered \"equal\". It is useful when dealing with floating point maths as it can reduce the \"rounding errors\" that make certain operations return values that appear incorrect or contrary to what we expect. For example, we may have added a value to the image index of a sprite and expect the result to be a single integer, but due to the nature of floating point maths, the actual final value ends up being something like 5.0000002, so when we have the following check:",
        "return": "Real"
    },
    "path_get_closed": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            }
        ],
        "example": {
            "code": "state = path_get_closed(c_path)",
            "description": ""
        },
        "signature": "path_get_closed(index);",
        "function": "path_get_closed",
        "documentation": "This function can be used to return whether the path is flagged as closed (true) or open (false), ie whether the path loops or if it has a definitive beginning and end.",
        "return": "Boolean."
    },
    "room_get_viewport": {
        "parameters": [
            {
                "label": "rm",
                "documentation": "The index of the room to get viewport data from"
            },
            {
                "label": "vind",
                "documentation": "The index of the view port to get"
            }
        ],
        "example": {
            "code": "v_vals = room_get_viewport(rm_Game, 0);<br> if v_vals[0] == false<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;room_set_view(rm_Game, true, v_vals[1], v_vals[2], v_vals[3], v_vals[4]);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_get_viewport(rm, vind);",
        "function": "room_get_viewport",
        "documentation": "With this function you can retrieve the details of a view port in a room other than the current one. You give the room ID and the index of the view port to retrieve (from 0 to 7) and the function will return an array of 5 indices, where:",
        "return": "Array (5 elements: visible, x, y, width, height)"
    },
    "steam_user_owns_dlc": {
        "parameters": [
            {
                "label": "dlc_id",
                "documentation": "The unique identifier for the DLC to be checked (an integer)."
            }
        ],
        "example": {
            "code": "global.Level_Max = 100;<br> if steam_user_owns_dlc(10354)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if steam_user_installed_dlc(10354)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.Level_max = 200;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_user_owns_dlc(dlc_id);",
        "function": "steam_user_owns_dlc",
        "documentation": "If your game has DLC created for it, you can use this function to check and see whether the user has bought it before accessing any files associated with it. The function returns true if the player owns the content, and false if the user does not, but note that even if the user owns the DLC, they may not have it installed, so you should use the additional function of [steam\\_user\\_installed_dlc](steam_user_installed_dlc.html) to check that it is installed as well before using it.",
        "return": "Boolean"
    },
    "timeline_moment_clear": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the time line to clear."
            },
            {
                "label": "step",
                "documentation": "The moment to clear."
            }
        ],
        "example": {
            "code": "timeline_moment_clear(global.tl, room_speed * 30);<br>",
            "description": ""
        },
        "signature": "timeline_moment_clear(ind, step);",
        "function": "timeline_moment_clear",
        "documentation": "With this function you can clear a specific moment of any previously defined time line of all codes and actions.",
        "return": "N/A"
    },
    "window_get_width": {
        "parameters": [],
        "example": {
            "code": "ww = window_get_width();",
            "description": ""
        },
        "signature": "window_get_width();",
        "function": "window_get_width",
        "documentation": "",
        "return": "Real"
    },
    "gpu_get_tex_max_mip_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_max_mip_ext(_sampleIndex) != 4<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_mip_ext(_sampleIndex, 4);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_max_mip_ext(sampler_index);",
        "function": "gpu_get_tex_max_mip_ext",
        "documentation": "With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
        "return": "Real (default: 16)"
    },
    "gpu_get_tex_mip_enable_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_mip_enable_ext(_sampleIndex) != mip_on<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_enable_ext(_sampleIndex, mip_on);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_mip_enable_ext(sampler_index);",
        "function": "gpu_get_tex_mip_enable_ext",
        "documentation": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the [Texture Group Manager](../../../../2_interface/3_settings/textures.html) on a shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return one of the constants listed below.",
        "return": "Constant:"
    },
    "file_text_open_append": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to append to."
            }
        ],
        "example": {
            "code": "file = file_text_open_append(working_directory + \"save.txt\");",
            "description": ""
        },
        "signature": "file_text_open_append(fname);",
        "function": "file_text_open_append",
        "documentation": "This function opens the text file with the indicated filename for _writing_ (if the file does not exist, it is created), returning the unique _id_ of the file that which should be stored in a variable as it will be used for all further actions to do with that file. The position within the file for writing to is set to the last line of text that the file contains. Note that if the file _can't_ be created (because of an illegal filename, for example) the function will return -1.  \n  \n  \n_**NOTE:** You can only have a maximum of 32 files open at any one time. You should also **always** close files when finished as this writes the information and frees the memory associated with the file._  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "Real"
    },
    "physics_particle_group_begin": {
        "parameters": [
            {
                "label": "flags",
                "documentation": "The flags to set on the particle."
            },
            {
                "label": "groupflags",
                "documentation": "The group flags to set on the particle (see Description below)."
            },
            {
                "label": "x",
                "documentation": "The x position to create the particle group at."
            },
            {
                "label": "y",
                "documentation": "The y position to create the particle group at."
            },
            {
                "label": "ang",
                "documentation": "The angle (in degrees) to rotate the group to on create."
            },
            {
                "label": "xv",
                "documentation": "The initial horizontal velocity."
            },
            {
                "label": "yv",
                "documentation": "The initial vertical velocity."
            },
            {
                "label": "ang_velocity",
                "documentation": "The initial angular velocity."
            },
            {
                "label": "col",
                "documentation": "The base colour to use for the particle group."
            },
            {
                "label": "alpha",
                "documentation": "The base alpha to use for the particle group."
            },
            {
                "label": "strength",
                "documentation": "Set the cohesion strength between particles in the group."
            },
            {
                "label": "category",
                "documentation": "The user defined category to which the group belongs."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid | phy_particle_group_flag_rigid;<br> physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_circle(100);<br> mLastGroup = physics_particle_group_end();<br>",
            "description": ""
        },
        "signature": "physics_particle_group_begin(flags, groupflags, x, y, ang, xv, yv, ang_velocity, col, alpha, strength, category)",
        "function": "physics_particle_group_begin",
        "documentation": "With this function you can create a group of particles in a room. A group of particles is one where the particles necessary to create a specific form are created all at once as a group, permitting you to create simulated soft-bodies with various properties set by the flags used. The \"flags\" are the return value of a combination of the **particle constants** (see the function [physics\\_particle\\_create](physics_particle_create.html) for details of these), while the \"groupFlags\" are a combination of the following **group constants** (or 0 for no flags):",
        "return": "N/A"
    },
    "physics_particle_group_get_angle": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "ang = physics_particle_group_get_angle(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_angle(group)",
        "function": "physics_particle_group_get_angle",
        "documentation": "With this function you can retrieve the rotation (angle) in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "room_set_height": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to set the height of."
            },
            {
                "label": "h",
                "documentation": "The new height of the room in pixels."
            }
        ],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_width(global.myroom, 640);<br> room_set_height(global.myroom, 480);<br> room_set_persistent(global.myroom, false);",
            "description": ""
        },
        "signature": "room_set_height(index, h);",
        "function": "room_set_height",
        "documentation": "",
        "return": "N/A"
    },
    "string_lettersdigits": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to convert to letters and digits."
            }
        ],
        "example": {
            "code": "if string_length(password) &gt; string_length(string_lettersdigits(password))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_text(32,32,\"Invalid Password! Only Letters and numbers please!\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "string_lettersdigits(string);",
        "function": "string_lettersdigits",
        "documentation": "This function will return a copy of a given string with everything but its letters and digits removed, which means it can be used to remove any unwanted characters (like \"#\" or \"?\") from, for example, a login name or a password.",
        "return": "String"
    },
    "string_width_ext": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to measure the width of."
            },
            {
                "label": "sep",
                "documentation": "The distance in pixels between lines of text as if the string was being drawn."
            },
            {
                "label": "w",
                "documentation": "The maximum width (in pixels) of the string before a line break as if the string was bring drawn."
            }
        ],
        "example": {
            "code": "var ww;<br> ww = string_width_ext(str_Story_Text[1], -1, 100);<br> draw_text_ext(32, 32, str_Story_Text[1], -1, 100);<br> draw_text_ext(32 + ww, 32, str_Story_Text[2], -1, 100);<br>",
            "description": ""
        },
        "signature": "string_width_ext(string, sep, w);",
        "function": "string_width_ext",
        "documentation": "This function will return the maximum width (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy for calculating distances between text elements based on the maximum width of a string that is split over several lines as it would be drawn with [draw\\_text\\_ext](../drawing/text/draw_text_ext.html) using the currently defined font. Separation and width can be set to -1 to get the default spacing.",
        "return": "Real"
    },
    "gpu_get_alphatestenable": {
        "parameters": [],
        "example": {
            "code": "if !gpu_get_alphatestenable()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_alphatestenable(true);<br> &nbsp;&nbsp;&nbsp;gpu_set_alphatestref(128);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_get_alphatestenable();",
        "function": "gpu_get_alphatestenable",
        "documentation": "With this function you can check to see whether alpha testing is enabled (returns true) or not (returns false). For more information on alpha testing, see the function [gpu\\_set\\_alphatestref](gpu_set_alphatestref.html).",
        "return": "Boolean"
    },
    "gpu_get_tex_mip_bias_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_mip_bias_ext(_sampleIndex) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_bias_ext(_sampleIndex, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_mip_bias_ext(sampler_index);",
        "function": "gpu_get_tex_mip_bias_ext",
        "documentation": "With this function you can retrieve the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return a value of 0.0 for no bias, or a greater value where 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this can return negative values too, in which case shader textures will be sharper over a greater distance the lower the value.",
        "return": "Real (default: 0)"
    },
    "alarm": {
        "parameters": [],
        "example": {
            "code": "if canshoot<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canshoot = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Bullets\", obj_Bullet);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "alarm[val];",
        "function": "alarm[val];",
        "documentation": "",
        "return": "Real (steps in the alarm, -1 if the alarm isn't running)"
    },
    "shader_set_uniform_matrix": {
        "parameters": [
            {
                "label": "handle",
                "documentation": "The handle of the shader constant to set."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> shader_matrix = shader_get_uniform(shader_glass, \"u_vMatrix\");<br> shader_set_uniform_matrix(shader_matrix);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set_uniform_matrix(handle);",
        "function": "shader_set_uniform_matrix",
        "documentation": "With this function you can set the value (or values) of a shader constant to the current transform matrix (as set using the [Matrix Functions](../matrices/index.html)). You must previously have gotten the \"handle\" of the constant using the function [shader\\_get\\_uniform](shader_get_uniform.html).",
        "return": "N/A"
    },
    "buffer_set_surface": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "surface",
                "documentation": "The index of the surface to use."
            },
            {
                "label": "mode",
                "documentation": "The data to get from the buffer (see the list of constants below)."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            },
            {
                "label": "modulo",
                "documentation": "The offset from the end of the line to the start of the next"
            }
        ],
        "example": {
            "code": "buffer_set_surface(buff, application_surface, 0, 0, 0);",
            "description": ""
        },
        "signature": "buffer_set_surface(buffer, surface, mode, offset, modulo);",
        "function": "buffer_set_surface",
        "documentation": "With this function you can write the information from a buffer to a given surface. Both the buffer and the surface must have been created previously. You can choose the copy \"mode\" for the data being stored which is set by the constants listed below, as well as the offset and modulo values. Both offset and modulo are byte values, with the offset defining the start position within the buffer and modulo being the number of bytes that were left at the end of every line (for storing additional data) when the buffer was written to.",
        "return": "N/A"
    },
    "device_is_keypad_open": {
        "parameters": [],
        "example": {
            "code": "if device_is_keypad_open()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Setting = 2;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Setting = 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_is_keypad_open",
        "function": "device_is_keypad_open",
        "documentation": "This does a check of the device for a keypad and if one is available it returns true otherwise it returns false. Please note that this function is mainly for use with Android devices.  \n  \nFor those users with a _Sony Xperia Play_, there is a set button/key map setup within _GameMaker Studio 2_, so you can use the [keyboard constants](../keyboard%20input/index.html) **vk_up**, **vk_down**, **vk_left**, **vk_right** for the joypad keys and _Triangle_ is ord(\"T\"), _Square_ is ord(\"S\"), _Circle_ is **vk_alt** \\+ **vk_backspace** while the _back_ button is simply vk_backspace, _Cross_ is **vk_space**, _Select_ is **vk_return** and _Start_ is **vk_rshift**, the _L Trigger_ is ord(\"L\") and _R Trigger_ is ord(\"R\").",
        "return": "Boolean"
    },
    "ds_grid_width": {
        "parameters": [
            {
                "label": "index",
                "documentation": "This index of the grid to find the width of."
            }
        ],
        "example": {
            "code": "var i, j;<br> for (i = 0; i &lt; ds_grid_width(grid); i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;for (j = 0; j &lt; ds_grid_height(grid); j += 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ds_grid_get(grid, i, j) = 1<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(i * 32, j * 32, \"Walls\", obj_Wall);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_width(index);",
        "function": "ds_grid_width",
        "documentation": "This function will return the width of the given grid. This value is the number of cells the grid has along the x-axis and is always an integer, as shown in the image below: ![](ds_grid_width.png)",
        "return": "Real"
    },
    "ds_stack_top": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read from."
            }
        ],
        "example": {
            "code": "num = ds_stack_top(control_stack);",
            "description": ""
        },
        "signature": "ds_stack_top(id);",
        "function": "ds_stack_top",
        "documentation": "This function will _only_ read the first value of the stack (that which is \"on top\"). It will not _pop_ the value, meaning that it can still be read in the future by this function or the [ds\\_stack\\_pop](ds_stack_pop.html).",
        "return": "Real or String"
    },
    "image_angle": {
        "parameters": [],
        "example": {
            "code": "image_angle = point_direction(x, y, mouse_x, mouse_y);",
            "description": ""
        },
        "signature": "image_angle;",
        "function": "image_angle;",
        "documentation": "",
        "return": "Real"
    },
    "shader_set_uniform_f_array": {
        "parameters": [
            {
                "label": "handle",
                "documentation": "The handle of the shader constant to set."
            },
            {
                "label": "array",
                "documentation": "A previously initialised array of floating point values."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> tex_array[0] = 0.5;<br> tex_array[1] = 0.1;<br> tex_array[2] = 0.25;<br> shader_params = shader_get_uniform(shader_glass, \"u_vParams\");<br> shader_set_uniform_f_array(shader_params, tex_array);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set_uniform_f_array(handle, array);",
        "function": "shader_set_uniform_f_array",
        "documentation": "With this function you can set a shader constant to hold an array of values. You must previously have gotten the \"handle\" of the constant using the function [shader\\_get\\_uniform](shader_get_uniform.html), and you will have to have previously initialised the array.",
        "return": "N/A"
    },
    "buffer_sha1": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer."
            }
        ],
        "example": {
            "code": "check_string = buffer_sha1(buff, 0, buffer_get_size(buff));",
            "description": ""
        },
        "signature": "buffer_sha1(buffer, offset, size);",
        "function": "buffer_sha1",
        "documentation": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular **Git** where it is used to check for file changes. This function will take input data from a buffer and returns a 160 bit message digest in ASCII format. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed.",
        "return": "String"
    },
    "ds_grid_shuffle": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid to shuffle."
            }
        ],
        "example": {
            "code": "ds_grid_shuffle(grid)<br>",
            "description": ""
        },
        "signature": "ds_grid_shuffle(index);",
        "function": "ds_grid_shuffle",
        "documentation": "This function can be used to randomise the positions of all values in all cells within a grid.",
        "return": "N/A"
    },
    "texture_get_height": {
        "parameters": [
            {
                "label": "tex",
                "documentation": "The texture page asset pointer to use"
            }
        ],
        "example": {
            "code": "tex_h = texture_get_height(surface_get_texture(global.Surf));",
            "description": ""
        },
        "signature": "texture_get_height(tex);",
        "function": "texture_get_height",
        "documentation": "Returns the height of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.",
        "return": "Real"
    },
    "xprevious": {
        "parameters": [],
        "example": {
            "code": "if x != xprevious || y != yprevious<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;moved = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "xprevious;",
        "function": "xprevious;",
        "documentation": "This built-in variable returns the _previous_ x position for the instance. This variable will be set just before the start of the **begin step event** but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.",
        "return": "Real"
    },
    "mp_linear_step_object": {
        "parameters": [
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "obj",
                "documentation": "The object that is to block the path. Can be an object index, an instance id or the special keyword, all"
            }
        ],
        "example": {
            "code": "if mp_linear_step_object(mouse_x, mouse_y, 5, obj_Wall)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Effects\", obj_Explosion);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_linear_step_object(xgoal, ygoal, stepsize, obj);",
        "function": "mp_linear_step_object",
        "documentation": "With this function you tell an instance to take a \"step\" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like [move\\_towards\\_point](../movement/move_towards_point.html). The stepsize is also the distance \"ahead\" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with an object or instance of your choice.",
        "return": "Boolean."
    },
    "skeleton_get_num_bounds": {
        "parameters": [],
        "example": {
            "code": "var num = skeleton_get_num_bounds();<br> var yy = 60;<br> for(var i = 0; i &lt; num; i++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;var b_info = skeleton_get_bounds(i);<br> &nbsp;&nbsp;&nbsp;&nbsp;if b_info[0] &gt; 0<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data = b_info[1] + \":\";<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = 0; j &lt; b_info[0]; j++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data += \" (\" + string(b_info[(j * 2) + 2]) + \", \" + string(b_info[(j * 2) + 2 + 1]) + \")\";<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_text(20, yy, data);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy += 20;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_get_num_bounds();",
        "function": "skeleton_get_num_bounds",
        "documentation": "This function will return the number of bounding boxes associated with the skeleton animation sprite assigned to the instance running the code. This can then be used along with the function [skeleton\\_get\\_bounds](skeleton_get_bounds.html) to retrieve data about each of the bounding boxes.",
        "return": "Integer"
    },
    "steam_activate_overlay_user": {
        "parameters": [
            {
                "label": "dialog_name",
                "documentation": "The dialogue to open the overlay on (see below)."
            },
            {
                "label": "steamid",
                "documentation": "The Steam user ID or group ID to use."
            }
        ],
        "example": {
            "code": "var key = keyboard_lastkey;<br> switch (key)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case vk_f1: steam_activate_overlay_user(\"steamid\", global.GameGroupID); break;<br> &nbsp;&nbsp;&nbsp;case vk_f2: steam_activate_overlay_user(\"chat\", global.FriendID); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_activate_overlay_user(dialog_name, steamid);",
        "function": "steam_activate_overlay_user",
        "documentation": "This function will open the Steam overlay to one of the chosen dialogues relating to the user ID given. The possible dialogue strings available are:",
        "return": "N/A"
    },
    "audio_sound_get_gain": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to get the gain of."
            }
        ],
        "example": {
            "code": "if audio_sound_get_gain(snd_Music) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_sound_gain(snd_Music, 1, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sound_get_gain(index);",
        "function": "audio_sound_get_gain",
        "documentation": "This function will return the current gain value for the given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions, or an actual sound asset from the resource tree. Gain is usually calculated as a value from 0 to 1, but on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
        "return": "Real"
    },
    "window_views_mouse_get_x": {
        "parameters": [],
        "example": {
            "code": "myx = window_views_mouse_get_x();",
            "description": ""
        },
        "signature": "window_views_mouse_get_x();",
        "function": "window_views_mouse_get_x",
        "documentation": "This function returns the x-coordinate of the mouse with respect to all the active views and returns the same value [mouse_x](../../../controls/mouse%20input/mouse_x.html).",
        "return": "Real"
    },
    "device_mouse_raw_y": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left) &amp;&amp; device_mouse_check_button(1, mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x_av = mean(device_mouse_raw_x(0), device_mouse_raw_x(1));<br> &nbsp;&nbsp;&nbsp;y_av = mean(device_mouse_raw_y(0), device_mouse_raw_y(1));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_raw_y(device);",
        "function": "device_mouse_raw_y",
        "documentation": "This function returns raw y position of the touch on a device. What this means is that it returns the actual device definition of the y position that is being touched, _not_ the _GameMaker Studio 2_ one, and as such will ignore things like view position and scaling. Note that the maximum number of device touches that can be detected will depend very much on the device being used and the OS it runs.  \n  \n_**Note:** This function is very much device dependant and you should experiment first with the desired target module and device to see what exactly is returned._",
        "return": "Real"
    },
    "speed": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check(vk_up) speed = 2;<br> if keyboard_check(vk_left) direction += 5;<br> if keyboard_check(vk_right) direction -= 5;<br>",
            "description": ""
        },
        "signature": "speed;",
        "function": "speed;",
        "documentation": "All instances in _GameMaker Studio 2_ have certain \"built in\" properties that you can use and set to govern how they look and behave. speed is one of those properties and defines how many pixels the instance will move every step. Unlike [hspeed](hspeed.html) and [vspeed](vspeed.html), speed has no direction associated with it as this is governed by the [direction](direction.html) value of the instance, but it can have a negative value, in which case the instance will travel in the opposite direction to that set by the direction function (ie: direction \\- 180°).",
        "return": "Real"
    },
    "mp_linear_path_object": {
        "parameters": [
            {
                "label": "path",
                "documentation": "The index of the path to be used"
            },
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "obj",
                "documentation": "The object that is to block the path. Can be an object index, an instance id or the special keyword ,all"
            }
        ],
        "example": {
            "code": "if mp_linear_path_object(path, mouse_x, mouse_y, 4, obj_Wall) path_start(path, 4, 0, 0);",
            "description": ""
        },
        "signature": "mp_linear_path_object(path, xgoal, ygoal, stepsize, obj);",
        "function": "mp_linear_path_object",
        "documentation": "This function computes a straight line path from the current instance position to the point specified by the \"xgoal\" and \"ygoal\" values. It uses the indicated step size, the same as in the function [mp\\_linear\\_step()](mp_linear_step.html). The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). A full path is only found there was no collision with the specified object or instance and if false is returned then a path is still generated, but it will only run up to the position where the path was blocked.  \n  \n_**Note:** This function does not move the instance. It sets a path only, and you must use the [Path](../../paths/index.html) functions for movement._",
        "return": "Boolean"
    },
    "physics_world_draw_debug": {
        "parameters": [
            {
                "label": "flag",
                "documentation": "The flag value for showing different debug features"
            }
        ],
        "example": {
            "code": "flag = phy_debug_render_aabb | phy_debug_render_collision_pairs | phy_debug_render_obb;<br> physics_world_draw_debug(flag);<br>",
            "description": ""
        },
        "signature": "physics_world_draw_debug(flag)",
        "function": "physics_world_draw_debug",
        "documentation": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
        "return": "N/A"
    },
    "gamepad_button_check_pressed": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "button",
                "documentation": "Which gamepad button constant to check for."
            }
        ],
        "example": {
            "code": "if gamepad_button_check_pressed(0, gp_start)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound(snd_Start, 0, false);<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Level_1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_button_check_pressed(device, button);",
        "function": "gamepad_button_check_pressed",
        "documentation": "This function will return true or false depending on whether the given gamepad button is detected as having been pressed or not. Note that this function will only trigger _once_ for the button the first time it is pressed. For it to trigger again the button must first be released and then re-pressed. If you need to check a continuous press of the button you should be using the function [gamepad\\_button\\_check](gamepad_button_check.html).",
        "return": "Boolean"
    },
    "ds_priority_write": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "var str;<br> ini_open(\"save.ini\");<br> str =ds_priority_write(p_queue);<br> ini_write_string(\"P_Queues\", \"0\", str);<br> ds_priority_clear(p_queue);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ds_priority_write(id);",
        "function": "ds_priority_write",
        "documentation": "This function returns a string which can then be stored or transferred to another data structure using the [ds\\_priority\\_read](ds_priority_read.html) function.  \n  \n_**NOTE:** The returned string is not a human readable string, but rather a dump of the contents of the data-structure_",
        "return": "String"
    },
    "font_add": {
        "parameters": [
            {
                "label": "name",
                "documentation": "The name of the font to be added (eg 'Arial'), or the file path if the font is an included *.ttf file."
            },
            {
                "label": "size",
                "documentation": "The size of the font - points for Web Fonts, pixels for *.ttf fonts."
            },
            {
                "label": "bold",
                "documentation": "Whether the font is bold (true) or not (false)."
            },
            {
                "label": "italics",
                "documentation": "Whether the font is italic (true) or not (false)."
            },
            {
                "label": "first",
                "documentation": "The first character to include (if you're unsure, go for 32)."
            },
            {
                "label": "last",
                "documentation": "The last character to include (if you're unsure, go for 128)."
            }
        ],
        "example": {
            "code": "newfont = font_add( 'Arial', 24, true, true, 32, 128);<br>",
            "description": ""
        },
        "signature": "font_add(name, size, bold, italic, first, last);",
        "function": "font_add",
        "documentation": "This function can be used to add a font to your game from those fonts that are installed on the system it is running on. You can define the size of the font (in points), as well as whether the font should be **bold** or _italic_, and you can also define the range of characters to include (for a full table of available characters and their UTF8 value see [Font tables](font_tables.html)). The function returns an _index_ value that should be stored in a variable as this will be needed in all further codes that refer to this font.",
        "return": "Real"
    },
    "instance_create_depth": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position the object will be created at"
            },
            {
                "label": "y",
                "documentation": "The y position the object will be created at"
            },
            {
                "label": "depth",
                "documentation": "The depth to assign the created instance to"
            },
            {
                "label": "obj",
                "documentation": "The object index of the object to create an instance of"
            }
        ],
        "example": {
            "code": "var inst;<br> inst = instance_create_depth(x, y, -10000, obj_Bullet);<br> with (inst)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;speed = other.shoot_speed;<br> &nbsp;&nbsp;&nbsp;direction = other.image_angle;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_create_depth(x, y, depth, obj);",
        "function": "instance_create_depth",
        "documentation": "With this function you can create a new instance of the specified object at any given point within the room and at the depth specified. The depth can be any value, where the lower the depth the \"nearer\" to the camera things will be drawn and the higher the depth the further away, so an instance at depth -200 will be drawn over an instance at depth +300 (for example). Note that this function will actually create a room layer for the instance, since all instances _must_ be on a layer in the room, but since this is a _managed_ layer (ie: not one that you have created through code or in the room, but one that _GameMaker Studio 2_ has created automatically) you cannot access it, and the [layer](../instance_variables/layer.html) instance variable will return -1.",
        "return": "Real (instance ID value)"
    },
    "dtan": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in degrees) to return the tangent of."
            }
        ],
        "example": {
            "code": "val = dtan(45);",
            "description": ""
        },
        "signature": "dtan(val);",
        "function": "dtan",
        "documentation": "In a right angled triangle _dtan(val) = Opposite / Adjacent_ where \"val\" is one of the three angles.",
        "return": "Real"
    },
    "phy_linear_velocity_x": {
        "parameters": [],
        "example": {
            "code": "if phy_linear_velocity_x != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_linear_velocity_x = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_linear_velocity_x;",
        "function": "phy_linear_velocity_x;",
        "documentation": "This variable can be used to get or to change the x component the instances linear velocity vector and is defined in pixels per second (for pixels per step, see [phy\\_speed\\_x](phy_speed_x.html)). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
        "return": "Real"
    },
    "physics_particle_set_damping": {
        "parameters": [
            {
                "label": "damping",
                "documentation": "The linear damping to be applied to the particle fixture."
            }
        ],
        "example": {
            "code": "physics_particle_set_radius(15);<br> physics_particle_set_density(0.5);<br> physics_particle_set_damping(1);<br> physics_particle_set_gravity_scale(1);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_damping(damping)",
        "function": "physics_particle_set_damping",
        "documentation": "With this function you can set the linear damping of particles in the simulation. Damping is used to reduce the physics simulation velocity of instances over time, much like air resistance in the real world. This function is _global_ in scope, in that it will change the damping not just for new particles created after the change, but also for those already present in the simulation.",
        "return": "N/A"
    },
    "ansi_char": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The raw byte value."
            }
        ],
        "example": {
            "code": "var str1 = ansi_char($EF);<br> var str2 = ansi_char($BB);<br> var str3 = ansi_char($BF);<br> file_text_write_string(global.saveFile, str1 + str2 + str3);<br>",
            "description": ""
        },
        "signature": "ansi_char(val);",
        "function": "ansi_char",
        "documentation": "This function returns a string containing the character with raw BYTE value set. This will not, _and should not_, be displayed, but it will save correctly to disk for use in encoding.",
        "return": "String (Single character)"
    },
    "string_format": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The real number to be turned into a string."
            },
            {
                "label": "tot",
                "documentation": "The total number of places of the main number to be shown. Zeroes or spaces will be inserted to match this."
            },
            {
                "label": "dec",
                "documentation": "The number of decimal places to be included."
            }
        ],
        "example": {
            "code": "str1 = string_format(1234, 8, 0);<br> str2 = string_format(pi, 1, 10);<br> str3 = string_format(pi, 5, 5);<br>",
            "description": ""
        },
        "signature": "string_format(val, tot, dec);",
        "function": "string_format",
        "documentation": "Turns a real number into a string using your own formatting, where you can choose how many \"places\" are saved to the string and how many decimal places are saved also. Both can be very handy, some games prefer to display a score as a set number of digits, while control over decimal places can be good for a high accuracy the two decimal places of [string()](string.html) cannot provide. If the number of places specified is greater than the value to be shown and/or the number plus the decimal places that have been specified is less than the total places, then spaces will be added before the value to make up the difference (see the example below). Zeros will be added to the right of the decimal point if the value given is less than the total and the number of decimal places to include.",
        "return": "String"
    },
    "audio_emitter_free": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to free."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_free(s_emit);<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_free(emitter);",
        "function": "audio_emitter_free",
        "documentation": "With this function you can remove the given emitter from memory. This should always be done whenever the emitter is not going to be used further in the room or the game, ie: in the [Destroy Event](../../../2_interface/1_editors/events/index.html) of the instance or in the [Room End Event](../../../2_interface/1_editors/events/index.html), otherwise you may end up with a memory leak that will slow down and eventually crash your game.",
        "return": "N/A"
    },
    "window_device": {
        "parameters": [],
        "example": {
            "code": "gfx_pointer = window_device()",
            "description": ""
        },
        "signature": "window_device();",
        "function": "window_device",
        "documentation": "This function will return the current d3d device _pointer_, which you can then (for example) pass through to a DLL or Dylib on Windows and macOS.",
        "return": "Pointer"
    },
    "ini_open_from_string": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string containing all the ini information."
            }
        ],
        "example": {
            "code": "ini_open_from_string(str)<br> global.sound = ini_read_string(\"Options\", \"Sound\", true);<br> ini_close();",
            "description": ""
        },
        "signature": "ini_open_from_string(string);",
        "function": "ini_open_from_string",
        "documentation": "This function will create an ini file from a string and open it for reading/writing. The string should be correctly formatted as an ini file (ie: with sections, line breaks keys and values) otherwise the ini file will not be created correctly. Note that this ini file is temporary and will be removed from memory the moment it is closed, losing any information that was stored in it, however the [ini_close](ini_close.html) function returns a string of the full ini file which can then be saved to a server or to disk.",
        "return": "N/A"
    },
    "layer_sprite_get_alpha": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_alpha(spr_id) &lt; 0.1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_destroy(spr_id);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_alpha(sprite_element_id);",
        "function": "layer_sprite_get_alpha",
        "documentation": "",
        "return": "Real (from 0 to 1)"
    },
    "audio_group_name": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index value constant of the audio group to check (as defined in the Audio Groups Window)"
            }
        ],
        "example": {
            "code": "var name= audio_group_name(audiogroup_level1);<br> draw_text(32, 32, \"Now Playing Group: \" + name);<br>",
            "description": ""
        },
        "signature": "audio_group_name(groupID);",
        "function": "audio_group_name",
        "documentation": "This function will return a string containing the name of the given audio group for displaying or checking. When you define an audio group in the Game Options, you give it a unique \"name\" which is really a constant to use as an ID _value for the group. All this function does is take the ID and return a string of the ID name you gave._",
        "return": "String"
    },
    "keyboard_lastkey": {
        "parameters": [],
        "example": {
            "code": "if (keyboard_lastkey != -1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;str += keyboard_lastchar;<br> &nbsp;&nbsp;&nbsp;keyboard_lastkey = -1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_lastkey;",
        "function": "keyboard_lastkey;",
        "documentation": "This variable refers to the value that keyboard_key was in the previous frame, returning the keycode of that key (all standard keycode constants are returned). This variable is _not_ read only and you can change it, for example to set it to -1 if you handled it already.",
        "return": "Real"
    },
    "debug_get_callstack": {
        "parameters": [],
        "signature": "debug_get_callstack()",
        "function": "debug_get_callstack",
        "documentation": "This function generates an array of strings, where thecurrent script is listed first. The exact string format will vary depending on the target platform chosen, but it will mostly have the script/event name, then a colon : and then the line number, something like this:",
        "return": "Array"
    },
    "application_surface": {
        "parameters": [],
        "example": {
            "code": "surface_resize(application_surface, display_get_gui_width(), display_get_gui_height())",
            "description": ""
        },
        "signature": "application_surface;",
        "function": "application_surface;",
        "documentation": "This global scope, built-in variable can be used to access the application surface using any of the surface functions. This surface is permanently available and is where the bulk of drawing is done by _GameMaker Studio 2_.",
        "return": "Pointer"
    },
    "font_exists": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "if font_exists(fnt_Main)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_set_font(fnt_Main);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "font_exists(ind);",
        "function": "font_exists",
        "documentation": "This function returns whether a font with the specified index exists or not. Please note, that the value used for checking _must have been initialised previously_ or else you will get an error causing _GameMaker Studio 2_ to close.",
        "return": "Boolean"
    },
    "path_positionprevious": {
        "parameters": [],
        "example": {
            "code": "var xx = x + lengthdir_x(speed, direction);<br> var yy = y + lengthdir_y(speed, direction);<br> if collision_circle(xx, yy, 16, obj_Player, false,true) path_position = path_positionprevious;<br>",
            "description": ""
        },
        "signature": "path_positionprevious;",
        "function": "path_positionprevious;",
        "documentation": "",
        "return": "Real"
    },
    "steam_file_write_file": {
        "parameters": [
            {
                "label": "steam_filename",
                "documentation": "The Steam Cloud file to copy over."
            },
            {
                "label": "local_filename",
                "documentation": "The local file to use to copy from."
            }
        ],
        "example": {
            "code": "steam_file_write_file(\"rm_koala.png\", \"Koala2.png\");",
            "description": ""
        },
        "signature": "steam_file_write_file(steam_filename, local_filename);",
        "function": "steam_file_write_file",
        "documentation": "With this function you can copy the contents of a locally saved file to a file that is synchronised with the Steam Cloud. The local file _must exist_ before using this function, and it will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
        "return": "real"
    },
    "steam_is_user_logged_on": {
        "parameters": [],
        "example": {
            "code": "if steam_is_user_logged_on()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_publish_workshop_file(\"SaveData.txt\", \"\", \"Save Text\", \"Workshop saved text file\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_is_user_logged_on();",
        "function": "steam_is_user_logged_on",
        "documentation": "This function will return true if the Steam client currently has a live connection to the Steam servers. If it returns false, it means there is no active connection due to either a networking issue on the local machine, or the Steam server being down or busy.",
        "return": "String"
    },
    "string_replace_all": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to be copied."
            },
            {
                "label": "substr",
                "documentation": "The substring within the string to be replaced in all instances."
            },
            {
                "label": "newstr",
                "documentation": "The new substring to replace the previous one(s)."
            }
        ],
        "example": {
            "code": "str1 = \"Hexxo Worxd\";<br> str2 = string_replace_all(str1, \"x\", \"l\");<br>",
            "description": ""
        },
        "signature": "string_replace_all(str, substr, newstr);",
        "function": "string_replace_all",
        "documentation": "You can use this function to parse a string looking for specific parts, which can then be replaced by the new string that you have specified in all places that they occur.",
        "return": "String"
    },
    "mouse_check_button_released": {
        "parameters": [
            {
                "label": "numb",
                "documentation": "Which mouse button constant to check for."
            }
        ],
        "example": {
            "code": "if mouse_check_button_released(mb_right)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;speed = point_distance(x, y, mouse_x, mouse_y) / 10;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mouse_check_button_released(numb);",
        "function": "mouse_check_button_released",
        "documentation": "This function will return true if the mouse button being checked has been released or false if it has not. This function will only be triggered _once_ for any mouse button when it is released and to trigger it again the button will need to have been pressed and released again. You supply the mouse button to check from one of the following constants:",
        "return": "Boolean"
    },
    "matrix_multiply": {
        "parameters": [
            {
                "label": "matrix1",
                "documentation": "The first matrix index to use."
            },
            {
                "label": "matrix2",
                "documentation": "The second matrix index to use."
            }
        ],
        "example": {
            "code": "var v_matrix = matrix_get(matrix_view);<br> var new_matrix = matrix_multiply(v_matrix, my_matrix);<br> matrix_set(matrix_view, new_matrix);<br>",
            "description": ""
        },
        "signature": "matrix_multiply(matrix1, matrix2);",
        "function": "matrix_multiply",
        "documentation": "With this function you can multiply two matrix arrays together to create a new transform matrix. The function will return the new matrix index which should be stored in a variable for future use.",
        "return": "4x4 Matrix"
    },
    "physics_fixture_set_friction": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "friction",
                "documentation": "the friction of the fixture"
            }
        ],
        "example": {
            "code": "physics_fixture_set_friction(fix_Brick, 0.1);",
            "description": ""
        },
        "signature": "physics_fixture_set_friction(fixture, friction)",
        "function": "physics_fixture_set_friction",
        "documentation": "Friction is the force that resists the relative motion of material elements sliding against each other, which in the _GameMaker Studio 2_ physics world, translates as the loss of momentum caused by the collision of two instances with fixtures bound to them. So, when two instances collide, their motion is affected by this value, with a high friction causing a larger loss of momentum than a lower value. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative value if required.",
        "return": "N/A"
    },
    "physics_particle_group_box": {
        "parameters": [
            {
                "label": "halfWidth",
                "documentation": "The half width of the box."
            },
            {
                "label": "halfHeight",
                "documentation": "The half height of the box."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid;<br> physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_box(100, 100);<br> mLastGroup = physics_particle_group_end();<br>",
            "description": ""
        },
        "signature": "physics_particle_group_box(halfWidth, halfHeight)",
        "function": "physics_particle_group_box",
        "documentation": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function [physics\\_particle\\_group_begin()](physics_particle_group_begin.html), and then you would use this function to set the approximate half width and half height of the group in pixels - approximate because the exact width and height will depend on the size of the base particles, as defined by the [physics\\_particle\\_set_radius()](physics_particle_set_radius.html) function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape. Finally you need to call [physics\\_particle\\_group_end()](physics_particle_group_end.html) to create the group of particles in the room.",
        "return": "N/A"
    },
    "sprite_flush": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index (resource name) of the sprite asset to flush"
            }
        ],
        "example": {
            "code": "sprite_flush(spr_Player_Aura);",
            "description": ""
        },
        "signature": "sprite_flush(ind)",
        "function": "sprite_flush",
        "documentation": "With this function you can remove the given texture page for the given sprite from texture memory. You supply the sprite index (as defined when creating the sprite resource) and ithe texture page it is assigned to will be removed from texture memory. Note that if the texture page is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded, so care should be taken when using this function.",
        "return": "N/A"
    },
    "matrix_build_lookat": {
        "parameters": [
            {
                "label": "xfrom",
                "documentation": "The x coordinate of the position to look from."
            },
            {
                "label": "yfrom",
                "documentation": "The y coordinate of the position to look from."
            },
            {
                "label": "zfrom",
                "documentation": "The z coordinate of the position to look from."
            },
            {
                "label": "xto",
                "documentation": "The x coordinate of the position to look to."
            },
            {
                "label": "yto",
                "documentation": "The x coordinate of the position to look to."
            },
            {
                "label": "zto",
                "documentation": "The x coordinate of the position to look to."
            },
            {
                "label": "xup",
                "documentation": "The x coordinate of the \"up\" vector."
            },
            {
                "label": "yup",
                "documentation": "The y coordinate of the \"up\" vector."
            },
            {
                "label": "zup",
                "documentation": "The z coordinate of the \"up\" vector."
            }
        ],
        "example": {
            "code": "viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);<br> projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);<br> camera_set_view_mat(view_camera[0], viewmat);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "matrix_build_lookat(xfrom, yfrom, zfrom, xto, yto, zto, xup, yup, zup);",
        "function": "matrix_build_lookat",
        "documentation": "This function builds a \"look-at\" (view) matrix based on the specified parameters listed below. Since this function modifies the view matrix and not the projection matrix, you should first initialize the projection matrix using the other matrix function [matrix\\_build\\_projection_perspective](matrix_build_projection_perspective.html), then use this function to move the view camera around within the projection.",
        "return": "Matrix index"
    },
    "event_perform_object": {
        "parameters": [],
        "signature": "event_perform_object(obj, type, numb);",
        "function": "event_perform_object",
        "documentation": "This functions works the same as event_perform() except that this time you can specify events from another object. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but the relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down. You can find a complete list of the available constants this function requires from the the page for the function [event_perform](event_perform.html).",
        "return": "N/A"
    },
    "steam_get_stat_avg_rate": {
        "parameters": [
            {
                "label": "stat_name",
                "documentation": "The name of the statistic to get (a string)."
            }
        ],
        "example": {
            "code": "var avg = steam_get_stat_avg_rate(\"PointsPerHour\");<br> draw_text(8, 8, \"PPH = \" + string(avg);<br>",
            "description": ""
        },
        "signature": "steam_get_stat_avg_rate(stat_name);",
        "function": "steam_get_stat_avg_rate",
        "documentation": "With this function you can get the value of a specific **average** statistic. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
        "return": "Real"
    },
    "show_message_async": {
        "parameters": [
            {
                "label": "String",
                "documentation": "The message to show to the user."
            }
        ],
        "signature": "show_message_async(string);",
        "function": "show_message_async",
        "documentation": "This function opens a window and displays the message you define in the function to the user. This is an asynchronous function, and as such _GameMaker Studio 2_ does _not_ block the device it is being run on while waiting for answer, but rather keeps on running events as normal. Once the user has pressed the \"Okay\" button, an asynchronous **Dialog** event is triggered which, for the duration of that event _only_, will have a ds_map stored in the variable async_load.",
        "return": "Real"
    },
    "file_text_write_string": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to edit."
            },
            {
                "label": "str",
                "documentation": "The string to write to the file."
            }
        ],
        "example": {
            "code": "var i, file;<br> file = file_text_open_write(working_directory + \"hiscore.txt\");<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_text_write_real(file, scr[i]);<br> &nbsp;&nbsp;&nbsp;file_text_writeln(file);<br> &nbsp;&nbsp;&nbsp;file_text_write_string(file, scr_name[i]);<br> &nbsp;&nbsp;&nbsp;file_text_writeln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_write_string(fileid, str);",
        "function": "file_text_write_string",
        "documentation": "With this function you can write a string to a previously opened text file. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the [file\\_text\\_open_append](file_text_open_append.html). You can also avoid this by using the [file\\_text\\_readln](file_text_readln.html) function along with the [file\\_text\\_eof](file_text_eof.html) function to loop through the contents of the file until you get to the end and then start writing.",
        "return": "Real"
    },
    "date_get_day": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to check."
            }
        ],
        "example": {
            "code": "myday = date_get_day( date_current_datetime() );",
            "description": ""
        },
        "signature": "date_get_day(date);",
        "function": "date_get_day",
        "documentation": "This function returns the day (from 1 to 31) of the given datetime.",
        "return": "Real"
    },
    "highscore_clear": {
        "parameters": [],
        "example": {
            "code": "highscore_clear();",
            "description": ""
        },
        "signature": "highscore_clear();",
        "function": "highscore_clear",
        "documentation": "With this function you can clear the internal global high score list, resetting all names to the default value of \"Unknown\" and all scores to the default value of 0.",
        "return": "N/A"
    },
    "phy_active": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check_pressed(ord\"P\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause<br> &nbsp;&nbsp;&nbsp;with (obj_Parent)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;phy_active = !global.Pause;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_active;",
        "function": "phy_active;",
        "documentation": "This variable controls whether or not the instance is currently \"active\". Setting it to false will prevent the instance from participating in the physics world, and setting it to true will have it participating again. Please note that this is not the same as [deactivating the instance](../../instances/deactivating_instances/index.html), as the instance is still visible on the screen and can still be changed through code, rather this function just prevents it from participating in the physics simulation.",
        "return": "Boolean"
    },
    "layer_reset_target_room": {
        "parameters": [],
        "example": {
            "code": "layer_set_target_room(rm_Game);<br> var l = layer_get_id(\"SpriteAssets\");<br> repeat(50)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_create(l, random(room_get_width(rm_Game)), random(room_get_height(rm_Game)), spr_Trees);<br> &nbsp;&nbsp;&nbsp;}<br> layer_reset_target_room();<br>",
            "description": ""
        },
        "signature": "layer_reset_target_room()",
        "function": "layer_reset_target_room",
        "documentation": "This function is used to reset the layer target to the current room. See the function [layer\\_set\\_target_room](layer_set_target_room.html) for further information.",
        "return": "N/A"
    },
    "steam_ugc_get_item_update_info": {
        "parameters": [
            {
                "label": "published_file_id",
                "documentation": "The unique file ID for the UGC to be checked."
            },
            {
                "label": "info_map",
                "documentation": "A (previously created) DS map index."
            }
        ],
        "example": {
            "code": "var info_map = ds_map_create();<br> var info = steam_ugc_get_item_update_info(global.fileID, info_map);<br> if info<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_text(32, 15, \"needs_update: \" + string(info_map[? \"needs_update\"]));<br> &nbsp;&nbsp;&nbsp;draw_text(32, 30, \"is_downloading: \" + string(info_map[? \"is_downloading\"]));<br> &nbsp;&nbsp;&nbsp;draw_text(32, 45, \"bytes_downloaded: \" + string(info_map[? \"bytes_downloaded\"]));<br> &nbsp;&nbsp;&nbsp;draw_text(32, 60, \"bytes_total: \" + string(info_map[? \"bytes_total\"]));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_ugc_get_item_update_info(published_file_id, info_map);",
        "function": "steam_ugc_get_item_update_info",
        "documentation": "This function can be used to retrieve information about the current download state for the given file ID. You give the item ID and supply the index to an empty DS map which will then be populated with the following key/value pairs if the item exists:",
        "return": "Boolean"
    },
    "clickable_delete": {
        "parameters": [
            {
                "label": "index",
                "documentation": "Index of the clickable icon to remove."
            }
        ],
        "example": {
            "code": "clickable_delete(global.Help_Icon);",
            "description": ""
        },
        "signature": "clickable_delete(index);",
        "function": "clickable_delete",
        "documentation": "This function must be used to remove a clickable icon previously created with [clickable_add](clickable_add.html) from the game window.",
        "return": "N/A"
    },
    "path_rotate": {
        "parameters": [],
        "example": {
            "code": "path_rotate(path0, 90);",
            "description": ""
        },
        "signature": "path_rotate(index, angle);",
        "function": "path_rotate",
        "documentation": "You can use this function to rotate a given path around its center. Remember that in _GameMaker Studio 2_ (unless you are using physics) the angles are calculated counter-clockwise, so rotating the path by 90 degrees would rotate the path to the _left_. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.",
        "return": "N/A"
    },
    "ds_map_find_last": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            }
        ],
        "example": {
            "code": "var size, key, i;<br> size = ds_map_size(inventory);<br> key = ds_map_find_last(inventory);<br> for (i = size; i &gt; 0; i--;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if key != \"gold\" key = ds_map_find_previous(inventory, key) else break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_find_last(id);",
        "function": "ds_map_find_last",
        "documentation": "This function returns the last key stored in the ds_map. **This is not the last key in the order that you have added them!** Ds\\_maps are not stored in a linear form, for that use ds\\_lists, so all this does is find the last key as stored by the computer. This can be useful if your have to iterate through the ds_map looking for something, but should be avoided if possible as it can be slow.",
        "return": "Real or string"
    },
    "draw_get_colour": {
        "parameters": [],
        "example": {
            "code": "if draw_get_colour() != c_black<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_set_colour(c_black);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_get_colour()",
        "function": "draw_get_colour",
        "documentation": "This function returns the current draw colour which is used for drawing forms, text, primitives and un-textured 3D models. This can be set with the [draw\\_set\\_colour](draw_set_colour.html) function.",
        "return": "Real"
    },
    "gpu_set_tex_mip_filter_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get."
            },
            {
                "label": "filter",
                "documentation": "The mip filter mode to use (a constant, default: tf_point)."
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_mip_filter_ext(_sampleIndex) != tf_point<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_filter_ext(_sampleIndex, tf_point);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_mip_filter_ext(sampler_index, filter);",
        "function": "gpu_set_tex_mip_filter_ext",
        "documentation": "With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and then one of the mode value constants listed below.",
        "return": "N/A"
    },
    "surface_save_part": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to set as the drawing target."
            },
            {
                "label": "fname",
                "documentation": "The name of the saved image file."
            },
            {
                "label": "x",
                "documentation": "The starting x position within the surface."
            },
            {
                "label": "y",
                "documentation": "The starting y position within the surface."
            },
            {
                "label": "width",
                "documentation": "The width of the part to save."
            },
            {
                "label": "height",
                "documentation": "The height of the part to save."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"S\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_save_part(surf, \"test.png\", 0, 0, 100, 100);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_save_part(surface_id, fname, x, y, width, height);",
        "function": "surface_save_part",
        "documentation": "This function will save a part of a surface to disc using the given filename. The surface _must_ be saved as a *.png format file, and the (x,y) position must be given as local coordinates to the surface, bearing in mind that the top left corner of the surface is always (0,0).",
        "return": "N/A"
    },
    "date_hour_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare the first one to."
            }
        ],
        "example": {
            "code": "diff = date_hour_span(date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime());",
            "description": ""
        },
        "signature": "date_hour_span(date1, date2);",
        "function": "date_hour_span",
        "documentation": "With this function you can get the number of hours between two dates. This value is always positive, and incomplete hours will be returned as a fraction.",
        "return": "Real"
    },
    "steam_get_achievement": {
        "parameters": [
            {
                "label": "ach_name",
                "documentation": "The name of the achievement to get (string)."
            }
        ],
        "example": {
            "code": "if hp &lt;= 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Deaths += 1;<br> &nbsp;&nbsp;&nbsp;if global.Deaths == 10<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if !steam_get_achievement(\"ach_Player_Dies_Ten_Times\") steam_set_achievement(\"ach_Player_Dies_Ten_Times\");<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_achievement(ach_name);",
        "function": "steam_get_achievement",
        "documentation": "With this function you can check the Steam API to see if a specific achievement has been awarded. The achievement should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
        "return": "Boolean"
    },
    "camera_set_view_angle": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            },
            {
                "label": "angle",
                "documentation": "The new angle to set the camera view to"
            }
        ],
        "example": {
            "code": "camera_set_view_angle(view_camera[0], point_direction(x, y, mouse_x, mouse_y));",
            "description": ""
        },
        "signature": "camera_set_view_angle(camera_id, angle)",
        "function": "camera_set_view_angle",
        "documentation": "You can use this function to update the angle of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the angle that you wish to set the camera view to. The default value is 0° with positive values rotating the camera **counter-clockwise**, ie: setting the value to 90 will rotate the camera 90° to the left.",
        "return": "N/A"
    },
    "ds_grid_destroy": {
        "parameters": [
            {
                "label": "index",
                "documentation": "This index of the grid to destroy."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;ds_grid_destroy(Wall_Grid);<br> &nbsp;&nbsp;&nbsp;&nbsp;Wall_Grid = -1;<br> &nbsp;&nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_destroy(index);",
        "function": "ds_grid_destroy",
        "documentation": "This function will remove the given grid data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_grid to prevent memory leaks that can slow down and crash your game.",
        "return": "N/A"
    },
    "md5_string_utf8": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to hash."
            }
        ],
        "example": {
            "code": "var hash, str;<br> str = json_encode(hiscore_map);<br> hash = md5_string_utf8(str);<br> ini_open(\"local.ini\");<br> ini_write_string(\"info\", \"0\", hash);<br> ini_close();<br> get[0] = http_post_string(\"http://www.MacSweeney Games.com/CatchTheHaggis?game_hiscores=\" + string(global.game_id), str)<br>",
            "description": ""
        },
        "signature": "md5_string_utf8(string)",
        "function": "md5_string_utf8",
        "documentation": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take an input UTF-8 string (which has a variable number of bytes per character) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example).",
        "return": "String"
    },
    "network_connect": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "url",
                "documentation": "The URL or IP to connect to (a string)."
            },
            {
                "label": "port",
                "documentation": "The port to connect to."
            }
        ],
        "example": {
            "code": "client = network_create_socket(network_socket_tcp);<br> network_connect(client, \"192.134.0.1\", 6510);<br>",
            "description": ""
        },
        "signature": "network_connect(socket, url, port);",
        "function": "network_connect",
        "documentation": "With this function you can send a request to connect to a server. The function takes the _socket id_ to connect through (see [network\\_create\\_socket](network_create_socket.html)) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only _GameMaker Studio 2_ games connect to each other, however if you need to connect to a server that is not a _GameMaker Studio 2_ game, you can use [network\\_connect\\_raw](network_connect_raw.html).",
        "return": "Real"
    },
    "physics_particle_get_group_flags": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "var flags = physics_particle_get_group_flags(group, flags);<br> if flags != phy_particle_group_flag_solid | phy_particle_group_flag_rigid<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;flags = phy_particle_group_flag_solid | phy_particle_group_flag_rigid;<br> &nbsp;&nbsp;&nbsp;physics_particle_set_group_flags(group, flags);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_get_group_flags(group)",
        "function": "physics_particle_get_group_flags",
        "documentation": "With this function you can retrieve the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "physics_particle_group_add_point": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position in the room for the point."
            },
            {
                "label": "y",
                "documentation": "The y position in the room for the point."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid;<br> physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_polygon();<br> physics_particle_group_add_point(200, 200);<br> physics_particle_group_add_point(300, 300);<br> physics_particle_group_add_point(100, 300);<br> mLastGroup = physics_particle_group_end();<br>",
            "description": ""
        },
        "signature": "physics_particle_group_add_point(x, y)",
        "function": "physics_particle_group_add_point",
        "documentation": "This function sets a point in the room to define the shape of a polygon which will be used to create a group of soft body particles. You must have previously signalled to _GameMaker Studio 2_ that you are going define a polygon shape using the function [physics\\_particle\\_group_polygon()](physics_particle_group_polygon.html) and then use this function to define the individual points of the polygon. You must give at least three points when defining the polygon shape, but can give up to eight, and the function will permit the definition of concave polygons. However, if you generate a polygon with any cavities, the points within will be ignored and a convex shape will be created for the particle group.",
        "return": "N/A"
    },
    "skeleton_animation_get": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if skeleton_animation_get() != \"jump\"<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skeleton_animation_set(\"jump\");<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_get();",
        "function": "skeleton_animation_get",
        "documentation": "With this function you can get the current animation set being used by your skeletal animation sprite. The return value is a string, which will be the name of the set as you defined it in your skeletal animation program.",
        "return": "String"
    },
    "skeleton_attachment_set": {
        "parameters": [
            {
                "label": "slot",
                "documentation": "The slot name (a string) to get the attachment of."
            },
            {
                "label": "attachment",
                "documentation": "The name (as a string or a sprite_index) of the attachment image."
            }
        ],
        "example": {
            "code": "if skeleton_attachment_get(\"slot_leftHand\") == \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"spear\", \"knife\"));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_attachment_set(slot, attachment);",
        "function": "skeleton_attachment_set",
        "documentation": "A skeletal animation sprite may have other images added as attachments, with these images being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can set an attachment to a given slot, where you are required to give the names (as strings) of the slot and the attachment. These names are defined by the animation program used, or (in the case of the attachment) when you call [skeleton\\_attachment\\_create](skeleton_attachment_create.html).",
        "return": "String"
    },
    "buffer_exists": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to check."
            }
        ],
        "example": {
            "code": "if buffer_exists(buff)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;buffer_delete(buff);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "buffer_exists(buffer)",
        "function": "buffer_exists",
        "documentation": "This function can be used to check a variable to see if it holds a valid buffer ID value or not. If it does the function will return true otherwise it will return false.",
        "return": "Boolean"
    },
    "view_get_camera": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "var cam = view_get_camera(0);<br> var cw = camera_get_view_width(cam);<br> var ch = camera_get_view_height(cam);<br> camera_set_view_pos(cam, mouse_x - (cw / 2), mouse_y - (ch / 2));<br>",
            "description": ""
        },
        "signature": "view_get_camera(view_port)",
        "function": "view_get_camera",
        "documentation": "This function can be used to retrieve the unique camera ID value for the camera assigned to the given view port (from 0 - 7). If no camera is assigned, the function will return -1.",
        "return": "Camera index (Real)"
    },
    "ds_grid_set_disk": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            },
            {
                "label": "val",
                "documentation": "The value to set with the cells within the disk."
            }
        ],
        "example": {
            "code": "ds_grid_set_disk(grid, ds_grid_width(grid) div 2, ds_grid_height(grid) div 2, 5, -4)<br>",
            "description": ""
        },
        "signature": "ds_grid_set_disk(index, xm, ym, r, val);",
        "function": "ds_grid_set_disk",
        "documentation": "With this function you can set a circular region of a grid to a certain value. You need to supply a starting grid cell (as an x and y axis coordinate) as well as the radius of the disk to set and the value that you wish to set the disk too, as shown by the illustration below: ![](ds_grid_set_disk.png)",
        "return": "N/A"
    },
    "game_end": {
        "parameters": [],
        "signature": "game_end();",
        "function": "game_end",
        "documentation": "With this function you can end the game (and the [Game End Event](../../../2_interface/1_editors/events/index.html) will be triggered). This will not happen instantaneously, but rather at the end of the current step, so any code you have in the same step after this function has been called will still run. Please note that this function has the following restrictions:",
        "return": "N/A"
    },
    "date_inc_day": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to."
            },
            {
                "label": "amount",
                "documentation": "The number of days (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_day(date_current_datetime(), 365);",
            "description": ""
        },
        "signature": "date_inc_day(date, amount);",
        "function": "date_inc_day",
        "documentation": "With this function you can increment a given datetime value by a specific number of days, and it will return the new datetime value.",
        "return": "Real"
    },
    "room_width": {
        "parameters": [],
        "example": {
            "code": "if bbox_right &gt; room_width<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x += room_width - bbox_right;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_width;",
        "function": "room_width;",
        "documentation": "",
        "return": "Real"
    },
    "buffer_poke": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "offset",
                "documentation": "The offset position (in bytes) within the buffer to write the given data to."
            },
            {
                "label": "type",
                "documentation": "The type of data that is to be written to the buffer (see the list of constants here)."
            },
            {
                "label": "value",
                "documentation": "The data to add to the buffer, in accordance with the type specified."
            }
        ],
        "example": {
            "code": "buffer_poke(buff, 3, buffer_u8, colour_get_blue(image_blend));",
            "description": ""
        },
        "signature": "buffer_poke(buffer, offset, type, value);",
        "function": "buffer_poke",
        "documentation": "With the [buffer_write](buffer_write.html) function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
        "return": "N/A"
    },
    "font_get_first": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "num = font_get_first(fnt_Main);",
            "description": ""
        },
        "signature": "font_get_first(ind);",
        "function": "font_get_first",
        "documentation": "When defining a font in _GameMaker Studio 2_, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an _image_ of the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that your game will need so as to keep texture memory as optimised as possible. This function can be used to find the starting character (as an ASCII value) that was used when your font asset was added to your game.",
        "return": "Real"
    },
    "steam_ugc_subscribe_item": {
        "parameters": [
            {
                "label": "published_file_id",
                "documentation": "The unique file ID for the UGC to subscribe to."
            }
        ],
        "example": {
            "code": "steam_sub = steam_ugc_subscribe_item(global.pubFileID);",
            "description": ""
        },
        "signature": "steam_ugc_subscribe_item(published_file_id);",
        "function": "steam_ugc_subscribe_item",
        "documentation": "This function can be used to subscribe to a UGC item. You supply the published file ID and then the function returns a unique async ID value which can be used to check when the subscribed item has been downloaded in the Steam Async event. This event will have the async_load DS map which will be populated with the following key/value pairs:",
        "return": "Async ID"
    },
    "gpu_set_alphatestref": {
        "parameters": [
            {
                "label": "val",
                "documentation": "Sets the reference value for alpha testing from 0 to 255 (default value is 0)"
            }
        ],
        "example": {
            "code": "if !gpu_get_alphatestenable()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_alphatestenable(true);<br> &nbsp;&nbsp;&nbsp;gpu_set_alphatestref(128);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_alphatestref(val);",
        "function": "gpu_set_alphatestref",
        "documentation": "This function will set the reference value for the alpha testing (when it has been enabled using the [gpu\\_set\\_alphatestenable](gpu_set_alphatestenable.html)). This is the \"cut-off\" threshold at which pixels with alpha will not be drawn.",
        "return": "N/A"
    },
    "draw_text_ext_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "sep",
                "documentation": "The distance in pixels between lines of text."
            },
            {
                "label": "w",
                "documentation": "The maximum width in pixels of the string before a line break."
            },
            {
                "label": "c1",
                "documentation": "The colour for the top left of the drawn text."
            },
            {
                "label": "c2",
                "documentation": "The colour for the top right of the drawn text."
            },
            {
                "label": "c3",
                "documentation": "The colour for the bottom right of the drawn text."
            },
            {
                "label": "c4",
                "documentation": "The colour for the bottom left of the drawn text."
            },
            {
                "label": "alpha",
                "documentation": "The alpha for the text."
            }
        ],
        "example": {
            "code": "draw_text_ext_colour(200, 200, keyboard_string, 5, 300, c_blue, c_blue, c_navy, c_navy, 1);<br>",
            "description": ""
        },
        "signature": "draw_text_ext_colour(x, y, string, sep, w, c1, c2, c3, c4, alpha);",
        "function": "draw_text_ext_colour",
        "documentation": "This function is a combination of the base [draw_text](draw_text.html) function with the [draw\\_text\\_ext](draw_text_ext.html) and [draw\\_text\\_colour](draw_text_colour.html) functions, permitting you to define gradient colours for text as well as the line spacing and maximum width per line all together.  \n  \n_**NOTE:** Gradient blending is not available for the HTML5 target unless WebGL is enabled, although you can still set the blending colours and it will blend the font with the first given colour. However all blending in this way creates a duplicate font which is then stored in the cache and used when required, which is far from optimal and if you use multiple colour changes it will slow down your games performance. You can set the font cache size to try and limit this should it be necessary using the function [font\\_set\\_cache_size](../../fonts/font_set_cache_size.html)._",
        "return": "N/A"
    },
    "point_in_circle": {
        "parameters": [
            {
                "label": "px",
                "documentation": "The x coordinate of the point to check."
            },
            {
                "label": "py",
                "documentation": "The y coordinate of the point to check."
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the circle centre."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the circle centre."
            },
            {
                "label": "rad",
                "documentation": "The radius of the circle."
            }
        ],
        "example": {
            "code": "if point_in_circle(mouse_x, mouse_y, x, y, 16)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;over = true;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;over = false;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "point_in_circle(px, py, x1, y1, rad);",
        "function": "point_in_circle",
        "documentation": "When using this function, you define a circular area and _GameMaker Studio 2_ will work out whether the given point falls within its bounds or not. If the point falls within the defined circle the function will return true otherwise the function will return false.",
        "return": "Boolean"
    },
    "mp_linear_path": {
        "parameters": [
            {
                "label": "path",
                "documentation": "The index of the path to be used."
            },
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "checkall",
                "documentation": "Whether to check for collisions with all instances (true) or just solid ones (false)."
            }
        ],
        "example": {
            "code": "if mp_linear_path(path, obj_Player.x, obj_Player.y, 2, 0) path_start(path, 2, 0, 0);<br>",
            "description": ""
        },
        "signature": "mp_linear_path(path, xgoal, ygoal, stepsize, checkall);",
        "function": "mp_linear_path",
        "documentation": "This function computes a straight line path from the current instance position to the point specified by the \"xgoal\" and \"ygoal\" values. It uses the indicated step size, the same as in the function [mp\\_linear\\_step()](mp_linear_step.html). The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). If false is returned then a path is still generated, but it will only run up to the position where the path was blocked.  \n  \n_**Note:** This function does not move the instance. It sets a path only, and you must use the [Path](../../paths/index.html) functions for movement._",
        "return": "Boolean."
    },
    "physics_particle_get_gravity_scale": {
        "parameters": [],
        "example": {
            "code": " physics_particle_set_gravity_scale(physics_particle_get_gravity_scale() + 0.1);<br>",
            "description": ""
        },
        "signature": "physics_particle_get_gravity_scale()",
        "function": "physics_particle_get_gravity_scale",
        "documentation": "With this function you can find out what the current gravity scale factor is for particles in the physics simulation (you can set this value using [physics\\_particle\\_set\\_gravity\\_scale()](physics_particle_set_gravity_scale.html)).",
        "return": "Real"
    },
    "room_duplicate": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the original room to be duplicated."
            }
        ],
        "example": {
            "code": "global.myroom = room_duplicate(rm_level);",
            "description": ""
        },
        "signature": "room_duplicate(index);",
        "function": "room_duplicate",
        "documentation": "This will duplicate a given room and return the duplicates index to be used in all further calls to reference the new room.",
        "return": "Index"
    },
    "window_get_cursor": {
        "parameters": [],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if window_get_cursor() != cr_drag window_set_cursor(cr_drag);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_get_cursor();",
        "function": "window_get_cursor",
        "documentation": "",
        "return": "Constant"
    },
    "gamepad_axis_count": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            }
        ],
        "example": {
            "code": "axis = gamepad_axis_count(0))<br>",
            "description": ""
        },
        "signature": "gamepad_axis_count(device);",
        "function": "gamepad_axis_count",
        "documentation": "This function will return the number of \"axis\" controls on the device being checked. These controls are the analogue direction \"thumbsticks\" on most controllers.",
        "return": "Real"
    },
    "ds_queue_tail": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read from."
            }
        ],
        "example": {
            "code": "num = ds_queue_tail(control_queue);",
            "description": ""
        },
        "signature": "ds_queue_tail(id);",
        "function": "ds_queue_tail",
        "documentation": "This function will only _read_ the last value of the queue (that which is \"at the tail\"). It will not _dequeue_ the value, meaning that it can still be read in the future by this function or the [ds\\_queue\\_dequeue](ds_queue_dequeue.html).",
        "return": "Real or String"
    },
    "draw_triangle": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the triangle's first corner."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the triangle's first corner."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the triangle's second corner."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the triangle's second corner."
            },
            {
                "label": "x3",
                "documentation": "The x coordinate of the triangle's third corner."
            },
            {
                "label": "y3",
                "documentation": "The y coordinate of the triangle's third corner."
            },
            {
                "label": "outline",
                "documentation": "Whether the triangle is drawn filled (false) or as a one pixel wide outline (true)."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_aqua);<br> draw_triangle(50, 50, 200, 50, 50, 200, 0);<br>",
            "description": ""
        },
        "signature": "draw_triangle(x1, y1, x2, y2, x3, y3, outline);",
        "function": "draw_triangle",
        "documentation": "With this function you can draw either an outline of a triangle or a filled triangle.",
        "return": "N/A"
    },
    "gpu_get_tex_max_aniso": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_tex_max_aniso() != 8<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_aniso(8);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_max_aniso();",
        "function": "gpu_get_tex_max_aniso",
        "documentation": "With this function you can get the current maximum level of anisotropy when using the tf_anisotropic filter mode (see [gpu\\_get\\_tex\\_mip\\_filter()](gpu_get_tex_mip_filter.html) for more information). The returned value will range between 1 and 16.",
        "return": "Real (default: 16)"
    },
    "draw_enable_swf_aa": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable (true) or disable (false) AA for all SWF sprites."
            }
        ],
        "example": {
            "code": "if draw_get_swf_aa_level() == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_enable_swf_aa(true);<br> &nbsp;&nbsp;&nbsp;draw_set_swf_aa_level(0.5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_enable_swf_aa(enable);",
        "function": "draw_enable_swf_aa",
        "documentation": "With this function you can enable or disable anti-aliasing (AA) for SWF format vector sprites. AA simply smooths the edges of vector images to give them a nicer look. The amount of AA used will depend on the value set using the function [draw\\_set\\_swf\\_aa\\_level()](draw_set_swf_aa_level.html). By default this is disabled.",
        "return": "N/A"
    },
    "draw_surface_tiled": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            }
        ],
        "example": {
            "code": "draw_surface_tiled(surf, x, y);",
            "description": ""
        },
        "signature": "draw_surface_tiled(id, x, y);",
        "function": "draw_surface_tiled",
        "documentation": "This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function.",
        "return": "N/A"
    },
    "surface_get_texture": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to get the width of."
            }
        ],
        "example": {
            "code": "var tex;<br> tex = surface_get_texture(surf);<br> draw_primitive_begin_texture(pr_trianglestrip, tex);<br> draw_vertex_texture(0, 480, 0, 0);<br> draw_vertex_texture(640, 480, 1, 0);<br> draw_vertex_texture(640, 480, 1, 1);<br> draw_vertex_texture(0, 480, 0, 1);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "surface_get_texture(surface_id);",
        "function": "surface_get_texture",
        "documentation": "This function returns a special _pointer_ for the surface texture. This value can then be used in other draw functions, particularly in general 3D and some of the 2D primitive functions.",
        "return": "Pointer"
    },
    "ini_open": {
        "parameters": [
            {
                "label": "name",
                "documentation": "The filename for the .ini file."
            }
        ],
        "example": {
            "code": "ini_open(\"Settings/savedata.ini\");<br> score = ini_read_real(\"save1\", \"score\", 0);<br> ini_close();",
            "description": ""
        },
        "signature": "ini_open(name);",
        "function": "ini_open",
        "documentation": "This opens an ini\\_file for reading and/writing. If the ini\\_file does not exist at the location you are checking, _GameMaker Studio 2_ may create one, but only if you write data to it. If you have only read information from the ini file, then the default values for the read function will be returned, but the ini file will _not_ actually be created.",
        "return": "N/A"
    },
    "iap_restore_all": {
        "parameters": [],
        "example": {
            "code": "iap_restore_all();",
            "description": ""
        },
        "signature": "iap_restore_all();",
        "function": "iap_restore_all",
        "documentation": "Restores all purchases to their default status for the game and user. This would be applicable if (for example) the user has changed device or removed the title from their current device and has re-installed the title. This will trigger two [**IAP Events**](../../../2_interface/1_editors/events/async_events.html), with the first being of the type iap\\_ev\\_restore, and the second of the type iap\\_ev\\_purchase. For the restore event, the ds_map iap_data will have the following extra key which can then be checked to make sure that the products and purchases have been successfully restored:",
        "return": "N/A"
    },
    "choose": {
        "parameters": [
            {
                "label": "val0... max_val",
                "documentation": "An input value that can be string, integer, variable or constant."
            }
        ],
        "example": {
            "code": "sprite_index = choose(spr_Cactus, spr_Flower, spr_Tree, spr_Shrub);<br> hp = choose(5, 8, 15, 32, 40);<br> name = choose(\"John\", \"Steven\", \"Graham\", \"Jack\", \"Emily\", \"Tina\", \"Jill\", \"Helen\");",
            "description": ""
        },
        "signature": "choose(val0, val1, val2... max_val);",
        "function": "choose",
        "documentation": "Sometimes you want to specify something other than numbers for a random selection, or the numbers you want are not in any real order or within any set range. In these cases you would use choose() to generate a random result. For example, say you want to create an object with a random sprite at the start, then you could use this function to set the sprite index to one of a set of given sprites. Note that you can have as many as you require (note that more arguments will mean that the function will be slower to parse).",
        "return": "One of the given arguments"
    },
    "rectangle_in_triangle": {
        "parameters": [
            {
                "label": "sx1",
                "documentation": "The x coordinate of the left side of the source rectangle."
            },
            {
                "label": "sy1",
                "documentation": "The y coordinate of the top side of the source rectangle."
            },
            {
                "label": "sx2",
                "documentation": "The x coordinate of the right side of the source rectangle."
            },
            {
                "label": "sy2",
                "documentation": "The y coordinate of the bottom side of the source rectangle."
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the first side of the triangle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first side of the triangle to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second side of the triangle to check."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second side of the triangle to check."
            },
            {
                "label": "x3",
                "documentation": "The x coordinate of the third side of the triangle to check."
            },
            {
                "label": "y3",
                "documentation": "The y coordinate of the third side of the triangle to check."
            }
        ],
        "example": {
            "code": "var inst = instance_nearest(x, y, obj_Player);<br> if instance_exists(inst)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var x1 = x + lengthdir_x(100, image_angle - 45);<br> &nbsp;&nbsp;&nbsp;var y1 = y + lengthdir_y(100, image_angle - 45);<br> &nbsp;&nbsp;&nbsp;var x2 = x + lengthdir_x(100, image_angle + 45);<br> &nbsp;&nbsp;&nbsp;var y2 = y + lengthdir_y(100, image_angle + 45);<br> &nbsp;&nbsp;&nbsp;if rectangle_in_triangle(inst.bbox_left, inst.bbox_top, inst.bbox_right, inst.bbox_bottom, x, y, x1, y1, x2, y2) == 1<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;can_see = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "rectangle_in_triangle(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2, dx3, dy3);",
        "function": "rectangle_in_triangle",
        "documentation": "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined triangular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:  \n![](images/rectangle_in_triangle.png)",
        "return": "Real."
    },
    "room_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to check."
            }
        ],
        "example": {
            "code": "if room_exists(global.rm[0])<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto(global.rm[0]);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_exists(index);",
        "function": "room_exists",
        "documentation": "",
        "return": "Boolean"
    },
    "layer_sprite_get_yscale": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_yscale(spr_id) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_yscale(spr_id, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_yscale(sprite_element_id);",
        "function": "layer_sprite_get_yscale",
        "documentation": "",
        "return": "Real"
    },
    "ds_priority_find_priority": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to use."
            },
            {
                "label": "val",
                "documentation": "The value to find the priority of."
            }
        ],
        "example": {
            "code": "p = ds_priority_find_priority(ai_priority, \"intelligence\");",
            "description": ""
        },
        "signature": "ds_priority_find_priority(id, val);",
        "function": "ds_priority_find_priority",
        "documentation": "With this function you can retrieve the priority of any given value. If the value does not exist in the priority queue then undefined will be returned.",
        "return": "Real or undefined"
    },
    "draw_circle_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the center of the circle."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the center of the circle."
            },
            {
                "label": "r",
                "documentation": "The radius (distance from center to edge) of the circle in pixels."
            },
            {
                "label": "col1",
                "documentation": "The colour at the center of the circle."
            },
            {
                "label": "col2",
                "documentation": "The colour at the edge of the circle."
            },
            {
                "label": "outline",
                "documentation": "Whether the circle is an outline (true) or not (false). If true, col1 is irrelevant."
            }
        ],
        "example": {
            "code": "draw_circle_colour(x, y, 100, c_white, c_black, false);",
            "description": ""
        },
        "signature": "draw_circle_colour(x, y, r, col1, col2, outline);",
        "function": "draw_circle_colour",
        "documentation": "With this function you can draw either an outline of a circle or a filled circle, and if it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other and the colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html). You can define how precise the drawing is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html).",
        "return": "N/A"
    },
    "temp_directory": {
        "parameters": [],
        "example": {
            "code": "ini_open(temp_directory + \"\\temp_ini.ini\");",
            "description": ""
        },
        "signature": "temp_directory",
        "function": "temp_directory",
        "documentation": "This can be used to return the temporary directory created for your game each time it is run (the root does not contain the final \"\\\\\"). This directory will hold files and can be accessed while the game is running, but it will be removed (along with all files that it contains) when the game is closed.",
        "return": "String"
    },
    "game_project_name": {
        "parameters": [],
        "signature": "game_project_name",
        "function": "game_project_name",
        "documentation": "This **read only** variable returns the display name of your game for the target platform in a \"save-friendly\" format for the target platform. If the display name contains any characters that are not permitted for a file name, they will be replaced automatically with \"_\". The display name can be set in the [Game Options](../../../2_interface/3_settings/game_options/index.html). Note that since there are no restrictions on file names for HTML5, this string will probably be the same as that returned by [game\\_display\\_name](game_display_name.html).",
        "return": "String"
    },
    "audio_emitter_position": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to change."
            },
            {
                "label": "x",
                "documentation": "The x position."
            },
            {
                "label": "y",
                "documentation": "The y position."
            },
            {
                "label": "z",
                "documentation": "The z position."
            }
        ],
        "example": {
            "code": "if speed &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_position(s_emit, x, y, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_position(emitter, x, y, z);",
        "function": "audio_emitter_position",
        "documentation": "With this function you can change the position of an audio emitter within the 3D audio space. The position will affect the sound in different ways depending on where the _listener_ is positioned within the audio space too (default position is (0, 0, 0). See [audio\\_listener\\_position](audio_listener_position.html) for more information), so for example if the emitter position is set to (100, 0, 0) and the current listener is at (200, 0, 0) the audio streamed from the emitter will appear to be on the left of the audio field. The image below shows a visual representation of emitters and their relative positions to the listener: ![](audio_emitters.png)",
        "return": "N/A"
    },
    "screen_save_part": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The filename for the screenshot to save"
            },
            {
                "label": "x",
                "documentation": "The x coordinate of the top left corner of the area of the screen to capture"
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the top left corner of the area of the screen to capture"
            },
            {
                "label": "w",
                "documentation": "The width of the area of the screen to capture"
            },
            {
                "label": "h",
                "documentation": "The height of the area of the screen to capture"
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"S\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;screen_save_part(\"Screens\\Screen_\" + string(num++) + \".png\", 0, 0, 100, 100)<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "screen_save_part(fname,x,y,w,h);",
        "function": "screen_save_part",
        "documentation": "With this function you can save a screenshot of a part of the game as it currently appears in the game display. The selection coordinates are based on the _absolute_ size of the display (or window if not fullscreen), so (0,0) is always the top left hand corner of the screen (or window). Below is an image that shows how this function works: ![](images/screen_save.png)",
        "return": "N/A"
    },
    "draw_set_circle_precision": {
        "parameters": [
            {
                "label": "precision",
                "documentation": "The precision of all circles drawn after this function is called."
            }
        ],
        "example": {
            "code": "draw_set_circle_precision(12);",
            "description": ""
        },
        "signature": "draw_set_circle_precision(precision);",
        "function": "draw_set_circle_precision",
        "documentation": "To optimise performance when drawing circles, _GameMaker Studio 2_ basically draws a polygon shape with enough sides to make it _appear_ circular. However, depending on how big or small you need your circles to be, you may find that changing this value can help increase the performance of your game, or make the circles look better. The precision value that you can input into this function is the number of sides the circle polygon has, and this number can be anything between 4 and 64, _but must be a number divisible by 4_, with a default value of 24. ![](images/draw_set_circle_precision.png)",
        "return": "N/A"
    },
    "draw_light_get_ambient": {
        "parameters": [],
        "example": {
            "code": "light_col = draw_light_get_ambient();",
            "description": ""
        },
        "signature": "draw_light_get_ambient()",
        "function": "draw_light_get_ambient",
        "documentation": "This function will return the current colour used for ambient lighting.",
        "return": "Real"
    },
    "draw_sprite_general": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "left",
                "documentation": "The x position on the sprite of the top left corner of the area to draw."
            },
            {
                "label": "top",
                "documentation": "The y position on the sprite of the top left corner of the area to draw."
            },
            {
                "label": "width",
                "documentation": "The width of the area to draw."
            },
            {
                "label": "height",
                "documentation": "The height of the area to draw."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
            },
            {
                "label": "c1",
                "documentation": "The colour with which to blend the top left area of the sprite."
            },
            {
                "label": "c2",
                "documentation": "The colour with which to blend the top right area of the sprite."
            },
            {
                "label": "c3",
                "documentation": "The colour with which to blend the bottom right area of the sprite."
            },
            {
                "label": "c4",
                "documentation": "The colour with which to blend the bottom left area of the sprite."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_sprite_general(sprite_index, image_index, 8, 8, sprite_width-16, sprite_height-16, x, y, 2, 0.5, 180, c_white, c_white, c_black, c_black, 1);",
            "description": ""
        },
        "signature": "draw_sprite_general(sprite, subimg, left, top, width, height, x, y, xscale, yscale, rot, c1, c2, c3, c4, alpha);",
        "function": "draw_sprite_general",
        "documentation": "This function combines the function [draw\\_sprite\\_ext](draw_sprite_ext.html) with the function [draw\\_sprite\\_part](draw_sprite_part.html), adding in some additional blending options so that each corner of the final sprite part can be blended with an individual colour.",
        "return": "N/A"
    },
    "mp_potential_settings": {
        "parameters": [
            {
                "label": "maxrot",
                "documentation": "The number of degrees either side of the current direction that the instance can rotate in a step"
            },
            {
                "label": "rotstep",
                "documentation": "The number of degrees either side of the current direction that the instance can check for a collision"
            },
            {
                "label": "ahead",
                "documentation": "The number of steps ahead that the instance can check for a collision. Larger values are slower than lower ones."
            },
            {
                "label": "onspot",
                "documentation": "Use this to allow the instance to rotate on the spot when no path is found (true) or not (false)"
            }
        ],
        "example": {
            "code": "mp_potential_settings(45, 5, 5, 0)",
            "description": ""
        },
        "signature": "mp_potential_settings(maxrot, rotstep, ahead, onspot)",
        "function": "mp_potential_settings",
        "documentation": "The mp\\_potential\\_ functions do their work using a number of parameters that can be changed using this function. Globally the method works as follows: it first tries to move straight towards the goal, looking a number of steps ahead which can be set with the parameter \"ahead\" (default value is 3). Reducing this value means that the instance will start changing direction later as it doesn't \"see\" as far ahead, and increasing it means it will start changing direction earlier. If this check leads to a collision then it starts looking at directions more to the left and to the right of the ideal, straight-line direction. It does this in steps of size \"rotstep\" (default value is 10), and reducing this gives the instance more movement possibilities but will be slower as it needs more processing power.  \n  \nThe parameter \"maxrot\" is a bit more difficult to explain! The instance has a current direction of movement, and maxrot (default value is 30) indicates how much it is allowed to vary its direction either side of that current direction in one step. So even if it can move e.g. straight to the goal it will only do so if it does not violate this maximal change of direction. If you make maxrot a large value then the instance can change direction a lot in each step, and this will make it easier to find a short path but the path will be uglier and less natural. If you make the value smaller then the path will be smoother but it might take longer detours (and sometimes even fail to find the goal). Finally, When no step can be made the behavior depends on the value of the parameter \"onspot\". If onspot is true (the default value), then the instance will rotate on its spot by the amount indicated with \"maxrot\" and if it is false it will not move at all. Setting it to false is useful for e.g. cars but reduces the chance of the instance finding a path.",
        "return": "N/A."
    },
    "layer_background_get_vtiled": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if !layer_background_get_vtiled(back_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_vtiled(back_id, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_vtiled(background_element_id);",
        "function": " layer_background_get_vtiled",
        "documentation": "",
        "return": "Boolean"
    },
    "skeleton_get_minmax": {
        "parameters": [],
        "example": {
            "code": "var frame = skeleton_animation_get_frame(0);<br> if frame &gt; 0 &amp;&amp; frame &lt; 2<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;var box = skeleton_get_minmax();<br> &nbsp;&nbsp;&nbsp;&nbsp;var ww = (box[2] - box[0]) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;var hh = (box[3] - box[1]) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;part_particles_create(global.p_sys, box[0] + ww, box[1] + hh, global.Stars, 10);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_get_minmax();",
        "function": "skeleton_get_minmax",
        "documentation": "This function will return an array with the total bounding box value for all the individual bounding boxes assigned to a skeleton animation sprite. The returned array will have 4 elements:",
        "return": "Array (4 elements: xMin, yMin, xMax, yMax)"
    },
    "steam_create_leaderboard": {
        "parameters": [
            {
                "label": "lb_name",
                "documentation": "The name of the leaderboard that you are creating (a string)."
            },
            {
                "label": "sort_method",
                "documentation": "The method for sorting the leaderboard entries (see constants listed below)."
            },
            {
                "label": "display_type",
                "documentation": "The way to display the leaderboard to the user (see constants listed below)."
            }
        ],
        "example": {
            "code": "steam_create_leaderboard(\"Game Times\", lb_sort_ascending, lb_disp_time_sec);",
            "description": ""
        },
        "signature": "steam_create_leaderboard(lb_name, sort_method, display_type);",
        "function": "steam_create_leaderboard",
        "documentation": "With this function you can create a new leaderboard for your game. The first argument is a string which defines the name of your leaderboard, and this name should be used in any further function calls relating to the leaderboard being created. You can then define the sort method (see the constants listed below) as well as the way in which the information is displayed (again, one of the constants listed below). The function will return a value of -1 if it fails to create the leaderboard or a value greater than -1 if it has succeeded.  \n  \n_**NOTE:** If you have previously created a leaderboard with the same name (either through code or through your Steam page for the game) this function will be ignored!_",
        "return": "Real"
    },
    "steam_set_stat_float": {
        "parameters": [
            {
                "label": "stat_name",
                "documentation": "The name of the statistic to set (a string)."
            },
            {
                "label": "value",
                "documentation": "The value (a 32bit float) to set the stat to."
            }
        ],
        "example": {
            "code": "var dist_pc = (dist / dist_max) * 100;<br> steam_set_stat_float(\"Travelled\", dist_pc);<br>",
            "description": ""
        },
        "signature": "steam_set_stat_float(stat_name, value);",
        "function": "steam_set_stat_float",
        "documentation": "With this function you can set a specific statistic to a new, **floating point**, value. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel. Examples of when you could use this are for tracking how far your player has travelled, or what percentage of the game is complete.",
        "return": "N/A"
    },
    "url_open_full": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The URL (website address) to link to."
            },
            {
                "label": "target",
                "documentation": "This is the target area to open the URL in (see description)."
            },
            {
                "label": "options",
                "documentation": "Standard browser options (see description)."
            }
        ],
        "example": {
            "code": "url_open_full( 'http://yoyogames.com', '_blank', 'resizable=0, height=200, scrollbars=0');",
            "description": ""
        },
        "signature": "url_open_full(url, target, options);",
        "function": "url_open_full",
        "documentation": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The \"target\" parameter that you specify is the same as the standard JavaScript \"name\" value when you use the open() method (be aware that all but '_self' may result in the browser blocking, or asking the user if they wish to allow it) and the \"options\" is the same as the JavaScript \"specs\" parameter for controlling what properties the new window/tab should display (not all browsers may support all features).  \n  \nValid targets are:",
        "return": "N/A"
    },
    "camera_set_proj_mat": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "matrix",
                "documentation": "The unique matrix ID returned when you created the matrix."
            }
        ],
        "example": {
            "code": "view_camera[0] = camera_create();<br> var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);<br> var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);<br> camera_set_view_mat(view_camera[0], viewmat);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "camera_set_proj_mat(camera_id, matrix)",
        "function": "camera_set_proj_mat",
        "documentation": "This function will set the **projection matrix** for a given camera. You give the unique camera ID value (as returned by the different camera_create functions) and a view matrix to be applied. You can find out more about creating projection matrices from the section [Matrix Functions](../../matrices/index.html), specifically [matrix\\_build\\_projection_perspective](../../matrices/matrix_build_projection_perspective.html) and [matrix\\_build\\_projection_ortho](../../matrices/matrix_build_projection_ortho.html). Note that if your camera does automatic object tracking - ie: it has been created using [camera\\_create\\_view](camera_create_view.html) with an object index / instance ID that isn't -1, or you are setting a camera defined in the Room Editor, or you are setting the default camera - then this matrix will get overwritten the next game frame.",
        "return": "N/A"
    },
    "window_set_rectangle": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The new x coordinate of the window."
            },
            {
                "label": "y",
                "documentation": "The new y coordinate of the window."
            },
            {
                "label": "w",
                "documentation": "The new width of the window."
            },
            {
                "label": "h",
                "documentation": "The new height of the window."
            }
        ],
        "example": {
            "code": "window_set_rectangle(0, 0, display_get_width(), display_get_height());",
            "description": ""
        },
        "signature": "window_set_rectangle(x, y, w, h);",
        "function": "window_set_rectangle",
        "documentation": "",
        "return": "N/A"
    },
    "ds_grid_multiply_region": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The x position of the left of the region in the grid."
            },
            {
                "label": "y1",
                "documentation": "The y position of the top of the region in the grid."
            },
            {
                "label": "x2",
                "documentation": "The x position of the right of the region in the grid."
            },
            {
                "label": "y2",
                "documentation": "The y position of the bottom of the region in the grid."
            },
            {
                "label": "val",
                "documentation": "The value to multiply with the region cells."
            }
        ],
        "example": {
            "code": "ds_grid_multiply_region( mygrid, 5, 5, 10, 10, 2 )<br>",
            "description": ""
        },
        "signature": "ds_grid_multiply_region(index, x1, y1, x2, y2, val);",
        "function": "ds_grid_multiply_region",
        "documentation": "With this function you can specify a region of the grid in which to multiply each cell value by a given amount.",
        "return": "N/A"
    },
    "draw_get_lighting": {
        "parameters": [],
        "example": {
            "code": "if !draw_get_lighting()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_set_lighting(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_get_lighting()",
        "function": "draw_get_lighting",
        "documentation": "This function will return whether lighting is enabled ( true) or not (false) for the whole scene.",
        "return": "Boolean"
    },
    "phy_collision_x": {
        "parameters": [],
        "example": {
            "code": "var i;<br> for(i = 0; i &lt; phy_collision_points; i += 1;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_particles_create(global.Sname, phy_collision_x[i], phy_collision_y[i], global.Spark, 5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_collision_x;",
        "function": "phy_collision_x;",
        "documentation": "This **read-only** array returns the x position of all points detected in a collision between two physics enabled instances.  \n  \n_**NOTE:** This variable is only available in the collision event of a physics enabled instance._",
        "return": "Real"
    },
    "physics_particle_count": {
        "parameters": [],
        "example": {
            "code": "if physics_particle_count() &lt; physics_particle_get_max_count()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_particle_create(0, x, y, 0, 0, c_white, 1, 1)<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_particle_count()",
        "function": "physics_particle_count",
        "documentation": "This function will return the number of particles that are active in a physics enabled room.",
        "return": "Real"
    },
    "physics_particle_group_delete": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index (ID) of the particle to delete."
            }
        ],
        "example": {
            "code": "physics_particle_delete(part);",
            "description": ""
        },
        "signature": "physics_particle_group_delete(ind)",
        "function": "physics_particle_group_delete",
        "documentation": "With this function you can delete (remove) a particle from the physics simulation in the current room. The function takes the unique ID of the particle to delete, as returned by the function [physics\\_particle\\_create()](physics_particle_create.html).",
        "return": "N/A"
    },
    "clickable_add_ext": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position within the window."
            },
            {
                "label": "y",
                "documentation": "The y position within the window."
            },
            {
                "label": "tpe",
                "documentation": "The texture page entry for the sprite to be used (use sprite_get_tpe)."
            },
            {
                "label": "url",
                "documentation": "The URL (website address) to link to, or the script to be run."
            },
            {
                "label": "target",
                "documentation": "This is the target area to open the URL in (see description)."
            },
            {
                "label": "params",
                "documentation": "The various parameters for the icon (see description)."
            },
            {
                "label": "scale",
                "documentation": "The scale of the icon (default 1)."
            },
            {
                "label": "alpha",
                "documentation": "The image alpha of the icon (default 1)."
            }
        ],
        "example": {
            "code": "home_but = clickable_add_ext(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\", 2, 1);",
            "description": ""
        },
        "signature": "clickable_add_ext(x, y, tpe, url, target, params, scale, alpha);",
        "function": "clickable_add_ext",
        "documentation": "With this function you can create a custom, clickable, icon that acts as a \"button\" outside of the game canvas, but within the browser window itself. The function will return an id value which must be stored in a variable to be used in all further button functions that reference the new icon. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through _GameMaker Studio 2_ itself.  \n  \nThis function works exactly the same as the [clickable_add](clickable_add.html) function, where you must set the position relative to the (0,0) of the browser window, give the texture page entry for the sprite you wish the button icon to have (see: [sprite\\_get\\_tpe](../sprites/sprite_get_tpe.html)), specify either a URL to open or a script (from the resource tree of _GameMaker Studio 2_) to be opened or run then set the target and parameters to use. However this function also has two additional options that permit you to set the icon alpha from 0 (fully transparent) to 1 (fully opaque) and the scale of the icon, which is a multiplier value applied to the sprite used. So a value of 1 is the default scale, while (for example) 0.5 would be half scale and 2 would be double.",
        "return": "Real"
    },
    "gpu_get_zfunc": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_zfunc() != cmpfunc_greater<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_zfunc(cmpfunc_greater);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_zfunc();",
        "function": "gpu_get_zfunc",
        "documentation": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):",
        "return": "Constant (see table above)"
    },
    "skeleton_animation_get_frames": {
        "parameters": [
            {
                "label": "anim_name",
                "documentation": "The animation name to get the frames of."
            }
        ],
        "example": {
            "code": "var num = skeleton_animation_get_frames(skeleton_animation_get());<br> image_index = num -1;<br> image_speed = 0;<br>",
            "description": ""
        },
        "signature": "skeleton_animation_get_frames(anim_name);",
        "function": "skeleton_animation_get_frames",
        "documentation": "This function can be used to retrieve the number of frames that any given skeleton animation has. You supply the skeleton animation name (as a string, as defined in the program used to make the animation, or as returned by using the function [skeleton\\_animation\\_get](skeleton_animation_get.html), and the function returns the frames that it has as an integer value. The function will return 0 if the specified animation does not exist.",
        "return": "Integer"
    },
    "gpu_set_tex_max_mip": {
        "parameters": [
            {
                "label": "maxmip",
                "documentation": "The maximum mipmap level (default: 16)"
            }
        ],
        "example": {
            "code": "if gpu_get_tex_max_mip() != 4<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_mip(4);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_max_mip(maxmip);",
        "function": "gpu_set_tex_max_mip",
        "documentation": "With this function you can set the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
        "return": "N/A"
    },
    "ef_snow": {
        "parameters": [],
        "example": {
            "code": "switch (global.weather)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 1:<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_rain, 0, 0, 1, c_gray);<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;case 2:<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_snow, 0, 0, 1, c_gray);<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_snow;",
        "function": "ef_snow;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a snow effect as illustrated in the image below:  \n  \n![](images/ef_snow.png)  \n  \n_**NOTE:** This effect needs no x/y position as it is always drawn at the 0,0 room position to cover the full screen and the size value relates to the number of particles created, not the size of individual particles._",
        "return": "N/A."
    },
    "vertex_texcoord": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "u",
                "documentation": "The first texture coordinate to use (0 - 1)."
            },
            {
                "label": "v",
                "documentation": "The second texture coordinate to use (0 - 1)."
            }
        ],
        "example": {
            "code": "vertex_texcoord(buff, 0, 0);",
            "description": ""
        },
        "signature": "vertex_texcoord(buffer, u, v);",
        "function": "vertex_texcoord",
        "documentation": "This function will set the texture coordinates to use for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the UV position within the texture to use.",
        "return": "N/A"
    },
    "draw_tilemap": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the cell y position of"
            },
            {
                "label": "x",
                "documentation": "The x position within the room to draw at"
            },
            {
                "label": "y",
                "documentation": "The y position within the room to draw at"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Effects\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> draw_tilemap(map_id, mouse_x, mouse_y);<br>",
            "description": ""
        },
        "signature": "draw_tilemap(tilemap_element_id, x, y);",
        "function": "draw_tilemap",
        "documentation": "",
        "return": "N/A"
    },
    "file_text_writeln": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to edit."
            }
        ],
        "example": {
            "code": "var i, file;<br> file = file_text_open_write(working_directory + \"hiscore.txt\");<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_text_write_real(file, scr[i]);<br> &nbsp;&nbsp;&nbsp;file_text_writeln(file);<br> &nbsp;&nbsp;&nbsp;file_text_write_string(file, scr_name[i]);<br> &nbsp;&nbsp;&nbsp;file_text_writeln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_writeln(fileid);",
        "function": "file_text_writeln",
        "documentation": "With this function you can write a new line to an opened text file. In this way you can skip lines or write information on a line by line basis (see example code below).",
        "return": "Real"
    },
    "date_time_of": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to extract the time from."
            }
        ],
        "example": {
            "code": "time = date_time_of(date_current_datetime());",
            "description": ""
        },
        "signature": "date_time_of(date);",
        "function": "date_time_of",
        "documentation": "Returns the time value of the given datetime. The time returned ignores Daylight Saving Time (and so is Universal Time) and would normally be used in conjunction with another date/time handling function.",
        "return": "Real"
    },
    "matrix_stack_clear": {
        "parameters": [],
        "example": {
            "code": "if !matrix_stack_is_empty()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;matrix_stack_clear();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "matrix_stack_clear();",
        "function": "matrix_stack_clear",
        "documentation": "This function clears the matrix stack.",
        "return": "N/A"
    },
    "gpu_get_alphatestref": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_alphatestenable()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if gpu_get_alphatestref() &lt; 254<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpu_set_alphatestref(254);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_get_alphatestref();",
        "function": "gpu_get_alphatestref",
        "documentation": "You can use this function to find the current value for the alpha test reference (default is 0, but you can use [gpu\\_set\\_alphatestref](gpu_set_alphatestref.html) to set this value to something other than this).",
        "return": "Real (from 0 - 255)"
    },
    "working_directory": {
        "parameters": [],
        "example": {
            "code": "ini_open(working_directory + \"temp_ini.ini\");",
            "description": ""
        },
        "signature": "working_directory",
        "function": "working_directory",
        "documentation": "Working_directory can actually return two different values depending on what you are using it for. If you are writing a file to disk, working_directory points to the area of local storage that is reserved for your game on the target device (in windows this is \"%LOCALAPPDATA%/gamedir/\" where the \"gamedir\" is the directory with the name of your game). However, when reading from disk, working_directory can be _either_ the local storage _or_ the area where the included files are stored.",
        "return": "String"
    },
    "rectangle_in_circle": {
        "parameters": [
            {
                "label": "sx1",
                "documentation": "The x coordinate of the left side of the source rectangle."
            },
            {
                "label": "sy1",
                "documentation": "The y coordinate of the top side of the source rectangle."
            },
            {
                "label": "sx2",
                "documentation": "The x coordinate of the right side of the source rectangle."
            },
            {
                "label": "sy2",
                "documentation": "The y coordinate of the bottom side of the source rectangle."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of the centre of the circle"
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the centre of the circle."
            },
            {
                "label": "rad",
                "documentation": "The x coordinate of the second side of the triangle to check."
            }
        ],
        "example": {
            "code": "inst = instance_nearest(x, y, obj_Bullet);<br> if instance_exists(inst)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if rectangle_in_circle(inst.x - 5, inst.y - 5, inst.x + 5, inst.y + 5, x, y - 25, 20) &gt; 0<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "rectangle_in_circle(sx1, sy1, sx2, sy2, x, y, rad);",
        "function": "rectangle_in_circle",
        "documentation": "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined circular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:  \n![](images/rectangle_in_circle.png)",
        "return": "Real."
    },
    "mp_grid_clear_all": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            }
        ],
        "example": {
            "code": "if !instance_exists(obj_Player) mp_grid_clear_all(grid);<br>",
            "description": ""
        },
        "signature": "mp_grid_clear_all(id);",
        "function": "mp_grid_clear_all",
        "documentation": "With this function you can clear an mp_grid of all \"forbidden\" cells.",
        "return": "Boolean."
    },
    "skeleton_slot_data": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The sprite index of the Spine skeletal animation to get the data from."
            },
            {
                "label": "list",
                "documentation": "The ID of the DS list to populate with the DS maps."
            }
        ],
        "example": {
            "code": "var list = ds_list_create();<br> var open = true;<br> slot_name = \"\";<br> skeleton_slot_data(sprite_index, list);<br> for (var i = 0; i &lt; ds_list_size(list); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var map = list[| i];<br> &nbsp;&nbsp;&nbsp;if open<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if map[? \"attachment\"] == \"(none)\"<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;open = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slot_name = map[? \"name\"];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(map);<br> &nbsp;&nbsp;&nbsp;}<br> ds_list_destroy(list);<br>",
            "description": ""
        },
        "signature": "skeleton_slot_data(sprite, list);",
        "function": "skeleton_slot_data",
        "documentation": "With this function you can populate a (pre-created) [ds_list](../../data_structures/ds%20lists/index.html) with data for each of the available attachment slots that an animation contains. This data is returned in the forum of a [ds_map](../../data_structures/ds%20maps/index.html) which contains the following key/value pairs:",
        "return": "N/A"
    },
    "camera_set_view_target": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            },
            {
                "label": "instance_id/object_id",
                "documentation": "Instance or object to have the camera target for following"
            }
        ],
        "example": {
            "code": "camera_set_view_target(view_camera[0], id);",
            "description": ""
        },
        "signature": "camera_set_view_target(camera_id, instance_id/object_id)",
        "function": "camera_set_view_target",
        "documentation": "You can use this function to set the follow target of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the target instance or object ID that you wish to set the camera view to. Note that if you choose an object ID and there is more than one instance of that object in the room, there is no way for _GameMaker Studio 2_ to know which instance you wish to follow and so it could be any of them.",
        "return": "N/A"
    },
    "gpu_set_tex_max_mip_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            },
            {
                "label": "maxmip",
                "documentation": "The maximum mipmap level value to use (default: 16)"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_max_mip_ext(_sampleIndex) != 4<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_mip_ext(_sampleIndex, 4);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_max_mip_ext(sampler_index, maxmip);",
        "function": "gpu_set_tex_max_mip_ext",
        "documentation": "With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
        "return": "N/A"
    },
    "font_add_sprite": {
        "parameters": [
            {
                "label": "spr",
                "documentation": "The sprite to add a font based on."
            },
            {
                "label": "first",
                "documentation": "The index of the first available character."
            },
            {
                "label": "prop",
                "documentation": "Set as proportional font or not."
            },
            {
                "label": "sep",
                "documentation": "The space to leave between each letter."
            }
        ],
        "example": {
            "code": "global.Font = font_add_sprite(spr_HUD_Font, ord(\"!\"), true, 2);<br>",
            "description": ""
        },
        "signature": "font_add_sprite(spr, first, prop, sep);",
        "function": "font_add_sprite",
        "documentation": "With this function you can use a \"sprite strip\" to create a new font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with \"!\" but remember that you should only include what you need and that you should be using the [ord](../strings/ord.html) function to get the correct UTF8 value for the starting letter. The created sprite font will then have the sub-images set to an individual glyph from the font, where the \"first\" glyph will have the image_index of 0. You can define \"space\" as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will _never_ be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.",
        "return": "Real"
    },
    "date_get_hour_of_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "myhouryear = date_get_hour_of_year(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_hour_of_year(date);",
        "function": "date_get_hour_of_year",
        "documentation": "This function returns the hour of the given datetime value within the year (from the total number of hours for the year, taking into account leap years).",
        "return": "Real"
    },
    "phy_speed": {
        "parameters": [],
        "example": {
            "code": "if phy_speed &gt; 10<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_linear_damping += 0.01;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_linear_damping = 2;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_speed;",
        "function": "phy_speed;",
        "documentation": "This **read-only** variable returns the speed as a value in pixels-per-second of the physics enabled instance. Should you need to change this value, you must do so by changing the x and y vectors using the variables [phy\\_speed\\_x](phy_speed_x.html) and [phy\\_speed\\_y](phy_speed_y.html).",
        "return": "Real"
    },
    "shader_set_uniform_i": {
        "parameters": [
            {
                "label": "handle",
                "documentation": "The handle of the shader constant to set."
            },
            {
                "label": "value1 ... value4",
                "documentation": "The integer value (or values) to set the shader constant to."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> shader_params = shader_get_uniform(shader_glass, \"u_vParams\");<br> shader_set_uniform_i(shader_params, 0, 65, 255);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set_uniform_i(handle, value1 [, value2, value3, value4]);",
        "function": "shader_set_uniform_i",
        "documentation": "With this function you can set the value (or values) of a shader constant. You must previously have gotten the \"handle\" of the constant using the function [shader\\_get\\_uniform](shader_get_uniform.html), and you will have to know what type of constant it is to pass the correct number of integer values through to it, ie: if you have a vec2 you will need to pass two values to the function.",
        "return": "N/A"
    },
    "steam_file_delete": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file delete."
            }
        ],
        "example": {
            "code": "if steam_file_exists(\"Save.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_file_delete(\"Save.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_file_delete(filename);",
        "function": "steam_file_delete",
        "documentation": "This function will delete the given file from the Steam Cloud. The function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
        "return": "Real"
    },
    "audio_free_buffer_sound": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the buffered sound to free."
            }
        ],
        "example": {
            "code": "audio_free_buffer_sound(soundID);",
            "description": ""
        },
        "signature": "audio_free_buffer_sound(index);",
        "function": "audio_free_buffer_sound",
        "documentation": "With this function you can free up the pointer index value associated with the sound ID. Freed sounds will not be available for playing, and if multiple instances of the sound are being played they will all be stopped. Note that before you can delete the buffer itself, you must first free all sound ID's associated with it.",
        "return": "N/A"
    },
    "gpu_set_alphatestenable": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable or disable alpha testing (true / false)"
            }
        ],
        "example": {
            "code": "if !gpu_get_alphatestenable()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_alphatestenable(true);<br> &nbsp;&nbsp;&nbsp;gpu_set_alphatestref(128);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_alphatestenable(enable);",
        "function": "gpu_set_alphatestenable",
        "documentation": "This function will enable or disable alpha testing for your game (by default this is disabled). By switching alpha testing on you can then use the companion function [gpu\\_set\\_alphatestref](gpu_set_alphatestref.html) to set the \"cut-off\" value at which all alpha values will be set to 0. The image below shows the difference that can be seen when alpha testing is switched on or off: ![](images/alpha_test_on_off.png)",
        "return": "N/A"
    },
    "move_wrap": {
        "parameters": [
            {
                "label": "hor",
                "documentation": "Whether to wrap horizontally (true) or not (false)."
            },
            {
                "label": "vert",
                "documentation": "Whether to wrap vertically (true) or not (false)."
            },
            {
                "label": "margin",
                "documentation": "How far outside the room, in pixels, the object must be to initiate wrapping."
            }
        ],
        "example": {
            "code": "move_wrap(true, false, sprite_width);",
            "description": ""
        },
        "signature": "move_wrap(hor, vert, margin);",
        "function": "move_wrap",
        "documentation": "This function will automatically \"wrap\" an instance that has left the room on either the horizontal or vertical (or both) axis. You can specify a margin outside the edges of the room for this to occur, and when the instance has travelled outside of that margin _GameMaker Studio 2_ will automatically wrap it back into the room at the other side. Note that the instance must have a speed for wrapping to work, because the direction of wrapping is based on the direction of the motion.",
        "return": "N/A"
    },
    "physics_particle_group_get_y": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "xx = physics_particle_group_get_x(group1);<br> yy = physics_particle_group_get_y(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_y(group)",
        "function": "physics_particle_group_get_y",
        "documentation": "With this function you can retrieve the y position in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "shader_set_uniform_i_array": {
        "parameters": [
            {
                "label": "handle",
                "documentation": "The handle of the shader constant to set."
            },
            {
                "label": "array",
                "documentation": "A previously initialised array of integer values."
            }
        ],
        "example": {
            "code": "shader_set(shader_Glass);<br> col_array[0] = 255;<br> col_array[2] = 255;<br> col_array[3] = 64;<br> col_array[4] = 128;<br> shader_params = shader_get_uniform(shader_tint, \"cColourArray\");<br> shader_set_uniform_i_array(shader_params, col_array);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_set_uniform_i_array(handle, array);",
        "function": "shader_set_uniform_i_array",
        "documentation": "With this function you can set a shader constant to hold an array of values. You must previously have gotten the \"handle\" of the constant using the function [shader\\_get\\_uniform](shader_get_uniform.html), and you will have to have previously initialised the array.",
        "return": "N/A"
    },
    "keyboard_check_released": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to check the released state of."
            }
        ],
        "example": {
            "code": "if keyboard_check_released(ord(\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(0, 0, \"Controllers\", obj_Pause);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_check_released(key);",
        "function": "keyboard_check_released",
        "documentation": "With this function you can check to see if a key has been released or not. Unlike the [keyboard_check](keyboard_check.html) function, this function will only run once for every time the key is lifted, so for it to trigger again, the key must be first pressed and then released again.",
        "return": "Boolean"
    },
    "part_system_position": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to change."
            },
            {
                "label": "x",
                "documentation": "The new x coordinate of the particle system."
            },
            {
                "label": "y",
                "documentation": "The new y coordinate of the particle system."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_system_position(global.Sname, mouse_x, mouse_y);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_position(ind, x, y);",
        "function": "part_system_position",
        "documentation": "With this function you can set the base position for the particle system relative to the (0,0) position of the room, meaning that all further particle functions relating to this system will now be drawn relative to the new position. By default this position is always (0,0), but in some very special circumstances you may wish to change this to something else.  \n  \n_**NOTE:** This function will change **everything** within the particle system, so if you have an emitter at position (100,100) and then set the particle system position to (0,100), the emitter will now draw at (100,200). The same goes if you shift the system and then create the emitter, as even though you create it at (100,100) it will be drawn at (100,200)._",
        "return": "N/A"
    },
    "draw_set_halign": {
        "parameters": [
            {
                "label": "halign",
                "documentation": "Horizontal alignment."
            }
        ],
        "example": {
            "code": "draw_set_halign(fa_left);<br> draw_text(100, 32, \"Score: \" + string(score));<br> draw_set_halign(fa_right);<br> draw_text(room_width - 100, 32, \"Health: \" + string(health));<br>",
            "description": ""
        },
        "signature": "draw_set_halign(halign);",
        "function": "draw_set_halign",
        "documentation": "This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being **fa_left**. The following constants are accepted:",
        "return": "N/A"
    },
    "ystart": {
        "parameters": [],
        "example": {
            "code": "if place_meeting(x, y, obj_spike)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score -= 100;<br> &nbsp;&nbsp;&nbsp;x = xstart;<br> &nbsp;&nbsp;&nbsp;y = ystart;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ystart;",
        "function": "ystart;",
        "documentation": "",
        "return": "Real"
    },
    "point_distance_3d": {
        "parameters": [],
        "example": {
            "code": "var inst, ex, ey, ez;<br> inst = instance_nearest(x, y, enemy);<br> if inst<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ex = inst.x;<br> &nbsp;&nbsp;&nbsp;ey = inst.y;<br> &nbsp;&nbsp;&nbsp;ez = inst.z;<br> &nbsp;&nbsp;&nbsp;if point_distance_3d(x, y, z, ex, ey, ez) &lt; 200<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Bullets\", obj_Missile)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "point_distance_3d(x1, y1, z1, x2, y2, z2);",
        "function": "point_distance_3d",
        "documentation": "This function takes the supplied components of the vector and returns the length (distance) of the vector. It works in exactly the same way as point_distance() but with the addition of factoring in the z value (depth) for use in 3D space.",
        "return": "Real"
    },
    "layer_script_end": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "script",
                "documentation": "The script index to assign to the layer"
            }
        ],
        "signature": "layer_script_end(layer_id, script)",
        "function": "layer_script_end",
        "documentation": "With this function you can assign a script to a layer and it will be called after the layer is rendered. When adding a script to a layer, in this way it will be run at the end of _each of the different draw events_ so you may want to check in the script assigned which event is currently finished rendering and adapt the code to suit. This can be done by checking the [event_type](../../objects/generating%20events/event_type.html) and/or the [event_number](../../objects/generating%20events/event_number.html) (see the extended example below). Note that the function is _not_ meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the Room Creation Code or in the Create Event/Room Start Event of an instance.",
        "return": "N/A"
    },
    "tilemap_get_x": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the x position of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var _x = tilemap_get_x(map_id);<br> var _y = tilemap_get_y(map_id);<br> tilemap_x(map_id, _x + 10); tilemap_y(map_id, _y + 10);",
            "description": ""
        },
        "signature": "tilemap_get_x(tilemap_element_id);",
        "function": "tilemap_get_x",
        "documentation": "",
        "return": "Real"
    },
    "tile_get_empty": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> for (var i = 0; i &lt; tilemap_get_width(map_id); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;for (var j = 0; j &lt; tilemap_get_height(map_id); j++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data = tilemap_get(map_id, i, j);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if !tile_get_empty(data)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = tile_set_empty(data)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tilemap_set(map_id, data, i, j);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tile_get_empty(tiledata)",
        "function": "tile_get_empty",
        "documentation": "",
        "return": "Boolean"
    },
    "steam_available_languages": {
        "parameters": [],
        "example": {
            "code": "language = steam_available_languages();<br>",
            "description": ""
        },
        "signature": "steam_available_languages();",
        "function": "steam_available_languages",
        "documentation": "This function can be used to retrieve a list of all available languages for Steam. The returned value is simply a a comma separated list of languages.",
        "return": "String"
    },
    "path_delete_point": {
        "parameters": [],
        "example": {
            "code": "path_delete_point(mypath, path_get_number(mypath) - 1);",
            "description": ""
        },
        "signature": "path_delete_point(ind, n);",
        "function": "path_delete_point",
        "documentation": "With this function you can remove a point from the specified path. Path points are numbered from 0 so the first point is always the 0th point and the last path point will be [path\\_get\\_number()](../path%20information/path_get_number.html) \\- 1.",
        "return": "N/A"
    },
    "path_set_precision": {
        "parameters": [],
        "example": {
            "code": "path_set_precision(path0, 2);",
            "description": ""
        },
        "signature": "path_set_precision(index, prec);",
        "function": "path_set_precision",
        "documentation": "With this function you can change the \"smoothness\" of a path. This value must be between 1 and 8, with a low value creating straighter edges with sharper curves between points, while a higher value will round the points and make the path a lot more \"curvy\". Note that this function will have no visible effect if the path has not been set to smooth in the path editor or using the function [path\\_set\\_kind](path_set_kind.html). This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.  \n  \n![](setprecision.png)",
        "return": "N/A"
    },
    "tilemap_set": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to change"
            },
            {
                "label": "tiledata",
                "documentation": "The tile data to set"
            },
            {
                "label": "xcell",
                "documentation": "The cell (grid) position to set along the x-axis"
            },
            {
                "label": "ycell",
                "documentation": "The cell (grid) position to set along the y-axis"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var data = tilemap_get(map_id, 0, 0);<br> data = tile_set_flip(data, true);<br> tilemap_set(map_id, data, 0, 0);<br>",
            "description": ""
        },
        "signature": "tilemap_set(tilemap_element_id, tiledata, xcell, ycell)",
        "function": "tilemap_set",
        "documentation": "",
        "return": "Boolean"
    },
    "tile_get_rotate": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> var data = tilemap_get(map_id, mx, my);<br> var bool = !tile_get_rotate(data);<br> data = tile_set_rotate(data, bool);<br> tilemap_set(map_id, data, mx, my);<br>",
            "description": ""
        },
        "signature": "tile_get_rotate(tiledata)",
        "function": "tile_get_rotate",
        "documentation": "",
        "return": "Boolean"
    },
    "shader_is_compiled": {
        "parameters": [
            {
                "label": "shader",
                "documentation": "The shader to check."
            }
        ],
        "example": {
            "code": "global.GFX = false;<br> if shader_is_compiled(sh_glass) &amp;&amp; shader_is_compiled(sh_warp)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.GFX = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "shader_is_compiled(shader);",
        "function": "shader_is_compiled",
        "documentation": "This function will check a shader at run-time to make sure that it has been successfully compiled. If it has then the function returns true otherwise it returns false. This function should be used at the start of the game to make sure that the platform running your game has successfully compiled any shaders used (particularly on Windows where some computers may be using DX9 with Shader Level 2.0 and not a later version using shader level 3.0).",
        "return": "N/A"
    },
    "ds_grid_value_disk_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            },
            {
                "label": "val",
                "documentation": "The value to find."
            }
        ],
        "example": {
            "code": "if ds_grid_value_disk_exists(grid, 5, 5, 5, val)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;xpos = ds_grid_value_disk_x(grid, 5, 5, 5, val);<br> &nbsp;&nbsp;&nbsp;ypos = ds_grid_value_disk_y(grid, 5, 5, 5, val);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_value_disk_exists(index, xm, ym, r, val);",
        "function": "ds_grid_value_disk_exists",
        "documentation": "With this function you can check to see if a specific value (real or string) is present within a circular area of a given ds_grid. If it is present the function will return true otherwise it will return false.",
        "return": "Boolean"
    },
    "part_type_alpha2": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "alpha1",
                "documentation": "The start alpha of the particle."
            },
            {
                "label": "alpha2",
                "documentation": "The end alpha of the particle."
            }
        ],
        "example": {
            "code": "part_type_alpha2(global.Snow_Part, 0, 1);",
            "description": ""
        },
        "signature": "part_type_alpha2(ind, alpha1, alpha2);",
        "function": "part_type_alpha2",
        "documentation": "This function can be used to set an alpha value (transparency) gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one on with which the particle will end with, and a smooth gradient change will occur to the alpha over the particles lifetime from one to the other. This can be from 0 (transparent) to 1 (opaque).",
        "return": "N/A"
    },
    "surface_create_ext": {
        "parameters": [
            {
                "label": "name",
                "documentation": "The name of the canvas element to link the surface to."
            },
            {
                "label": "w",
                "documentation": "The width of the surface to be created."
            },
            {
                "label": "h",
                "documentation": "The height of the surface to be created."
            }
        ],
        "example": {
            "code": "s1 = surface_create_ext(\"surface1\", 192, 550);<br> s2 = surface_create_ext(\"surface2\", 608, 186);<br> view_surface_id[1] = s1;<br> view_surface_id[2] = s2;<br>",
            "description": ""
        },
        "signature": "surface_create_ext(name, w, h);",
        "function": "surface_create_ext",
        "documentation": "This function allows you to attach a surface to a canvas element that already exists in your web page, meaning that you can effectively split up portions of your game to be drawn at various different places within the page. To that end, you _must_ have defined the canvas element correctly within the *.html page of your game using the correct sizes and names that correspond to the surfaces you wish to create. So, you would have your \"main\" canvas, and then your secondary surface canvas elements, which will be assigned using this function to the correct surfaces. The following image is an example of how a page with three canvas elements would be set up: ![](surface_ext_1.png)",
        "return": "Real"
    },
    "tilemap_get_cell_y_at_pixel": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the cell y position of"
            },
            {
                "label": "x",
                "documentation": "The x position within the room to use for getting the cell"
            },
            {
                "label": "y",
                "documentation": "The y position within the room to use for getting the cell"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var _x = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var _y = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> tiledata = tilemap_get(map_id, _x, _y);<br>",
            "description": ""
        },
        "signature": "tilemap_get_cell_y_at_pixel(tilemap_element_id, x, y);",
        "function": "tilemap_get_cell_y_at_pixel",
        "documentation": "",
        "return": "Integer (y-axis cell position or -1 if there is an error)"
    },
    "audio_sound_get_pitch": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to get the pitch of."
            }
        ],
        "example": {
            "code": "if audio_sound_get_pitch(snd_Explode) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_sound_pitch(snd_Explode, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sound_get_pitch(index);",
        "function": "audio_sound_get_pitch",
        "documentation": "This function can be used to get the get pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions, or an actual sound asset from the resource tree.",
        "return": "Real"
    },
    "window_get_visible_rects": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The left edge of the rectangle to check"
            },
            {
                "label": "y1",
                "documentation": "The top edge of the rectangle to check."
            },
            {
                "label": "x2",
                "documentation": "The right edge of the rectangle to check"
            },
            {
                "label": "y2",
                "documentation": "The bottom edge of the rectangle to check."
            }
        ],
        "example": {
            "code": "var wx = window_get_x();<br> var wy = window_get_y();<br> var ww = window_get_width();<br> var wh = window_get_height();<br> display_data = window_get_visible_rects(wx, wy, wx + ww, wy + wh);<br> display_num = array_length_1d(display_data) / 8;<br>",
            "description": ""
        },
        "signature": "window_get_visible_rects(x1, y1, x2, y2);",
        "function": "window_get_visible_rects",
        "documentation": "",
        "return": "Array"
    },
    "gpu_set_tex_min_mip_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            },
            {
                "label": "minmip",
                "documentation": "The minimum mipmap level to use"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_min_mip_ext(_sampleIndex) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_min_mip_ext(_sampleIndex, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_min_mip_ext(sampler_index, minmip);",
        "function": "gpu_set_tex_min_mip_ext",
        "documentation": "With this function you can set the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and then give a value, where 0 is for full resolution, 1 is for the first mipmap, 2 for the second etc...",
        "return": "N/A"
    },
    "part_system_exists": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to check for."
            }
        ],
        "example": {
            "code": "if !part_system_exists(global.Sname)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Sname = part_system_create();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_exists(ind);",
        "function": "part_system_exists",
        "documentation": "With this function you can check to see if the given particle system indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle system would otherwise have its index assigned to) this will throw an error.",
        "return": "Boolean"
    },
    "os_type": {
        "parameters": [
            {
                "label": "os_windows",
                "documentation": "Windows OS"
            },
            {
                "label": "os_uwp",
                "documentation": "Windows 10 Universal Windows Platform"
            },
            {
                "label": "os_linux",
                "documentation": "Linux"
            },
            {
                "label": "os_macosx",
                "documentation": "Mac OS X"
            },
            {
                "label": "os_ios",
                "documentation": "iOS (iPhone, iPad, iPod Touch)"
            },
            {
                "label": "os_android",
                "documentation": "Android"
            },
            {
                "label": "os_ps4",
                "documentation": "Sony PlayStation 4"
            },
            {
                "label": "os_xboxone",
                "documentation": "Microsoft XBox One"
            },
            {
                "label": "os_unknown",
                "documentation": "unknown OS"
            }
        ],
        "example": {
            "code": "switch (os_type)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case os_windows: global.Config = 0; break;<br> &nbsp;&nbsp;&nbsp;case os_android: global.Config = 1; break;<br> &nbsp;&nbsp;&nbsp;case os_linux: global.Config = 2; break;<br> &nbsp;&nbsp;&nbsp;case os_macosx: global.Config = 3; break;<br> &nbsp;&nbsp;&nbsp;case os_ios: global.Config = 4; break;<br> &nbsp;&nbsp;&nbsp;case os_winphone: global.Config = 5; break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_type;",
        "function": "os_type;",
        "documentation": "This variable holds one of various constant _GameMaker Studio 2_ has to tell you which operating system the game has been created for. Note that this is _not_ necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case os_type will be os_android).  \n  \nThe following constants can be returned:",
        "return": "Constant"
    },
    "audio_debug": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable (set to true) or disable (false) audio debugging."
            }
        ],
        "example": {
            "code": "if (debug_mode)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_debug(true);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_debug(false);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "audio_debug(enable);",
        "function": "audio_debug",
        "documentation": "This function can be used to display debug information about the audio system, with true switching it on and false to switch it off. When you are debugging audio in this way, the overlay will show the following information: ![](audio_debug.png)",
        "return": "N/A"
    },
    "ds_grid_create": {
        "parameters": [
            {
                "label": "w",
                "documentation": "The width of the grid to be created."
            },
            {
                "label": "h",
                "documentation": "The height of the grid to be created."
            }
        ],
        "example": {
            "code": "mygrid = ds_grid_create(10, 10)<br>",
            "description": ""
        },
        "signature": "ds_grid_create(w, h);",
        "function": "ds_grid_create",
        "documentation": "With this function you can create a new ds\\_grid data structure of the specified cell width and height. This function returns an id which must be used in all further functions that deal with this ds\\_grid.",
        "return": "Real"
    },
    "show_debug_message": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The custom debug message to show."
            }
        ],
        "signature": "show_debug_message(string);",
        "function": "show_debug_message",
        "documentation": "This function will create a custom debug message that is shown in the compiler window at runtime. Note that the message can be _either_ a string or a real number, but if you need both then the number will have to be converted to string first using the [string](../strings/string.html) function (see the example below) and that if the number has more than two decimal places then you should use [string_format](../strings/string_format.html) to show them as by default decimals are rounded to the nearest two decimal places (so \"1.2468\" would show as \"1.25\" in the output window).",
        "return": "N/A"
    },
    "game_save_id": {
        "parameters": [],
        "example": {
            "code": "save_dir = game_save_id;",
            "description": ""
        },
        "signature": "game_save_id",
        "function": "game_save_id",
        "documentation": "This **read-only** variable will return the full path ID of the directory that is used by your game to save files to. This directory may or may not be visible to other applications, depending on the platform, and on the HTML5 target it will return an empty string.",
        "return": "String."
    },
    "y": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check(vk_down) y += 5;<br> if keyboard_check(vk_up) y -= 5;<br>",
            "description": ""
        },
        "signature": "y;",
        "function": "y;",
        "documentation": "",
        "return": "Real"
    },
    "steam_send_screenshot": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the image file to upload (a string)."
            },
            {
                "label": "width",
                "documentation": "The width of the image (an integer)."
            },
            {
                "label": "height",
                "documentation": "The height of the image (an integer)."
            }
        ],
        "example": {
            "code": "if steam_is_screenshot_requested()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var file = \"Catch_The_Haggis_\" + string(global.scrn_num) + \".png\");<br> &nbsp;&nbsp;&nbsp;screen_save(file)<br> &nbsp;&nbsp;&nbsp;steam_send_screenshot(file, window_get_width(), window_get_height());<br> &nbsp;&nbsp;&nbsp;global.scrn_num += 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_send_screenshot(filename, width, height);",
        "function": "steam_send_screenshot",
        "documentation": "With this function you can upload a screenshot to the Steam Community profile page of the currently logged in user. The filename you supply is the name of the local file that was created when you took the screenshot using the _GameMaker Studio 2_ functions [screen_save](../cameras%20and%20display/display/screen_save.html) or [screen\\_save\\_part](../cameras%20and%20display/display/screen_save_part.html). The width and height define the image size, and the function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
        "return": "Real"
    },
    "audio_sync_group_is_playing": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to check."
            }
        ],
        "example": {
            "code": "if audio_sync_group_is_playing(group_one)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_stop_sync_group(group_one);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sync_group_is_playing(group_index);",
        "function": "audio_sync_group_is_playing",
        "documentation": "This function can be used to check if any audio in a synchronised group is playing. You are required to supply the synch group ID as returned by the function [audio\\_create\\_sync_group()](audio_create_sync_group.html).",
        "return": "N/A"
    },
    "camera_set_view_size": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "width",
                "documentation": "The width of the camera view in pixels"
            },
            {
                "label": "height",
                "documentation": "The height of the camera view in pixels"
            }
        ],
        "example": {
            "code": "camera_set_view_size(view_camera[0], view_wport[0], view_hport[0]);",
            "description": ""
        },
        "signature": "camera_set_view_size(camera_id, width, height)",
        "function": "camera_set_view_size",
        "documentation": "You can use this function to update the size of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the width and height (in pixels) to set the camera to.",
        "return": "N/A"
    },
    "gpu_set_tex_max_aniso_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            },
            {
                "label": "maxaniso",
                "documentation": "The maximum anisotropic level to use (default: 16)."
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_max_aniso_ext(_sampleIndex) != 8<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_aniso_ext(_sampleIndex, 8);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_max_aniso_ext(sampler_index, maxaniso);",
        "function": "gpu_set_tex_max_aniso_ext",
        "documentation": "With this function you can set the maximum level of anisotropy when using the tf_anisotropic filter mode (see [gpu\\_get\\_tex\\_mip\\_filter()](gpu_get_tex_mip_filter.html) for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and then a value within the range of 1 and 16 to set the level.",
        "return": "N/A"
    },
    "part_system_depth": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to change."
            },
            {
                "label": "depth",
                "documentation": "The depth at which to set the particle system."
            }
        ],
        "example": {
            "code": "global.Sname = part_system_create();<br> part_system_depth(global.Sname, -1000 );",
            "description": ""
        },
        "signature": "part_system_depth( ind, depth );",
        "function": "part_system_depth",
        "documentation": "With this function you can set the draw depth for the particle system, much the same as you can set the _render depth_ of different layers within the room, where a low draw depth means that it will appear on top of all things drawn with a higher depth, and a high draw depth placing it below everything with a lower draw depth.",
        "return": "N/A"
    },
    "vertex_submit": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to use."
            },
            {
                "label": "primitive",
                "documentation": "The primitive base type."
            },
            {
                "label": "texture",
                "documentation": "The texture to use (or -1 for no texture)."
            }
        ],
        "example": {
            "code": "shader_set(shader_prim);<br> vertex_submit(buff, pr_trianglelist, sprite_get_texture(sprite_index));<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "vertex_submit(buffer, primitive, texture);",
        "function": "vertex_submit",
        "documentation": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
        "return": "N/A"
    },
    "surface_exists": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to check."
            }
        ],
        "example": {
            "code": "if !surface_exists(surf)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surf = surface_create(1024, 1024);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if view_current = 1<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_surface(surf,0,0);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_exists(surface_id);",
        "function": "surface_exists",
        "documentation": "This function is essential when working with surfaces due to their volatile nature. Surfaces are always held in texture memory which means that they can be destroyed from one moment to the next (for example, when a screensaver starts on windows, or when minimised on an Android device), so you should always check that a surface exists before doing anything with it (this includes drawing it to the screen). The example code below shows a typical use of this command in the draw event of an instance to check for a surface and re-create it if it has been removed (note that the surface will have been originally created in the create event of the object).",
        "return": "Boolean"
    },
    "random_set_seed": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The seed to set."
            }
        ],
        "example": {
            "code": "if debug random_set_seed(1);",
            "description": ""
        },
        "signature": "random_set_seed(val);",
        "function": "random_set_seed",
        "documentation": "To generate a random number GameMaker Studio 2 starts with a random seed number. With this function you can set that seed to a known value and so \"force\" the outcome of all random events afterwards to be the same every time the program is run. For example, this function can be used in conjunction with [random\\_get\\_seed](random_get_seed.html) to create procedurally generated content and save the results without having huge savegames (you save the seed only, no need for anything else). Should you need truly random results for everything, you should be using the [randomise()](randomise.html) function.",
        "return": "N/A"
    },
    "steam_current_game_language": {
        "parameters": [],
        "example": {
            "code": "language = steam_current_game_language();<br>",
            "description": ""
        },
        "signature": "steam_current_game_language();",
        "function": "steam_current_game_language",
        "documentation": "This function is used retrieve the current language that Steam is using (as a string), for example \"english\".",
        "return": "String"
    },
    "audio_emitter_get_listener_mask": {
        "parameters": [
            {
                "label": "emitterID",
                "documentation": "The unique ID of the emitter to get the mask of"
            }
        ],
        "example": {
            "code": "s_emit = audio_emitter_create();<br> if audio_emitter_get_listener_mask(s_emit) != global.PlayerMask<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_set_listener_mask(snd, global.PlayerMask);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_listener_mask(emitterID);",
        "function": "audio_emitter_get_listener_mask",
        "documentation": "This function will return the bit-mask data that defines which audio listeners an emitter should play sounds from.",
        "return": "Real"
    },
    "gpu_set_texrepeat": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable or disable texture filtering (true / false)"
            }
        ],
        "example": {
            "code": "if gpu_get_texrepeat()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texrepeat(false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texrepeat(true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_texrepeat(enable);",
        "function": "gpu_set_texrepeat",
        "documentation": "This function can be used to indicate to _GameMaker Studio 2_ whether textures should repeat (true) or not (false) when used for models and primitives. Normally texture widths and heights lie in the range 0 - 1, but if you specify a value larger than 1 by default the rest is not drawn (the entire texture will be drawn with an \"empty\" section corresponding to the percentage over 1 that is used. So a value of 2 for a texture width or height would draw the texture in half the space and leave the other half empty). However, by using this function to set repeat to true the texture is repeated automatically over all models and primitives.",
        "return": "N/A"
    },
    "path_endaction": {
        "parameters": [],
        "example": {
            "code": "if path_endaction == path_action_stop<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_endaction = choose(path_action_restart, path_action_continue, path_action_reverse);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_endaction;",
        "function": "path_endaction;",
        "documentation": "",
        "return": "Constant (see table above)"
    },
    "date_month_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "diff = date_month_span(date_create_datetime(2011, 9, 15, 11, 4, 0 ), date_current_datetime());",
            "description": ""
        },
        "signature": "date_month_span(date1, date2);",
        "function": "date_month_span",
        "documentation": "With this function you can get the number of months between two dates. This value is always positive, and incomplete months will be returned as a fraction.",
        "return": "Real"
    },
    "shader_get_uniform": {
        "parameters": [
            {
                "label": "shader",
                "documentation": "The index of the shader to use."
            },
            {
                "label": "uniform",
                "documentation": "The shader constant to get the handle of (a string)."
            }
        ],
        "example": {
            "code": "shader_params = shader_get_uniform(shader_glass, \"u_vRefractColour\");",
            "description": ""
        },
        "signature": "shader_get_uniform(shader, uniform);",
        "function": "shader_get_uniform",
        "documentation": "Since you cannot change the value of a shader constant within the shader itself, you have to set it before calling the shader using one of the available uniform set functions. However, to be able to do that you must first call this function to get the \"handle\" of the shader constant that you will want to change.",
        "return": "Real"
    },
    "string_repeat": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to repeat."
            },
            {
                "label": "count",
                "documentation": "The number of times to repeat the string."
            }
        ],
        "example": {
            "code": "str1 = \"Hello World\";<br> str2 = string_repeat(str1, 3);<br>",
            "description": ""
        },
        "signature": "string_repeat(str, count);",
        "function": "string_repeat",
        "documentation": "This function simply returns the same string repeated a given number of times over itself.",
        "return": "String"
    },
    "string_replace": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to be copied."
            },
            {
                "label": "substr",
                "documentation": "The substring within the string to be replaced."
            },
            {
                "label": "newstr",
                "documentation": "The new substring to replace the previous one."
            }
        ],
        "example": {
            "code": "str1 = \"Hello Earth\";<br> str2 = string_replace(str1, \"Earth\", \"World\");<br>",
            "description": ""
        },
        "signature": "string_replace(str, substr, newstr);",
        "function": "string_replace",
        "documentation": "You can use this function to parse a string looking for a specific part, which can then be replaced by the new string that you have specified.",
        "return": "String"
    },
    "ds_map_delete": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to change."
            },
            {
                "label": "key",
                "documentation": "The key (along with its associated value) to delete."
            }
        ],
        "example": {
            "code": "ds_map_delete(inventory, \"shield\");",
            "description": ""
        },
        "signature": "ds_map_delete(id, key);",
        "function": "ds_map_delete",
        "documentation": "With this function you can remove any given key (and its corresponding value) from the given, previously created, ds_map.",
        "return": "N/A"
    },
    "part_particles_clear": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_particles_clear(global.Sname);<br> &nbsp;&nbsp;&nbsp;room_goto(rm_intro);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_particles_clear(ind);",
        "function": "part_particles_clear",
        "documentation": "With this function you can clear all the particles currently created by the system from the room. It does _not_ reset or remove the particle types themselves, just their visual representation, and if you have any object streaming particles from an emitter, these particles disappear but will begin to appear again the next step after calling this code.",
        "return": "N/A"
    },
    "surface_copy": {
        "parameters": [
            {
                "label": "destination",
                "documentation": "The ID of the surface to copy the other surface to."
            },
            {
                "label": "x",
                "documentation": "The x position to copy to."
            },
            {
                "label": "y",
                "documentation": "The y position to copy to."
            },
            {
                "label": "source",
                "documentation": "The ID of surface to be copied."
            }
        ],
        "example": {
            "code": "if view_current == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_copy(surf, 0, 0, temp_surf);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_surface(surf, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_copy(destination, x, y, source);",
        "function": "surface_copy",
        "documentation": "This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). If the destination surface already has information this will be overwritten by the copy, and the function does _not_ change the source surface in any way.",
        "return": "N/A"
    },
    "skeleton_animation_set_frame": {
        "parameters": [
            {
                "label": "track",
                "documentation": "The animation track to set the frame of."
            },
            {
                "label": "index",
                "documentation": "The new index for the animation frame."
            }
        ],
        "example": {
            "code": "if global.pause<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;skeleton_animation_set_frame(0, -image_speed);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_set_frame(track, index);",
        "function": "skeleton_animation_set_frame",
        "documentation": "This function will set the animation assigned to the given track to the frame you supply. The frame index should be an real value between 0 and the number of frames for the animation (which you can get using the function [skeleton\\_animation\\_get_frames](skeleton_animation_get_frames.html)). If you supply a value outside of this range, the animation will be looped to make up the difference, for example if the animation has 5 frames and you set the frame to 8, the actual frame shown will be 3.",
        "return": "N/A"
    },
    "steam_upload_score_buffer": {
        "parameters": [
            {
                "label": "lb_name",
                "documentation": "The name of the leaderboard that you are uploading the scores to (a string)."
            },
            {
                "label": "score",
                "documentation": "The score to upload (a real number)."
            },
            {
                "label": "buffer",
                "documentation": "The ID of the buffer to attach."
            }
        ],
        "signature": "steam_upload_score_buffer(lb_name, score, buffer);",
        "function": "steam_upload_score_buffer",
        "documentation": "This function will send a score to the given leaderboard along with a data package created from a buffer. The buffer should be no more than 256 bytes in size - anything beyond that will be chopped off - and can contain any data you require. The score to be uploaded should be a real number, and the leaderboard name is a string that was defined when you created the leaderboard using the function [steam\\_create\\_leaderboard](steam_create_leaderboard.html).  \n  \nIf the function fails, it will return a value of -1, while a successful post will return a unique ID for the upload and trigger an asynchronous [Steam Event](../../../2_interface/1_editors/events/async_events.html). This event will create a ds_map in the built in variable async_load with the following key/value pairs:",
        "return": "Real"
    },
    "audio_group_load": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index of the audio group to load (as defined in the Audio Groups Window)"
            }
        ],
        "example": {
            "code": "if !audio_group_is_loaded(audiogroup_level1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_group_load(audiogroup_level1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_group_load(groupID);",
        "function": "audio_group_load",
        "documentation": "This function will load all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return true if loading is initiated and false if the group ID is invalid, or it has already been flagged for loading. The function is asynchronous so your game will continue to run while the audio is loaded in the background. This means that it will also trigger an [Asynchronous Load/Save Event](../../../2_interface/1_editors/events/async_events.html) to inform you that the whole group has been loaded into memory and the sounds can now be used.",
        "return": "Boolean"
    },
    "ef_firework": {
        "parameters": [],
        "example": {
            "code": "repeat(10)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_firework, random(room_width), random(room_height), choose(0, 1, 2), make_colour_hsv(random(255), 255, 255));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_firework;",
        "function": "ef_firework;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a firework effect as illustrated in the image below:  \n  \n![](images/ef_firework.png)",
        "return": "N/A."
    },
    "draw_surface_stretched_ext": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            },
            {
                "label": "w",
                "documentation": "The width at which to draw the surface."
            },
            {
                "label": "h",
                "documentation": "The height at which to draw the surface."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to colour the surface."
            },
            {
                "label": "alpha",
                "documentation": "The alpha with which to blend the surface."
            }
        ],
        "example": {
            "code": "draw_surface_stretched_ext(surf, x, y, 200, 200, c_white, 0.5);",
            "description": ""
        },
        "signature": "draw_surface_stretched_ext(id, x, y, w, h, col, alpha);",
        "function": "draw_surface_stretched_ext",
        "documentation": "This function does exactly the same as the [draw\\_surface\\_stretched](draw_surface_stretched.html) function with the added ability to set the colour blending and alpha value for the surface when it is drawn (similar to the function [draw\\_surface\\_ext](draw_surface_ext.html)).",
        "return": "N/A"
    },
    "date_set_timezone": {
        "parameters": [
            {
                "label": "timezone",
                "documentation": "The time zone to use for the base time."
            }
        ],
        "example": {
            "code": "if date_get_timezone() != timezone_utc<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;date_set_timezone(timezone_utc);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "date_set_timezone(timezone);",
        "function": "date_set_timezone",
        "documentation": "Sets the base time zone to use for all the rest of the date and time functions. This time zone can either be _local_ (as set by the system) or _UTC_, and you would use one of the following constants to define which is being used (by default this is local time):",
        "return": "N/A"
    },
    "room_assign": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the original room to be copied from."
            },
            {
                "label": "room",
                "documentation": "The index of the room to be copied to."
            }
        ],
        "example": {
            "code": "global.rm = room_add();<br> room_assign(rm_Base, global.rm);<br>",
            "description": ""
        },
        "signature": "room_assign(index, room);",
        "function": "room_assign",
        "documentation": "",
        "return": "N/A"
    },
    "steam_ugc_query_add_excluded_tag": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "tag_name",
                "documentation": "The tag name to exclude (a string)."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);<br> steam_ugc_query_add_excluded_tag(query_handle, \"walking simulator\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": "steam_ugc_query_add_excluded_tag(ugc_query_handle , tag_name);",
        "function": "steam_ugc_query_add_excluded_tag",
        "documentation": "This function can be used to further filter any given UGC query, specifically to exclude a given UGC from the query request. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is a string you want to use as the tag to exclude. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "camera_destroy": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            }
        ],
        "example": {
            "code": "camera_destroy(view_camera[0]);<br> view_camera[0] = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1);<br>",
            "description": ""
        },
        "signature": "camera_destroy(camera_id)",
        "function": "camera_destroy",
        "documentation": "With this function you can destroy any camera. When calling the function you supply the unique camera ID value, which you get from the camera\\_create\\_* functions or from the view_camera array if using the Room Editor to set up the view port and view. You should _never_ destroy a camera that is currently assigned to a visible view, unless you are assigning a new camera to that view in the same step, and you should _always_ destroy any cameras that you have created through code when no longer required by your game to prevent memory leaks, and you can also destroy the default cameras if you have any assigned in the Room Editor, but you should assign a new camera to the view port (or disable it) otherwise you will get odd results.",
        "return": "Real (unique camera ID value)"
    },
    "ds_priority_delete_value": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to use."
            },
            {
                "label": "val",
                "documentation": "The value to delete from the priority queue."
            }
        ],
        "example": {
            "code": "if ai_move = false<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_priority_delete_value(ai_priority, scr_AI_Move);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_delete_value(id,val);",
        "function": "ds_priority_delete_value",
        "documentation": "This function will simply delete the given value, along with its priority, from the indexed priority queue.",
        "return": "N/A"
    },
    "part_emitter_clear": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system that the emitter is in."
            },
            {
                "label": "ind",
                "documentation": "The index of the emitter to clear."
            }
        ],
        "example": {
            "code": "part_emitter_clear(Sname, p_emit1 );",
            "description": ""
        },
        "signature": "part_emitter_clear(ps, ind);",
        "function": "part_emitter_clear",
        "documentation": "With this function you can clear the given emitter from the specified particle system back to its default state. This will also stop any particles that are being streamed from the emitter at the time, and if you wish to use the emitter again you will need to set the region position and particle type using the [part\\_emitter\\_region](part_emitter_region.html) function.",
        "return": "N/A"
    },
    "shader_reset": {
        "parameters": [],
        "example": {
            "code": "shader_set(shader_Glass);<br> draw_self();<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "shader_reset();",
        "function": "shader_reset",
        "documentation": "This function resets the draw target and should be called when you no longer wish to use the current shader (set using [shader_set](shader_set.html)).",
        "return": "N/A"
    },
    "display_get_width": {
        "parameters": [],
        "example": {
            "code": "mywidth = display_get_width();",
            "description": ""
        },
        "signature": "display_get_width();",
        "function": "display_get_width",
        "documentation": "This function will return the width of the display (in pixels). Note that on the HTML5 target, this value is the width of the _browser window_, rather than the physical display size.",
        "return": "Real"
    },
    "window_mouse_get_x": {
        "parameters": [],
        "example": {
            "code": "wx = window_mouse_get_x();",
            "description": ""
        },
        "signature": "window_mouse_get_x();",
        "function": "window_mouse_get_x",
        "documentation": "",
        "return": "Real"
    },
    "point_in_rectangle": {
        "parameters": [
            {
                "label": "px",
                "documentation": "The x coordinate of the point to check."
            },
            {
                "label": "py",
                "documentation": "The y coordinate of the point to check."
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the left side of the rectangle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top side of the rectangle to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right side of the rectangle to check."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom side of the rectangle to check."
            }
        ],
        "example": {
            "code": "if point_in_rectangle(mouse_x, mouse_y, x -10, y - 10, x + 10, y + 10)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound(snd_click, 0, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "point_in_rectangle(px, py, x1, y1, x2, y2);",
        "function": "point_in_rectangle",
        "documentation": "When using this function, you define a rectangular area and _GameMaker Studio 2_ will work out whether the given point falls within its bounds or not. If the point falls within the defined rectangle the function will return true otherwise the function will return false.",
        "return": "Boolean"
    },
    "physics_joint_revolute_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "w_anchor_x",
                "documentation": "The x coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor_y",
                "documentation": "The y coordinate for the joint, within the game world"
            },
            {
                "label": "ang_min_limit",
                "documentation": "The lower permitted limit for the joint angle"
            },
            {
                "label": "ang_max_limit",
                "documentation": "The upper permitted limit for the joint angle"
            },
            {
                "label": "ang_limit",
                "documentation": "Whether the to limit the angle of the joint (true) or not (false)"
            },
            {
                "label": "max_motor_torque",
                "documentation": "Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)"
            },
            {
                "label": "motor_speed",
                "documentation": "This is the speed at which the motor should rotate"
            },
            {
                "label": "motor",
                "documentation": "Whether the motor should be active (true) or not (false)"
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var mainFixture, o_id;<br> mainFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br> o_id=instance_create_layer(x+25, y, \"Instances\", obj_Door);<br> physics_fixture_bind(mainFixture, id);<br> physics_fixture_bind(mainFixture, o_id);<br> physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 0, 0, 0, 0);<br> physics_fixture_delete(mainFixture);<br>",
            "description": ""
        },
        "signature": "physics_joint_revolute_create(inst1, inst2, w_anchor_x, w_anchor_y, ang_min_limt, ang_max_limit, ang_limit, max_motor_torque, motor_speed, motor, col)",
        "function": "physics_joint_revolute_create",
        "documentation": "A revolute joint forces two bodies to share a common anchor point (often called a hinge point) and the joint has a single degree of freedom - the relative rotation of the two bodies around this point. To specify a revolute you need to provide two instances and a single anchor point in the room, as you can see in the image provided:  \n  \n![](images/revolute_joint_image_1.png)",
        "return": "index of the joint"
    },
    "draw_button": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the button"
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the button"
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the button"
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the button"
            },
            {
                "label": "up",
                "documentation": "Whether the button is up (true) or down (false)"
            }
        ],
        "example": {
            "code": "draw_button(100, 100, 200, 150, !mouse_check_button(mb_left));",
            "description": ""
        },
        "signature": "draw_button(x1, y1, x2, y2, up);",
        "function": "draw_button",
        "documentation": "This function will draw a very simple, rectangular \"button\" using the currently selected draw colour and alpha where the _up_ argument defines how the bevelled edge effect looks, as shown in the image below: ![](images/draw_button.png)",
        "return": "N/A"
    },
    "int64": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The value to convert."
            }
        ],
        "example": {
            "code": "steam_handle = int64(global.fileReadString);",
            "description": ""
        },
        "signature": "int64(val);",
        "function": "int64",
        "documentation": "This function will attempt to convert a given value into a 64bit integer, where the value _must_ be either a real, a string, an int64, an int32, or a ptr. Anything else will cause the game to crash with an error message. You can check to see if a variable holds an int64 using the function [is_int64](../../../3_gml_overview/checking_data_types/is_int64.html).",
        "return": "64bit integer"
    },
    "object_set_solid": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the object to change."
            },
            {
                "label": "solid",
                "documentation": "The new solidity of the object (true=solid, false=not solid)."
            }
        ],
        "example": {
            "code": "if !object_get_solid(obj_Block) object_set_solid(obj_Block, true);",
            "description": ""
        },
        "signature": "object_set_solid( index, solid );",
        "function": "object_set_solid",
        "documentation": "With this function you can flag a specific object as being solid or not (for more information on the \"solid\" flag see [Defining Objects](../../../2_interface/1_editors/objects.html)). This means that all instances of this object that are created _after solid has been changed_ will be created with this new state, while instances that are already in the room may not be affected.  \n  \nPlease note that this is not an instance function! You can set the solid flag of individual instances using the [solid](../instances/instance_variables/solid.html) variable and so have ten instances all flagged as solid even though the object in question has the flag set to false in the IDE, and even if you change the solid flag of the object to true using this function, all instances that currently in the room will remain as they were, and only instances created after calling the function will start with solid flagged as true.",
        "return": "N/A"
    },
    "steam_file_exists": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to check for."
            }
        ],
        "example": {
            "code": "if steam_file_exists(\"Save.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;save_str = steam_file_read(\"Save.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_file_exists(filename);",
        "function": "steam_file_exists",
        "documentation": "With this function you can check to see if a file from the Steam Cloud exists or not, with a return value of true if it exists, or false otherwise.",
        "return": "Boolean"
    },
    "ds_stack_pop": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to pop from."
            }
        ],
        "example": {
            "code": "if !ds_stack_empty(move_stack)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx, yy;<br> &nbsp;&nbsp;&nbsp;xx = ds_stack_pop(move_stack);<br> &nbsp;&nbsp;&nbsp;yy = ds_stack_pop(move_stack);<br> &nbsp;&nbsp;&nbsp;move_towards_point(xx, yy, 4);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_stack_pop(id);",
        "function": "ds_stack_pop",
        "documentation": "This function will _pop_ the top value off of the ds_stack, removing it from the stack and returning the value to be stored in a variable.",
        "return": "Real or String"
    },
    "sha1_string_utf8": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to hash."
            }
        ],
        "example": {
            "code": "var hash, str;<br> str = json_encode(hiscore_map);<br> hash = sha1_string_utf8(str);<br> ini_open(\"local.ini\");<br> ini_write_string(\"info\", \"0\", hash);<br> ini_close();<br> get[0] = http_post_string(\"http://www.MacSweeney Games.com/CatchTheHaggis?game_hiscores=\" + string(global.game_id), str)<br>",
            "description": ""
        },
        "signature": "sha1_string_utf8(string)",
        "function": "sha1_string_utf8",
        "documentation": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States _National Security Agency_ and is employed in several widely used applications and protocols like the popular **Git** where it is used to check for file changes. This function will take an input UTF-8 string (which has a variable number of bytes per character) and returns a 160 bit message digest in ASCII format, for example:",
        "return": "String"
    },
    "physics_joint_rope_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "w_anchor1_x",
                "documentation": "The first x coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor1_y",
                "documentation": "The first y coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor2_x",
                "documentation": "The second x coordinate for the joint, within the game world"
            },
            {
                "label": "w_anchor2_y",
                "documentation": "the second y coordinate for the joint, within the game world"
            },
            {
                "label": "maxlength",
                "documentation": "The maximum length that the joint can \"stretch\""
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var mainFixture, o_id;<br> mainFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br> o_id=instance_create_layer(x+300, y, \"Instances\", obj_Rudder);<br> physics_fixture_bind(mainFixture, id);<br> physics_fixture_bind(mainFixture, o_id);<br> physics_joint_rope_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 300, 0);<br> physics_fixture_delete(mainFixture);<br>",
            "description": ""
        },
        "signature": "physics_joint_rope_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, maxlength, col)",
        "function": "physics_joint_rope_create",
        "documentation": "A rope joint is one which is used to join two instances that you want to keep a constant distance apart, no matter what other forces are acting on it. With a distance joint, you can get \"joint stretching\" where the two fixtures will sperate and behave strangely should too much stress be put on the joint, however the rope joint does not do this and will not stretch any further than the maximum defined length. When you create a rope joint the two instances should already be created and have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance and the maxlength argument sets the maximum length constraint on the joint. The image below shows how this works:  \n  \n![](images/direction_joint_image.png)",
        "return": "Index of the joint"
    },
    "sprite_get_uvs": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to use."
            },
            {
                "label": "subimage",
                "documentation": "The sub-image of the sprite to use."
            }
        ],
        "example": {
            "code": "var tex = sprite_get_uvs(sprite, 0);<br> tex_left = tex[0];<br> tex_top = tex[1];<br> tex_right = tex[2];<br> tex_bottom = tex[3];<br>",
            "description": ""
        },
        "signature": "sprite_get_uvs(sprite, subimage);",
        "function": "sprite_get_uvs",
        "documentation": "This function returns an array with the UV coordinates and other data for the texture of the sprite sub-image on the texture page. The function returns an array with the following 8 elements:",
        "return": ""
    },
    "instance_change": {
        "parameters": [
            {
                "label": "obj",
                "documentation": "The new object the calling object will change into."
            },
            {
                "label": "perf",
                "documentation": "Whether to perform that new object's create and destroy events (true) or not (false)."
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_enter)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_change(obj_Player_Swimming, false);<br> &nbsp;&nbsp;&nbsp;exit;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_change(obj, perf);",
        "function": "instance_change",
        "documentation": "You can use this function to change one instance of an object into another instance of a different object, and while doing so decide whether to perform the initial instances Destroy and Clean Up Events and the new instances Create Event. In this way, you can have (for example) a bomb change into an explosion - in which case the \"perf\" argument would probably be true as you would want the bomb to perform its Destroy Event and Clean Up Event, as well as the explosion to perform its Create Event - or you could have your player character change into a different one - in which case the \"perf\" argument would probably be false as you do not want the instances to perform their Create and Destroy/Clean Up events.",
        "return": "N/A"
    },
    "date_inc_hour": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to."
            },
            {
                "label": "amount",
                "documentation": "The number of hours (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_hour(date_current_datetime(), 24);",
            "description": ""
        },
        "signature": "date_inc_hour(date, amount);",
        "function": "date_inc_hour",
        "documentation": "With this function you can increment a given datetime value by a specific number of hours, and it will return the new datetime value.",
        "return": "Real"
    },
    "darctan2": {
        "parameters": [
            {
                "label": "y",
                "documentation": "The y coordinate to calculate."
            },
            {
                "label": "x",
                "documentation": "The x coordinate to calculate."
            }
        ],
        "example": {
            "code": "val = darctan2(1, 1);",
            "description": ""
        },
        "signature": "darctan2(y, x);",
        "function": "darctan2",
        "documentation": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike darctan(x) the function darctan2(y, x) is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.",
        "return": "Real"
    },
    "push_local_notification": {
        "parameters": [
            {
                "label": "fire_time",
                "documentation": "The date/time to fire the off the notification"
            },
            {
                "label": "title",
                "documentation": "The notification title (a string)"
            },
            {
                "label": "message",
                "documentation": "The notification message text (a string)"
            },
            {
                "label": "data",
                "documentation": "The data package to send to your game (a string)"
            }
        ],
        "signature": "push_local_notification(fire_time, title, message, data);",
        "function": "push_local_notification",
        "documentation": "This function can be used to set a local notification to be shown on a given date at a given time. The \"fire_time\" is the date/time that the notification should be pushed to the user device (you can use the _GameMaker Studio 2_ [Date and Time Functions](../maths/date%20and%20time/index.html) to get this), and you can give the notification a title and a message text as well as a payload string which will be passed to your game when the users taps the notification.",
        "return": "N/A"
    },
    "draw_light_define_point": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index number of the light (arbitrary)"
            },
            {
                "label": "x",
                "documentation": "The x position of the light"
            },
            {
                "label": "y",
                "documentation": "The y position of the light"
            },
            {
                "label": "z",
                "documentation": "The z position of the light"
            },
            {
                "label": "range",
                "documentation": "The light range (in pixels)"
            },
            {
                "label": "col",
                "documentation": "The colour to use for the light (either a constant, a real or a hex value)."
            }
        ],
        "example": {
            "code": "draw_set_lighting(true);<br> draw_light_define_point(1, 200, 123, 50, 2000, c_white);<br> draw_light_enable(1, true);<br>",
            "description": ""
        },
        "signature": "draw_light_define_point(ind, x, y, z, range, col)",
        "function": "draw_light_define_point",
        "documentation": "This function is for defining a positional light, where you can define the x, y and z position of the light, the light range and its colour (which will also affect the perceived intensity of the light as certain colours appear \"darker\" than others). You must also give the light an index number which what will be used in other functions to reference it.",
        "return": "N/A"
    },
    "iap_status": {
        "parameters": [
            {
                "label": "iap_status_uninitialised",
                "documentation": "in app purchases have not been activated for your game."
            },
            {
                "label": "iap_status_unavailable",
                "documentation": "There is no connection available to the target store."
            },
            {
                "label": "iap_status_loading",
                "documentation": "A connection to the target store exits and is being activated."
            },
            {
                "label": "iap_status_available",
                "documentation": "Purchases have been activated and the target store is available."
            },
            {
                "label": "iap_status_processing",
                "documentation": "There is currently communication between the game and the target store, like when (for example) making a purchase or when restoring a purchase, etc..."
            },
            {
                "label": "iap_status_restoring",
                "documentation": "On the iOS target, this can be returned while your game is attempting to restore purchases."
            }
        ],
        "example": {
            "code": "status = iap_status();",
            "description": ""
        },
        "signature": "iap_status();",
        "function": "iap_status",
        "documentation": "This function allows you to track the status of the _GameMaker Studio 2_ in app purchasing system and returns one of the following constants:",
        "return": "Constant"
    },
    "log2": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The input value."
            }
        ],
        "signature": "log2(n);",
        "function": "log2",
        "documentation": "This function basically asks \"how many 2's do you need to multiply to get n?\". A common example of use in programming would be to calculate the number of bits that are needed to represent a number. To do this we calculate the log2(x) of the number, round it down and add 1 - for example log2(100) returns 6.643856, which rounded down is 6, to which we add one and it gives us 7. So we need 7 bits to represent 100. It can also be used for describing exponential growth or decay, and is often called a _binary logarithm_.",
        "return": "Real"
    },
    "steam_set_achievement": {
        "parameters": [
            {
                "label": "ach_name",
                "documentation": "The name of the achievement to set (string)."
            }
        ],
        "example": {
            "code": "if hp &lt;= 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Deaths += 1;<br> &nbsp;&nbsp;&nbsp;if global.Deaths == 10<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if !steam_get_achievement(\"ach_Player_Dies_Ten_Times\") steam_set_achievement(\"ach_Player_Dies_Ten_Times\");<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_set_achievement(ach_name);",
        "function": "steam_set_achievement",
        "documentation": "With this function you can tell the Steam API to award (\"set\") an achievement for the player. These achievements should have been defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel. The Steam Game Overlay will display a notification panel to the user informing them of the achievement that they have received, unless the achievement has already been awarded, in which case nothing will happen.",
        "return": "N/A"
    },
    "view_get_xport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "if view_get_xport(0) != (display_get_width() / 2) - (view_wport[0] / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_xport(0, (display_get_width() / 2) - (view_wport[0] / 2));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_get_xport(view_port)",
        "function": "view_get_xport",
        "documentation": "This function can be used to retrieve the x position of the given view port.",
        "return": "Real"
    },
    "gpu_set_zwriteenable": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "The comparison mode to use (see list above)"
            }
        ],
        "example": {
            "code": "gpu_set_zwriteenable(false);<br> with (obj_Menu_Containers)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_self();<br> &nbsp;&nbsp;&nbsp;}<br> gpu_set_zwriteenable(true);<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_zwriteenable(enable);",
        "function": "gpu_set_zwriteenable",
        "documentation": "This function can be used to toggle on (true) and off (false) depth ordering using the z-buffer. When an instance is rendered in _GameMaker Studio 2_ , the depth of a generated pixel (its z coordinate) is stored in the z-buffer, then, if another instance of the scene must be rendered at the same pixel, the two depths are compared (z-testing - see [gpu\\_set\\_ztestenable](gpu_set_ztestenable.html)) and the one \"closer\" to the observer is then saved to the z-buffer, replacing the old one. However, this is not always what you wish to happen and there are moments when you may want something to be drawn over everything else, no matter what its z value is. In those cases you can use this function to switch off writing to the z-buffer and so force whatever is being drawn to be drawn over everything else. Note that the description given here is for the _default_ z-testing comparison mode, but that can be changed",
        "return": "N/A"
    },
    "bbox_left": {
        "parameters": [],
        "example": {
            "code": "if bbox_left &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = sprite_xoffset;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "bbox_left;",
        "function": "bbox_left;",
        "documentation": "",
        "return": "Real"
    },
    "date_datetime_string": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to use."
            }
        ],
        "example": {
            "code": "str = date_datetime_string(date_current_datetime());",
            "description": ""
        },
        "signature": "date_datetime_string(date);",
        "function": "date_datetime_string",
        "documentation": "With this function you can create a string containing the given datetime, formatted for the system or device that is running the game when the function is called.",
        "return": "String"
    },
    "physics_particle_set_group_flags": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to set."
            },
            {
                "label": "flags",
                "documentation": "The flags to set on the particle."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_group_flag_solid | phy_particle_group_flag_rigid;<br> physics_particle_set_group_flags(group, flags);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_group_flags(group, flags)",
        "function": "physics_particle_set_group_flags",
        "documentation": "With this function you can change the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), while the flags are the return value of a combination of the following **constants**:",
        "return": "N/A"
    },
    "layer_get_x": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the x position of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_x(lay_id) != 0 || layer_get_x(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_x(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_y(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_x(layer_id)",
        "function": "layer_get_x",
        "documentation": "You can use this function to retrieve the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.",
        "return": "Real"
    },
    "audio_sound_set_track_position": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to change."
            },
            {
                "label": "time",
                "documentation": "The time (in seconds) to set the start point to."
            }
        ],
        "example": {
            "code": "var snd = audio_play_sound(snd_MainTrack, 0, false);<br> audio_sound_set_track_position(snd, 32);<br>",
            "description": ""
        },
        "signature": "audio_sound_set_track_position(index, time);",
        "function": "audio_sound_set_track_position",
        "documentation": "This function will set the position (in seconds) within the sound file for the sound to play from. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset. If it is a unique sound ID that you use, then the position will change immediately to the new time given, and if it is a resource tree asset then all further plays of the given sound will start at the new time. The function will ignore any value given that is longer than the length of the sound given for the \"index\" value.",
        "return": "N/A"
    },
    "ds_map_find_first": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            }
        ],
        "example": {
            "code": "var size = ds_map_size(inventory) ;<br> var key = ds_map_find_first(inventory);<br> for (var i = 0; i &lt; size; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if key != \"gold\"<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key = ds_map_find_next(inventory, key);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_find_first(id);",
        "function": "ds_map_find_first",
        "documentation": "This function returns the first key stored in the ds_map. **This is not the first key in the order you added them!** Ds\\_maps are not stored in a linear form, for that use ds\\_lists, so all this does is find the first key as stored by the computer. This can be useful if your have to iterate through the ds_map looking for something, but should be avoided if possible as it can be slow.",
        "return": "Real or String"
    },
    "ds_map_secure_load": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to lead the map data from."
            }
        ],
        "example": {
            "code": "p_map = ds_map_secure_load(\"p_data.dat\");",
            "description": ""
        },
        "signature": "ds_map_secure_load(filename);",
        "function": "ds_map_secure_load",
        "documentation": "This function will load a previously saved ds_map from the given file. This file must have been previously created using the [ds\\_map\\_secure_save()](ds_map_secure_save.html) function, and, when loaded, the function will return the _index_ of the ds\\_map that has been created from the loaded data. This ds\\_map index should be stored in a variable and used for all further function calls to this map.",
        "return": "Ds_map Index"
    },
    "font_get_size": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to get the size of."
            }
        ],
        "example": {
            "code": "sz = font_get_size(font0);",
            "description": ""
        },
        "signature": "font_get_size(ind);",
        "function": "font_get_size",
        "documentation": "With this function you can get the size of any font resource, which is the point value shown by the font resource dialogue.",
        "return": "Real"
    },
    "median": {
        "parameters": [
            {
                "label": "val0 ... max_val",
                "documentation": "The values to compare."
            }
        ],
        "example": {
            "code": "x = median( 0, x, room_width );<br> y = median( 0, y, room_height );",
            "description": ""
        },
        "signature": "median(val1, val2, ... max_val);",
        "function": "median",
        "documentation": "This function returns the median of the input values, that is, the middle value. When the number of arguments is even, the smaller of the two middle values is returned and the function can have as many arguments as required (note that more arguments will mean that the function will be slower to parse) which must all be real values. This means that, for example, median(43, 12, 25, 19, 6) would return 19 as it is the middle value between all the rest.",
        "return": "Real"
    },
    "sqrt": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The number to get the square root of."
            }
        ],
        "example": {
            "code": "num = sqrt(exp);",
            "description": ""
        },
        "signature": "sqrt(val);",
        "function": "sqrt",
        "documentation": "If you multiply a number with itself, you get the square of that number, but sometimes you want to do the reverse and get the square root of a number. So to find what number has been multiplied with itself to get any given _positive_ value we use this function. For example: sqrt(9) will return 3 since 3*3=9.",
        "return": "Real"
    },
    "parameter_string": {
        "parameters": [],
        "example": {
            "code": "var p_num;<br> p_num = parameter_count();<br> if p_num &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var i;<br> &nbsp;&nbsp;&nbsp;for (i = 0; i &lt; p_num; i += 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_string[i] = parameter_string(i + 1);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "parameter_string(n);",
        "function": "parameter_string",
        "documentation": "Command-line parameters are those extra commands that you can add to an exe to change how the program is run and with this function you can get the chosen command-line parameter as a string. You can find the number of parameters for the current game using the function [parameter_count](parameter_count.html), where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.",
        "return": "String"
    },
    "move_bounce_solid": {
        "parameters": [
            {
                "label": "adv",
                "documentation": "Whether to enable advanced bouncing (true) or not (false)."
            }
        ],
        "example": {
            "code": "move_bounce_solid(false);<br>",
            "description": ""
        },
        "signature": "move_bounce_solid(adv);",
        "function": "move_bounce_solid",
        "documentation": "With this function you can command an instance to bounce off only those instances marked as **solid** within the room. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too.",
        "return": "N/A"
    },
    "layer_depth": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to set the depth of (or the layer name as a string)"
            },
            {
                "label": "depth",
                "documentation": "The new depth for the layer"
            }
        ],
        "example": {
            "code": "if layer_get_depth(layer) != -100<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_depth(layer, -100);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_depth(layer_id, depth)",
        "function": "layer_depth",
        "documentation": "This function can be used to change the **depth** of the given layer, changing the order in which its contents will be rendered to the screen. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and then give the new depth to set it to (an integer value form -16000 to 16000). The layer depth is defined as being higher when \"further away\" from the camera and lower when \"closer\" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the \"top\" layer (ie, the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.",
        "return": "N/A"
    },
    "tilemap_get_cell_x_at_pixel": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the cell x position of"
            },
            {
                "label": "x",
                "documentation": "The x position within the room to use for getting the cell"
            },
            {
                "label": "y",
                "documentation": "The y position within the room to use for getting the cell"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var _x = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var _y = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> tiledata = tilemap_get(map_id, _x, _y);<br>",
            "description": ""
        },
        "signature": "tilemap_get_cell_x_at_pixel(tilemap_element_id, x, y);",
        "function": "tilemap_get_cell_x_at_pixel",
        "documentation": "",
        "return": "Integer (x-axis cell position or -1 if there is an error)"
    },
    "sprite_flush_multi": {
        "parameters": [
            {
                "label": "array",
                "documentation": "Array with the sprite indices to flush"
            }
        ],
        "example": {
            "code": "spr_a[0] = spr_Player_Aura1;<br> spr_a[1] = spr_Player_Aura2;<br> spr_a[2] = spr_Player_Aura3;<br> spr_a[3] = spr_Player_Aura4;<br> sprite_flush_multi(spr_a);<br>",
            "description": ""
        },
        "signature": "sprite_flush_multi(array);",
        "function": "sprite_flush_multi",
        "documentation": "With this function you can remove the any number of texture pages for the given sprites from texture memory. You supply the sprite indices as an array and the texture pages they are assigned to will be removed from texture memory. Note that if one of the texture pages is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded back into memory again, so care should be taken when using this function.",
        "return": "N/A"
    },
    "steam_ugc_query_set_return_long_description": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "long_description",
                "documentation": "Whether to have the query return the long description text."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": " steam_ugc_query_set_return_long_description(ugc_query_handle , long_description);",
        "function": " steam_ugc_query_set_return_long_description",
        "documentation": "This function can be used to further filter any given UGC query, specifically to retrieve the long description text in the call back event triggered when the query was sent. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is either true or false. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "push_cancel_local_notification": {
        "parameters": [
            {
                "label": "ID",
                "documentation": "The ID of the notification to cancel."
            }
        ],
        "signature": "push_cancel_local_notification(ID);",
        "function": "push_cancel_local_notification",
        "documentation": "This function cancel the given push notification. You can get the ID for the notification to cancel using the functions [push\\_get\\_first\\_local\\_notification()](push_get_first_local_notification.html) and [push\\_get\\_next\\_local\\_notification()](push_get_next_local_notification.html) and the function will return true on success or false otherwise (for example if the notification does not exist or has already been triggered).",
        "return": "Real"
    },
    "audio_group_unload": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index of the audio group to unload (as defined in the Audio Groups Window)"
            }
        ],
        "example": {
            "code": "if audio_group_is_loaded(audiogroup_level1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_group_unload(audiogroup_level1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_group_unload(groupID);",
        "function": "audio_group_unload",
        "documentation": "This function will unload all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return true if unloading is initiated and false if the group ID is invalid, or it has already been flagged for unloading. Note that any audio currently being played when this function is called will be stopped.",
        "return": "Boolean"
    },
    "camera_get_default": {
        "parameters": [],
        "example": {
            "code": "var def = camera_get_default();<br> view_camera[0] = def;<br>",
            "description": ""
        },
        "signature": "camera_get_default()",
        "function": "camera_get_default",
        "documentation": "This function can be used to retrieve the unique camera ID value of the default camera (the camera that _GameMaker Studio 2_ uses when no camera views or ports are active in a game room).",
        "return": "Camera index (real)."
    },
    "date_day_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "diff = date_day_span(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());",
            "description": ""
        },
        "signature": "date_day_span(date1, date2);",
        "function": "date_day_span",
        "documentation": "With this function you can get the number of days between two dates. This value is always positive, and incomplete days will be returned as a fraction.",
        "return": "Real"
    },
    "string_insert": {
        "parameters": [
            {
                "label": "substr",
                "documentation": "The substring to be inserted."
            },
            {
                "label": "str",
                "documentation": "The string to be copied."
            },
            {
                "label": "index",
                "documentation": "The position in characters of the string to insert the substring."
            }
        ],
        "example": {
            "code": "str2 = string_insert(username, \"Hello, , how are you?\", 8);",
            "description": ""
        },
        "signature": "string_insert(substr, str, index);",
        "function": "string_insert",
        "documentation": "With this function you can create a new string made up of two strings, where one has been inserted into the other at a given position. It can be useful, for example, to add a user name into a predefined text and so make the player of your game feel more involved in the action.",
        "return": "String"
    },
    "ds_grid_get_sum": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The left cell column of the region."
            },
            {
                "label": "y1",
                "documentation": "The top cell row of the region."
            },
            {
                "label": "x2",
                "documentation": "The right cell column of the region."
            },
            {
                "label": "y2",
                "documentation": "The bottom cell row of the region."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_sum(grid, 0, 0, 5, 5)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_sum(index, x1, y1, x2, y2);",
        "function": "ds_grid_get_sum",
        "documentation": "This function can be used to add all the values all the cells found within the defined region of a grid together, as shown in the image below: ![](ds_grid_get_sum.png)",
        "return": "Real"
    },
    "ds_map_exists": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            },
            {
                "label": "key",
                "documentation": "The key to check for."
            }
        ],
        "example": {
            "code": "if !ds_map_exists(inventory, \"potions\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_map_add(inventory, \"potions\", 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_exists(id, key);",
        "function": "ds_map_exists",
        "documentation": "This function will return true if the specified key exists in the (previously created) ds_map, and false if it does not.",
        "return": "boolean"
    },
    "draw_sprite_ext": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the sprite. 0=right way up, 90=rotated 90 degrees counter-clockwise etc..."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite. c_white is to display it normally."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);",
            "description": ""
        },
        "signature": "draw_sprite_ext( sprite, subimg, x, y, xscale, yscale, rot, colour, alpha );",
        "function": "draw_sprite_ext",
        "documentation": "This function will draw the given sprite as in the function [draw_sprite](draw_sprite.html) but with additional options to change the scale, blending, rotation and alpha of the sprite being drawn. Changing these values does _not_ modify the resource in any way (only how it is drawn), and you can use any of the available [sprite variables](../../instances/instance_variables/index.html) instead of direct values for all the arguments in the function. The image below illustrates how different values affect the drawing of the sprite: ![](images/spr_ext.png)",
        "return": "N/A"
    },
    "timeline_speed": {
        "parameters": [],
        "example": {
            "code": "if !timeline_running<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_running = true;<br> &nbsp;&nbsp;&nbsp;timeline_speed = 0.5;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_speed;",
        "function": "timeline_speed;",
        "documentation": "Normally, in each step the position in the time line is increased by 1, however you can change this amount by setting this variable to a different value. You can use real numbers (like 0.5, or 2.4 for example) and if the value is larger than one, several moments can happen within the same time step (they will all be performed in the same order as defined for the time line, so no actions will be skipped).",
        "return": "Real"
    },
    "collision_circle": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the center of the circle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the center of the circle to check."
            },
            {
                "label": "rad",
                "documentation": "The radius (distance in pixels from its center to its edge)."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instance collisions."
            },
            {
                "label": "prec",
                "documentation": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
            },
            {
                "label": "notme",
                "documentation": "Whether the calling instance, if relevant, should be excluded (true) or not (false)."
            }
        ],
        "example": {
            "code": "if collision_circle(x, y, 20, obj_Cursor, false, true)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_index = 1;<br> &nbsp;&nbsp;&nbsp;}<br> else image_index = 0;",
            "description": ""
        },
        "signature": "collision_circle( x1, y1, rad, obj, prec, notme );",
        "function": "collision_circle",
        "documentation": "Collision circle creates a circular zone of the radius given by the user around the points x1,y1 and then checks that zone for a collision with **any** instance of the object specified by the argument \"obj\". This check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for _must_ also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:  \n  \n![](images/collision_circle_illustration.png)",
        "return": "Instance id or <b>noone</b>"
    },
    "network_resolve": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The URL to get the IP of (a string)."
            }
        ],
        "example": {
            "code": "game_ip = network_resolve(\"www.macsweeneygames.com\");<br>",
            "description": ""
        },
        "signature": "network_resolve(url);",
        "function": "network_resolve",
        "documentation": "This function will return the IP address of the given URL.",
        "return": "String"
    },
    "phy_com_x": {
        "parameters": [],
        "example": {
            "code": "xx = phy_com_x;<br> yy = phy_com_y;<br>",
            "description": ""
        },
        "signature": "phy_com_x;",
        "function": "phy_com_x;",
        "documentation": "This **read-only** variable will return the x position of the instances center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions.",
        "return": "Real"
    },
    "phy_rotation": {
        "parameters": [],
        "example": {
            "code": "if phy_speed_x &gt; 0 || phy_speed_y &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_rotation += sqrt(sqr(phy_speed_x) + sqr(phy_speed_y)) /10;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_rotation;",
        "function": "phy_rotation;",
        "documentation": "This variable can be used to get (or to set) the angle of the instances fixture in degrees, similar to setting or getting the [image_angle](../../instances/instance_variables/image_angle.html). However note that in the physics world rotations are calculated in the _opposite_ way to the normal GameMaker Studio 2 game world, meaning that vector functions like [point_direction](../../maths/vector%20functions/point_direction.html) should have there return values modified (simply making positive to negative should resolve this).",
        "return": "Real"
    },
    "tilemap_y": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to change"
            },
            {
                "label": "x",
                "documentation": "The y position for the tilemap"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> tilemap_y(map_id, irandom(room_height));<br>",
            "description": ""
        },
        "signature": "tilemap_y(tilemap_element_id, y);",
        "function": "tilemap_y",
        "documentation": "",
        "return": "N/A"
    },
    "shader_enable_corner_id": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable (true) or disable (false) this function."
            }
        ],
        "example": {
            "code": "shader_enable_corner_id(true);",
            "description": ""
        },
        "signature": "shader_enable_corner_id(enable);",
        "function": "shader_enable_corner_id",
        "documentation": "With this function you can set a global state for all shaders being used where, when enabled, the shader \"steals\" 2 bits from the input colour values. The first is from the lower bit of the red colour value, and the second is from the lower bit of the blue colour value. These values can get then be recovered in the shader to work out which vertex your dealing with (ie: which corner).",
        "return": "N/A"
    },
    "steam_upload_score": {
        "parameters": [
            {
                "label": "lb_name",
                "documentation": "The name of the leaderboard that you are uploading the scores to (a string)."
            },
            {
                "label": "score",
                "documentation": "The score to upload (a real number)."
            }
        ],
        "signature": "steam_upload_score(lb_name, score);",
        "function": "steam_upload_score",
        "documentation": "This function will send a score to the given leaderboard. The score to be uploaded is a real number, and the leaderboard name is a string that was defined when you created the leaderboard using the function [steam\\_create\\_leaderboard](steam_create_leaderboard.html). If the function fails, it will return a value of -1, while a successful post will return a unique ID for the upload and trigger an asynchronous [Steam Event](../../../2_interface/1_editors/events/async_events.html). This event will create a ds_map in the built in variable async_load with the following key/value pairs:",
        "return": "Real"
    },
    "http_get_file": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The web address of the server that you wish to get file from"
            },
            {
                "label": "local_target",
                "documentation": "The local storage area target directory to store the file in"
            }
        ],
        "signature": "http_get_file(url, local_target);",
        "function": "http_get_file",
        "documentation": "With this function, you can connect to the specified URL in order to retrieve information in the form of a file. As this is an asynchronous function, _GameMaker Studio 2_ will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an **Async Event** in any instance that has one defined in their object properties.",
        "return": "Real"
    },
    "ds_set_precision": {
        "parameters": [
            {
                "label": "prec",
                "documentation": "The precision value (default 0.0000001)"
            }
        ],
        "example": {
            "code": "ds_set_precision(0.0001);",
            "description": ""
        },
        "signature": "ds_set_precision(prec);",
        "function": "ds_set_precision",
        "documentation": "When comparing values, for example when searching in a map or sorting a list, _GameMaker Studio 2_ must decide when two values are equal. For strings and integer values this is clear but for real numbers, due to floating point round-off errors, seemingly equal numbers can easily become unequal. For example, it's possible that **(5 / 3) * 3** will _not_ be equal to 5! To help avoid this, a precision value is used on all real number functions, and when the _difference between two numbers is smaller_ than this precision they are considered equal. The default a precision of 0.0000001 is used for all data structure functions unless changed by this function.  \n  \n_**NOTE:** This precision is used in all data structures but not in other comparisons in GML!_",
        "return": "N/A"
    },
    "ds_priority_find_min": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to use."
            }
        ],
        "example": {
            "code": "if ai_move<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;script_execute(ds_priority_find_min(ai_priority);<br>  &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_find_min(id);",
        "function": "ds_priority_find_min",
        "documentation": "With this function you can find the value stored in the priority queue with the lowest priority, and if more than one value has the same priority, the one that was added to the priority queue first will be the one to get returned. However, unlike [ds\\_priority\\_delete_min](ds_priority_delete_min.html), this function will not remove the value from the queue.",
        "return": "Real or String"
    },
    "draw_vertex": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the vertex."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the vertex."
            }
        ],
        "example": {
            "code": "draw_primitive_begin(pr_trianglelist);<br> draw_vertex(100, 100);<br> draw_vertex(100, 200);<br> draw_vertex(150, 150);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_vertex(x, y)",
        "function": "draw_vertex",
        "documentation": "This function defines the position of a vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it. See [draw\\_primitive\\_begin](draw_primitive_begin.html) for more information. To end and draw the primitive you must call [draw\\_primitive\\_end](draw_primitive_end.html).",
        "return": "N/A"
    },
    "path_insert_point": {
        "parameters": [],
        "example": {
            "code": "path_insert_point(mypath, 0, 50, 50, 100);",
            "description": ""
        },
        "signature": "path_insert_point(index, n, x, y, speed);",
        "function": "path_insert_point",
        "documentation": "With this function you can insert a new point into a path (the path can have been created in the path editor or through code using [path_add](path_add.html)). The point will be added into the path before the point \"n\" that is specified in the function.",
        "return": "N/A"
    },
    "real": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to be converted to a real value."
            }
        ],
        "example": {
            "code": "var t_str;<br> t_str = string_digits(input_str);<br> age = real(t_str);<br>",
            "description": ""
        },
        "signature": "real(string);",
        "function": "real",
        "documentation": "This function can be used to turn a given string into a real number. When using this function, numbers, minus signs, decimal points and exponential parts in the string are taken into account, while other characters (such as letters) will cause an error to be thrown. If you know, or suspect, that a string may have other characters then you can use [string_digits()](string_digits.html) to remove all non-numeric characters, before using this function to turn the resulting string into a real number.",
        "return": "Real"
    },
    "timeline_get_name": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the time line to check the name of."
            }
        ],
        "example": {
            "code": "str = timeline_get_name(global.tl);",
            "description": ""
        },
        "signature": "timeline_get_name( ind );",
        "function": "timeline_get_name",
        "documentation": "This function can be used to get the name of a time line as a string. if the time line has been created dynamically using the [timeline_add](timeline_add.html) function, the name returned will have the format \"__newtimeline_N_\" where \"_N_\" is the number of the time line (starting from 0). Please note that this is _only_ a string and cannot be used to reference the timeline directly - for that you would need the _timeline index_. You can, however, use this string to get the _timeline index_ using the returned string along with the function [asset\\_get\\_index()](../asset_get_index.html).",
        "return": "String"
    },
    "http_request": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The web address of the server that you wish to get information from"
            },
            {
                "label": "method",
                "documentation": "The request method (normally \"POST\" or \"GET\", but all methods are supported)"
            },
            {
                "label": "header_map",
                "documentation": "A ds_map with the required header fields"
            },
            {
                "label": "body",
                "documentation": "The data to be transmitted following the headers (can be a binary buffer handle)"
            }
        ],
        "example": {
            "code": "var map = ds_map_create();<br> ds_map_add(map, \"Host\", \"225.0.0.97:3000\");<br> ds_map_add(map, \"Connection\", \"keep-alive\");<br> ds_map_add(map, \"Content-Length\", \"169\");<br> ds_map_add(map, \"Cache-Control\", \"max-age=0\");<br> ds_map_add(map, \"Authorization\", \"Basic eW95b19hZG1pbjpjNG5lZmllbGQ=\");<br> ds_map_add(map, \"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\");<br>  ds_map_add(map, \"User-Agent\", \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36\");<br> ds_map_add(map, \"Content-Type\", \"application/x-www-form-urlencoded\");<br> ds_map_add(map, \"Accept-Encoding\", \"gzip,deflate,sdch\");<br> ds_map_add(map, \"Accept-Language\", \"en-GB,en-US;q=0.8,en;q=0.6\");<br> ds_map_add(map, \"Cookie\", \"request_method=GET; _InAppPurchases_session=69bb6ef6eec2b\");<br> var data=\"utf8=%E2%9C%93&amp;authenticity_token=kPmS14DcYcuKgMFZUsN3XFfj3mhs%3D&amp;product%5Bname%5D=CatchTheHaggis&amp;product%5Bproduct_id%5D=http_test&amp;commit=Create+Product\";<br>  request = http_request(\"http:225.0.0.97:3000/products\", \"POST\", map, data);<br>",
            "description": ""
        },
        "signature": "http_request(url, method, header_map, body);",
        "function": "http_request",
        "documentation": "With this function, you can create an HTTP header request to define the operating parameters of an HTTP transaction, which can be used for many things like (for example) authentication via HTTP headers if you use RESTful APIs. The function requires the full IP address of the server to request from as well as the type of request to make (as a string, see the note below): \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"TRACE\", \"OPTIONS\", or \"CONNECT\". You will also need to supply a [ds_map](../data_structures/ds%20maps/index.html) of key/value pairs (as strings, where the key is the header field and the value is the required data for the header), and the final argument is an optional data string that you can add to the request, and if it's not needed then it can be either 0 or an empty string \"\". Note that you can also send a buffer (see the section on [Buffers](../buffers/index.html) for more details), in which case the last argument would be the \"handle\" of the buffer to send.",
        "return": "Real"
    },
    "bbox_right": {
        "parameters": [],
        "example": {
            "code": "if bbox_right &gt; room_width<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = room_width - sprite_xoffset;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "bbox_right;",
        "function": "bbox_right;",
        "documentation": "",
        "return": "Real"
    },
    "matrix_stack_top": {
        "parameters": [],
        "example": {
            "code": "var m1 = matrix_build(66, 145, 0, 0, 0, 0, 1, 1, 1);<br> var m2 = matrix_build(0, 0, 0, 0, 0, image_angle * 6, 1, 1, 1) ;<br> matrix_stack_push(m1);<br> matrix_stack_push(m2);<br> matrix_set(matrix_world, matrix_stack_top());<br> draw_sprite(tyre, 0, 0, 0);<br> matrix_stack_pop();<br> matrix_stack_pop();<br>",
            "description": ""
        },
        "signature": "matrix_stack_top();",
        "function": "matrix_stack_top",
        "documentation": "This function returns the current top matrix of the stack, but does _not_ remove it (for that use [matrix\\_stack\\_pop](matrix_stack_pop.html)).",
        "return": "Matrix index"
    },
    "sprite_replace": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to permanently replace."
            },
            {
                "label": "fname",
                "documentation": "The filename of the image to make the new sprite."
            },
            {
                "label": "imgnumb",
                "documentation": "The number of frames the sprite will be cut up into horizontally. 1 = one single image / *.gif."
            },
            {
                "label": "removeback",
                "documentation": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
            },
            {
                "label": "smooth",
                "documentation": "Indicates whether to smooth the edges."
            },
            {
                "label": "xorig",
                "documentation": "The x coordinate of the origin, relative to the sprite's top left corner."
            },
            {
                "label": "yorig",
                "documentation": "The y coordinate of the origin, relative to the sprite's top left corner."
            }
        ],
        "example": {
            "code": "sprite_replace(spr_banner, \"gravemaker.png\", 1, false, false, 0, 0);",
            "description": ""
        },
        "signature": "sprite_replace(ind, fname, imgnumb, removeback, smooth, xorig, yorig);",
        "function": "sprite_replace",
        "documentation": "This function works in almost the exact same manner as [sprite_add](sprite_add.html), only instead of returning the index of the sprite you are importing, it overwrites a previously created sprite index. When using this function you should use a sprite index that has been created and stored in a variable using other functions like [sprite_add](sprite_add.html) or [sprite\\_create\\_from_surface](sprite_create_from_surface.html), or even [sprite_duplicate](sprite_duplicate.html), rather than a resource tree sprite asset. You _can_ replace a sprite from the game assets using this function, but doing so means that you will lose the reference ID for the sprite that you are replacing, regardless of whether you call game_restart() or not, and so is not recommended. Regardless of the sprite being replaced, this function will **create a new texture page for the sprite** and so care should be taken when using it as it may adversely affect performance by increasing the number of required texture swaps for rendering.",
        "return": ""
    },
    "steam_ugc_query_set_search_text": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "search_text",
                "documentation": "The search text to use (a string) for the query."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);<br> steam_ugc_query_set_search_text(query_handle, \"texture\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": "steam_ugc_query_set_search_text(ugc_query_handle , search_text);",
        "function": "steam_ugc_query_set_search_text",
        "documentation": "This function can be used to further filter any given UGC query, specifically to search for the given string in the title and description of the UGC items. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is a string you want to use as the search term. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "gpu_set_cullmode": {
        "parameters": [
            {
                "label": "cullmode",
                "documentation": "The cull mode to use (see list above)"
            }
        ],
        "example": {
            "code": "if gpu_get_cullmode() != cull_clockwise<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_cullmode(cull_clockwise);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_set_cullmode(cullmode);",
        "function": "gpu_set_cullmode",
        "documentation": "This function can be used to set the backface culling mode. A polygon (primitive) has a _front_ and a _back_ side. The front side is said to be the side where the vertices are defined in **counter-clockwise** order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.",
        "return": "N/A"
    },
    "part_type_orientation": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "ang_min",
                "documentation": "The minimum starting angle of the particles."
            },
            {
                "label": "ang_max",
                "documentation": "The maximum starting angle of the particles."
            },
            {
                "label": "ang_incr",
                "documentation": "The increase (or decrease if set negative) of the angle in degrees per step."
            },
            {
                "label": "ang_wiggle",
                "documentation": "The amount the angle wiggles clockwise/counterclockwise per step."
            },
            {
                "label": "ang_relative",
                "documentation": "Whether to set its angle relative to the direction of the particle's motion (true) or not (false)."
            }
        ],
        "example": {
            "code": "part_type_shape(particle2, pt_shape_spark);<br> part_type_size(particle2, 0.10, 0.50, 0.01, 0);<br> part_type_scale(particle2, 0.30, 0.30);<br> part_type_colour1(particle2, 8454143);<br> part_type_alpha1(particle2, 0.50);<br> part_type_speed(particle2, 4, 4, -0.07, 1);<br> part_type_direction(particle2, 0, 359, 0, 20);<br> part_type_orientation(particle2, 0, 359, 0, 20, 1);<br> part_type_blend(particle2, 1);<br> part_type_life(particle2, 1, 5);<br>",
            "description": ""
        },
        "signature": "part_type_orientation( ind, ang_min, ang_max, ang_incr, ang_wiggle, ang_relative );",
        "function": "part_type_orientation",
        "documentation": "This function is used to determine the orientation of the particle sprite when it is created and can also be used to make the particle orientation increase or decrease over its lifetime. The minimum and maximum orientation values default at 0 but these values can be changed to randomise the orientation following the standard _GameMaker Studio 2_ directions of 0 degrees being right, 90 degrees being up, 180 degrees being left and 270 degrees being down. If you set them to the same value the particles will all be created with the same orientation.  \n  \nYou can also set an increment value which will add (if a positive number) or subtract (if a negative number) an amount of degrees to the orientation over its lifetime. This value can be a minimum of (+/-) 0.01.  \n  \nYou can set the \"wiggle\" factor too, the same as other particle functions. This is a value that will be added or subtracted randomly to the orientation each step of the particles lifetime. Obviously larger values are more pronounced than smaller ones, and this value can even be a negative with the maximum range being between -20 and 20.  \n  \nFinally, you can choose to have the orientation relative or not, which means that while the particle has a direction (and speed) the particle sprite will be orientated around that vector. Bear in mind that if you have the particle speed set to reduce and it reaches 0, the lack of speed sets the direction to the default value of 0° and so a relative orientation will cause the particle sprite to \"jump\" to a different angle.",
        "return": "N/A"
    },
    "vertex_create_buffer_from_buffer": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to create the vertex buffer from."
            },
            {
                "label": "format",
                "documentation": "The primitive vertex format to use."
            }
        ],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_position_3d();<br> vertex_format_add_colour();<br> vertex_format_add_textcoord();<br> var my_format = vertex_format_end();<br> v_buff = vertex_create_buffer_from_buffer(global.modelBuff, myFormat);",
            "description": ""
        },
        "signature": "vertex_create_buffer_from_buffer(buffer, format);",
        "function": "vertex_create_buffer_from_buffer",
        "documentation": "As with the function [vertex\\_create\\_buffer](vertex_create_buffer.html), this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer created is a special _grow_ buffer which is pre-formatted with the vertex format for building primitives for use with (for example) shaders. This function requires that you supply the pointer to a previously created regular buffer, and a vertex format that should be applied to the copied data.",
        "return": "Pointer"
    },
    "vertex_delete_buffer": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to be removed."
            }
        ],
        "example": {
            "code": "vertex_delete_buffer(v_buff);<br>",
            "description": ""
        },
        "signature": "vertex_delete_buffer(buffer);",
        "function": "vertex_delete_buffer",
        "documentation": "This function can be used to remove a previously created vertex buffer (see [vertex\\_create\\_buffer](vertex_create_buffer.html)) from system memory. This will also remove all vertex data for any custom primitives that it contained.",
        "return": "N/A"
    },
    "load_csv": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to open (as a string)"
            }
        ],
        "example": {
            "code": "file_grid = load_csv(\"spreadsheet.csv\");<br> var ww = ds_grid_get_width(file_grid);<br> var hh = ds_grid_get_height(file_grid);<br> var xx = 32;<br> var yy = 32;<br> for (var i = 0; i &lt; ww; i++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j &lt; hh; j++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_text(xx, yy, string(file_grid[# i, j]));<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy += 32;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;yy = 32;<br> &nbsp;&nbsp;&nbsp;&nbsp;xx += 32;<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "load_csv(filename)",
        "function": "load_csv",
        "documentation": "This function will load a CSV format file and convert it into a DS grid, returning the unique ID value for the grid created.",
        "return": "DS Grid Index (real)"
    },
    "layer_background_get_alpha": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_alpha(back_id) &lt; 0.1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_destroy(back_id);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_alpha(background_element_id);",
        "function": " layer_background_get_alpha",
        "documentation": "",
        "return": "Real (from 0 to 1)"
    },
    "layer_tilemap_destroy": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap to be destroyed"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_trees\");<br> var tile_id = layer_tilemap_get_id(lay_id);<br> if layer_tilemap_exists(lay_id, tile_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_tilemap_destroy(tile_id);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_tilemap_destroy(tilemap_element_id)",
        "function": "layer_tilemap_destroy",
        "documentation": "",
        "return": "N/A"
    },
    "layer_tilemap_x": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to change"
            },
            {
                "label": "x",
                "documentation": "The x position for the tilemap"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> tilemap_x(map_id, irandom(room_width));<br>",
            "description": ""
        },
        "signature": "layer_tilemap_x(tilemap_element_id, x);",
        "function": "layer_tilemap_x",
        "documentation": "",
        "return": "N/A"
    },
    "push_get_next_local_notification": {
        "parameters": [
            {
                "label": "map",
                "documentation": "The ds_map ID to use."
            }
        ],
        "signature": "push_get_next_local_notification(map);",
        "function": "push_get_next_local_notification",
        "documentation": "This function will populate a pre-made [ds_map](../data_structures/ds%20maps/index.html) with a series of key/value pairs for the next local push notification in the queue to be shown. It returns -1 if there are no further notifications queued, or a real value otherwise representing the ID for the notification. This ID can then be used to cancel the notification using the function [push\\_cancel\\_local_notification()](push_cancel_local_notification.html). You should call the function [push\\_get\\_first\\_local\\_notification](push_get_first_local_notification.html) to get the first notification in the queue and then use this function to continue through it.",
        "return": "Real"
    },
    "screen_save": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The filename for the screenshot to save"
            }
        ],
        "signature": "screen_save(fname);",
        "function": "screen_save",
        "documentation": "With this function you can save a screenshot of the game as it currently appears in the game window. The file will be saved to the working directory of the game, which in windows is located at <drive>:/Users/YOURUSERNAME/AppData/Local/\\[Game Name\\]/ and on Mac it would be ~/Library/Application Support/\\[Game Name\\]/. The image captured will be the final render of the application surface of the game, or (if the app surface has been disabled) it will be an image of the whole display or window. It is important to note that the function is designed to be called in the **Draw GUI End Event**, which should give consistent results across all platforms. Using it in any other event may not work as expected, and may give different results across different targets and even devices. Should you need more control over what is being saved, you should use the function [screen\\_save\\_part](screen_save_part.html).",
        "return": "N/A"
    },
    "window_set_max_height": {
        "parameters": [
            {
                "label": "height",
                "documentation": "The maximum height in pixels for the game window."
            }
        ],
        "example": {
            "code": "window_set_min_width(640);<br> window_set_min_height(480);<br> window_set_max_width(1280);<br> window_set_max_height(960);<br>",
            "description": ""
        },
        "signature": "window_set_max_height(height);",
        "function": "window_set_max_height",
        "documentation": "",
        "return": "N/A"
    },
    "ds_grid_copy": {
        "parameters": [
            {
                "label": "destination",
                "documentation": "This index of the grid to copy to."
            },
            {
                "label": "source",
                "documentation": "This index of the grid to copy from."
            }
        ],
        "example": {
            "code": "n_grid = ds_grid_create(ds_grid_width(a_grid), ds_grid_height(a_grid));<br> ds_grid_copy(n_grid, a_grid);<br> ds_grid_clear(a_grid, -1)<br>",
            "description": ""
        },
        "signature": "ds_grid_copy(destination, source);",
        "function": "ds_grid_copy",
        "documentation": "With this function you can copy the contents of one grid into another one. Both grids must have been created previously using the [ds\\_grid\\_create](ds_grid_create.html) function.",
        "return": "N/A"
    },
    "ds_map_secure_load_buffer": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer ID of the buffer to load the map data from."
            }
        ],
        "example": {
            "code": "var buff = buffer_load(\"save.dat\");<br> map = ds_map_secure_load_buffer(buff);<br> buffer_delete(buff);<br>",
            "description": ""
        },
        "signature": "ds_map_secure_load_buffer(buffer);",
        "function": "ds_map_secure_load_buffer",
        "documentation": "This function will load a secure saved DS map from a buffer. You must previously have loaded the buffer into memory (using [buffer_load](../../buffers/buffer_load.html)) and then passing that into this function will return a DS map populated with the contents of the buffer. Note that the buffer must have been created using the function [ds\\_map\\_secure\\_save\\_buffer](ds_map_secure_save_buffer.html) for this to work correctly.",
        "return": "DS Map"
    },
    "font_get_bold": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "if font_get_bold(fnt_Main)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_set_font(fnt_Main);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "font_get_bold(ind);",
        "function": "font_get_bold",
        "documentation": "With this function you can check any font asset to see if it has the **bold** flag or not. If it does the function will return true, otherwise it will return false.",
        "return": "Boolean"
    },
    "instance_id_get": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index within the instance list from 0 - (instance count - 1)."
            }
        ],
        "example": {
            "code": "for (var i = 0; i &lt; instance_count; i ++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;var temp_id = instance_id_get(i); &nbsp;&nbsp;&nbsp;&nbsp;with (temp.id) speed += 0.1;<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_id_get(index);",
        "function": "instance_id_get",
        "documentation": "With this function you can get the unique ID value of any instance from the currently active instance list. You give the index in the instance list to get the ID from and the function will return the value for storing in a variable.",
        "return": "Instance ID value (real)"
    },
    "current_year": {
        "parameters": [],
        "example": {
            "code": "draw_text((32, 32, \"Today is \" + string(current_day) + \"/\" + string (current_month) + \"/\" + string(current_year) +\".\");",
            "description": ""
        },
        "signature": "current_year",
        "function": "current_year",
        "documentation": "This **read only** variable will return the current year.",
        "return": "Real"
    },
    "date_year_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "diff = date_year_span(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());",
            "description": ""
        },
        "signature": "date_year_span(date1, date2);",
        "function": "date_year_span",
        "documentation": "With this function you can get the number of years between two dates. This value is always positive, and incomplete years will be returned as a fraction.",
        "return": "Real"
    },
    "network_set_config": {
        "parameters": [
            {
                "label": "config_value",
                "documentation": "The config value constant to set (listed below)."
            },
            {
                "label": "setting",
                "documentation": "The setting of the config value."
            }
        ],
        "example": {
            "code": "network_set_config(network_config_connect_timeout, 1000);<br> network_set_config(network_config_use_non_blocking_socket, 1);<br>",
            "description": ""
        },
        "signature": "network_set_config(config_value, setting);",
        "function": "network_set_config",
        "documentation": "With this function you can set different network configurations. These configurations are given as **constants** and the setting will depend on the constant that you have choosen. The table below lists the available constants and their settings:",
        "return": "String"
    },
    "path_start": {
        "parameters": [
            {
                "label": "path",
                "documentation": "The path index to start."
            },
            {
                "label": "speed",
                "documentation": "The speed of which to follow the path in pixels per step, negative meaning going backwards."
            },
            {
                "label": "endaction",
                "documentation": "What to do when the end of the path is reached (see the constants listed below)."
            },
            {
                "label": "absolute",
                "documentation": "Whether the calling instance should follow the absolute path as it is in the editor (true) or a relative path to its current position (false)."
            }
        ],
        "example": {
            "code": "path_start(path, 4, path_action_reverse, 0);",
            "description": ""
        },
        "signature": "path_start(path, speed, endaction, absolute);",
        "function": "path_start",
        "documentation": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, _or_ in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the _absolute_ or _relative_ path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).  \n  \n![](path_relative_image.png)",
        "return": "N/A."
    },
    "physics_particle_get_data_particle": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index (ID) of the particle to get the data from."
            },
            {
                "label": "buffer",
                "documentation": "The (previously created) buffer to use to store the data."
            },
            {
                "label": "flags",
                "documentation": "The flags to use to extract data about specific particle types."
            }
        ],
        "example": {
            "code": "var part = physics_particle_create(flags, x, y, x_vel, y_vel, c_white, 1, 1)<br> var flags = phy_particle_data_flag_position | phy_particle_data_flag_velocity;<br> var buffer = buffer_create(16, buffer_grow, 4);<br> physics_particle_get_data_particle(part, buffer, flags);<br> px = buffer_read(buffer, buffer_f32);<br> py = buffer_read(buffer, buffer_f32);<br> pvelx = buffer_read(buffer, buffer_f32);<br> pvely = buffer_read(buffer, buffer_f32);<br> buffer_delete(buffer);<br>",
            "description": ""
        },
        "signature": "physics_particle_get_data_particle(ind, buffer, flags)",
        "function": "physics_particle_get_data_particle",
        "documentation": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics\\_particle\\_create(), and the buffer used must have been created previously using the function [buffer_create()](../../buffers/buffer_create.html). It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise _or_ \"|\" to create a single flag value to get the desired information.",
        "return": "Buffer data"
    },
    "skeleton_collision_draw_set": {
        "parameters": [
            {
                "label": "flag",
                "documentation": "Set to true to turn on drawing, and false to turn it off."
            }
        ],
        "example": {
            "code": "if debug_mode == true<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_collision_draw_set(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_collision_draw_set(flag);",
        "function": "skeleton_collision_draw_set",
        "documentation": "With this function, you can toggle on (true) or off (false) drawing the collision data for the current skeletal animation sprite being used by the instance. If this is switched on, the bounding box and the precise collision mask will be drawn as outlines around the sprite.",
        "return": "N/A"
    },
    "ds_priority_delete_max": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to use."
            }
        ],
        "example": {
            "code": "if ai_move<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;script_execute(ds_priority_delete_max(ai_priority));<br>  &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_delete_max(id);",
        "function": "ds_priority_delete_max",
        "documentation": "This function will return the value that has the highest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, the one that was added to the priority queue first will be the one to get removed, but all other values with the same priority will still be in the queue.",
        "return": "Real or String"
    },
    "gpu_get_blendmode_ext": {
        "parameters": [],
        "example": {
            "code": "var bm = gpu_get_blendmode_ext();<br> bm[0] = bm_src_alpha;<br> gpu_get_blendmode_ext(bm);<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode_ext();",
        "function": "gpu_get_blendmode_ext",
        "documentation": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
        "return": "2 element 1D Array (see above for constants)"
    },
    "gamepad_set_axis_deadzone": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "deadzone",
                "documentation": "The dead zone value from 0 to 1."
            }
        ],
        "example": {
            "code": "if gamepad_is_connected(0) gamepad_set_axis_deadzone(0, 0.05);<br> if gamepad_is_connected(1) gamepad_set_axis_deadzone(1, 0.05);<br> if gamepad_is_connected(2) gamepad_set_axis_deadzone(2, 0.05);<br> if gamepad_is_connected(3) gamepad_set_axis_deadzone(3, 0.05);<br>",
            "description": ""
        },
        "signature": "gamepad_set_axis_deadzone(device, deadzone);",
        "function": "gamepad_set_axis_deadzone",
        "documentation": "This function can be used to set the \"dead zone\" of the joystick axis. You specify the device slot to set, and then set a value from 0 to 1 and if the input amount is lower than the given value, the joystick axis is considered to be at 0. Note that this is a global setting that will affect _all_ axis of all joysticks connected to the device slot specified.",
        "return": "N/A"
    },
    "clickable_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the clickable to check."
            }
        ],
        "example": {
            "code": "if !clickable_exists(home_but)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;home_but = clickable_add(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "clickable_exists(index);",
        "function": "clickable_exists",
        "documentation": "This function returns whether a clickable DOM icon has been created with the specified index exists or not. Please note, that the value used for checking _must have been initialised previously_ or else you will get an error causing _GameMaker Studio 2_ to close.",
        "return": "Boolean"
    },
    "gpu_get_blendmode_dest": {
        "parameters": [],
        "example": {
            "code": "var bm;<br> bm[0] = gpu_get_blendmode_src();<br> bm[1] = gpu_get_blendmode_dest();<br> gpu_set_blendmode_ext_sepalpha(bm[0], bm[1], bm_inv_src_alpha, bm_inv_dest_colour);<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode_dest();",
        "function": "gpu_get_blendmode_dest",
        "documentation": "This function can be used to retrieve the current _destination_ extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination):",
        "return": "Constant (see above table)"
    },
    "direction": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check(vk_left) direction += 5;<br> if keyboard_check(vk_right) direction -= 5;<br>",
            "description": ""
        },
        "signature": "direction;",
        "function": "direction;",
        "documentation": "",
        "return": "Real"
    },
    "physics_apply_angular_impulse": {
        "parameters": [
            {
                "label": "impulse",
                "documentation": "The impulse (in Newton metres) to be applied"
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_up) physics_apply_angular_impulse(10);",
            "description": ""
        },
        "signature": "physics_apply_angular_impulse(impulse)",
        "function": "physics_apply_angular_impulse",
        "documentation": "This function will give an angular impulse to a physics enabled instance. This impulse will set the angular rotation by the amount given, ignoring the current torque, essentially setting the amount of \"spin\" that a fixture has. If you wish to apply an angular force to an instance using torque, then you should be using the function [physics\\_apply\\_torque()](physics_apply_torque.html).",
        "return": "N/A"
    },
    "audio_destroy_stream": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The file to stream the audio from."
            }
        ],
        "example": {
            "code": "audio_destroy_stream(snd);",
            "description": ""
        },
        "signature": "audio_destroy_stream(filename);",
        "function": "audio_destroy_stream",
        "documentation": "If you have previously created an audio stream from a file using the function [audio\\_create\\_stream()](audio_create_stream.html) and no longer need that sound, you can call this function to delete it from memory. Any further calls to the sound index after it has been destroyed will give an error.",
        "return": "NA"
    },
    "gpu_get_blendmode_srcalpha": {
        "parameters": [],
        "example": {
            "code": "var bm;<br> bm[0] = gpu_get_blendmode_srcalpha();<br> bm[1] = gpu_get_blendmode_destalpha();<br> gpu_set_blendmode_ext_sepalpha(bm_inv_src_alpha, bm_inv_dest_colour, bm[0], bm[1]);<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode_srcalpha();",
        "function": "gpu_get_blendmode_srcalpha",
        "documentation": "This function can be used to retrieve the current _source_ extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
        "return": "Constant (see above table)"
    },
    "physics_particle_get_max_count": {
        "parameters": [],
        "example": {
            "code": "if physics_particle_count() &lt; physics_particle_get_max_count()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_particle_create(0, x, y, 0, 0, c_white, 1, 1)<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_particle_get_max_count()",
        "function": "physics_particle_get_max_count",
        "documentation": "With this function you can find out what the current cap value is on particles permitted in the physics simulation (you can set this value using [physics\\_particle\\_set\\_max\\_count()](physics_particle_set_max_count.html)).",
        "return": "Real"
    },
    "device_mouse_y": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if device_mouse_y(0) &gt; y-32 &amp;&amp; device_mouse_y(0) &lt; y+32<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_y(device);",
        "function": "device_mouse_y",
        "documentation": "This function returns the y position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
        "return": "Real"
    },
    "gpu_get_colorwriteenable": {
        "parameters": [],
        "example": {
            "code": "var cw = gpu_get_colorwriteenable();<br> cw[3] = false;<br> gpu_set_colorwriteenable(cw);<br>",
            "description": ""
        },
        "signature": "gpu_get_colorwriteenable();",
        "function": "gpu_get_colorwriteenable",
        "documentation": "This function can be used to retrieve the current colour write-enable values. The function returns a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled). By default all colour writing is set to true:",
        "return": "4 element 1D array (See above for details)"
    },
    "part_system_automatic_draw": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to change."
            },
            {
                "label": "automatic",
                "documentation": "Whether automatic drawing is on (true) or not (false)."
            }
        ],
        "example": {
            "code": "part_system_automatic_draw(global.Sname, false);",
            "description": ""
        },
        "signature": "part_system_automatic_draw(ind, automatic);",
        "function": "part_system_automatic_draw",
        "documentation": "This function can be used to switch off the drawing of a particle system so that any updates done to the system (automatic or otherwise) will not be seen. This is a purely visual option and when set to false you will not be able to see the particles as they are not drawn, but they still exists and are changing position, colour etc... as they would normally. When automatic drawing is off, you can _explicitly_ order _GameMaker Studio 2_ to draw the current state of the particle system using the function [part\\_system\\_drawit](part_system_drawit.html), and if you set this function to true again you can switch automatic drawing back on.  \n  \nOne thing to note is that if you are using the simple effects created by the functions [effect\\_create\\_above](../simple%20effects/effect_create_above.html) or [effect\\_create\\_below](../simple%20effects/effect_create_below.html) then you can use the values of 0 (for below effects) or 1 (for above effects) as the particle system index and so toggle the automatic draw for these too (this will also work to toggle drawing for the DnD™ particle effects).",
        "return": "N/A"
    },
    "vertex_get_buffer_size": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to get the size of."
            }
        ],
        "example": {
            "code": "bufferBytes = vertex_get_buffer_size(buff);",
            "description": ""
        },
        "signature": "vertex_get_buffer_size(buffer);",
        "function": "vertex_get_buffer_size",
        "documentation": "With this function you can get the size of the given vertex buffer in bytes.",
        "return": "Real"
    },
    "font_delete": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the font to delete."
            }
        ],
        "example": {
            "code": "font_delete(global.Font);",
            "description": ""
        },
        "signature": "font_delete(ind);",
        "function": "font_delete",
        "documentation": "With this function you can delete a font asset from the game. This is a **permanent** removal, and changing rooms, or restarting the game will not bring the removed font back. For that the player would need to exit the game and restart that way, so take care when using this function. In general it is only needed for freeing up memory that has been used by a font added to the game through the functions [font_add](font_add.html) or [font\\_add\\_sprite](font_add_sprite.html).",
        "return": "N/A"
    },
    "image_yscale": {
        "parameters": [],
        "example": {
            "code": "if image_xscale &lt; 5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;image_xscale += 0.2;<br> &nbsp;&nbsp;&nbsp;image_yscale = image_xscale;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Effects\", obj_Explosion);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "image_yscale;",
        "function": "image_yscale;",
        "documentation": "",
        "return": "Real"
    },
    "date_inc_minute": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to."
            },
            {
                "label": "amount",
                "documentation": "The number of minutes (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_minute(date_current_datetime(), 60);",
            "description": ""
        },
        "signature": "date_inc_minute( date, amount );",
        "function": "date_inc_minute",
        "documentation": "With this function you can increment a given datetime value by a specific number of minutes, and it will return the new datetime value.",
        "return": "Real"
    },
    "alarm_get": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The alarm index to get, from 0 to 11."
            }
        ],
        "example": {
            "code": "for (var i = 0; i &lt; 12; i++)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if alarm_get(i) &gt; 0 alarm_set(i, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "alarm_get(index);",
        "function": "alarm_get",
        "documentation": "This function can be used to get the current value of the given alarm. You supply the alarm number from 0 to 11 and this function will return the value that the alarm is currently on. This is an alternative method to getting the [alarm array](../instances/instance_variables/alarm.html) value directly.",
        "return": "Real"
    },
    "os_version": {
        "parameters": [],
        "example": {
            "code": "if os_type = os_android &amp;&amp; os_version &gt;10 global.GFX = 1;",
            "description": ""
        },
        "signature": "os_version",
        "function": "os_version",
        "documentation": "This variable will tell you the version number for the OS that is running your game. For example, if you are running it on an iPad with iOS 4 installed, os_version will be equal to 83890177.  \n  \nThe following table outlines the values that are returned:",
        "return": "Real"
    },
    "mp_grid_draw": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be drawn"
            }
        ],
        "example": {
            "code": "draw_set_alpha(0.3);<br> mp_grid_draw(grid);<br> draw_set_alpha(1);<br>",
            "description": ""
        },
        "signature": "mp_grid_draw(id);",
        "function": "mp_grid_draw",
        "documentation": "This function will draw the specified mp_grid, marking free cells as green and forbidden cells as red. This function is essential as a debug tool but it should be noted that it is _very_ slow and only works when used in the **draw** event of the instance.",
        "return": "Boolean."
    },
    "mp_grid_path": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "path",
                "documentation": "index of the path that is to be used by the function"
            },
            {
                "label": "x start",
                "documentation": "Starting x coordinate of the new path"
            },
            {
                "label": "y start",
                "documentation": "Starting y coordinate of the new path"
            },
            {
                "label": "xgoal",
                "documentation": "Finishing x coordinate of the new path"
            },
            {
                "label": "ygoal",
                "documentation": "Finishing y coordinate of the new path"
            },
            {
                "label": "allowdiag",
                "documentation": "Indicates whether diagonal moves are allowed instead of just horizontal or vertical"
            }
        ],
        "example": {
            "code": "global.grid = mp_grid_create(0, 0, room_width div 32, room_height div 32, 32, 32);<br> mp_grid_add_instances(global.grid, obj_wall, false);<br> with (obj_Enemy)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path = path_add();<br> &nbsp;&nbsp;&nbsp;if mp_grid_path(global.grid, path, x, y, obj_Player.x, obj_Player.y, 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_start(path, 0, 3, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_grid_path(id, path, xstart, ystart, xgoal, ygoal, allowdiag);",
        "function": "mp_grid_path",
        "documentation": "  \nWith this function you can create a path that will navigate from a start point to a finish point using an mp_grid that you have previously defined, avoiding any obstacles that have already been added into the grid. The xstart and ystart arguments indicate the start of the path in room coordinates, while xgoal, ygoal arguments indicate the destination. You can also select either horizontal/vertical movement only, or allow full diagonal movements by specifying true in the allowdiag argument. The function returns either true (it succeeded in finding a path) or false (it failed) as well as setting the chosen path. In the following image, you can see how this all works together:  \n  \n![](images/mp_grid_path_image.png)",
        "return": "Boolean."
    },
    "path_get_point_y": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            },
            {
                "label": "n",
                "documentation": "The point identity to check."
            }
        ],
        "example": {
            "code": "if path_position = 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var i;<br> &nbsp;&nbsp;&nbsp;i = floor(random(path_get_number(mypath)));<br> &nbsp;&nbsp;&nbsp;x = path_get_point_x(mypath, i);<br> &nbsp;&nbsp;&nbsp;y = path_get_point_y(mypath, i);<br> &nbsp;&nbsp;&nbsp;path_position = (1 / path_get_number(mypath)) * i;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_get_point_y(index, n);",
        "function": "path_get_point_y",
        "documentation": "This function will return the y position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the y position of point 10) then a value of 0 will be returned.",
        "return": "Real."
    },
    "physics_joint_delete": {
        "parameters": [
            {
                "label": "joint",
                "documentation": "The index of the joint that you wish to delete"
            }
        ],
        "example": {
            "code": "var reactionForceX, reactionForceY, reactionForce;<br> if shipJoint<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;reactionForceX = physics_joint_get_value(shipJoint, phy_joint_reaction_force_x);<br> &nbsp;&nbsp;&nbsp;reactionForceY = physics_joint_get_value(shipJoint, phy_joint_reaction_force_x);<br> &nbsp;&nbsp;&nbsp;reactionForce = sqrt((reactionForceX + reactionForceX) + (reactionForceY + reactionForceY));<br> &nbsp;&nbsp;&nbsp;if reactionForce &gt; 2<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_joint_delete(shipJoint);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shipJoint = -1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_joint_delete(joint)",
        "function": "physics_joint_delete",
        "documentation": "Once two instances with physics representations have been bound by a joint, this can be deleted again at any time. Normally this will happen automatically when one of the two instances is destroyed, or when the room ends, but there are times when you may wish to do this manually. In those cases you would use this function.  \n  \nIt should also be noted that whenever an instance that is part of a [gear joint](physics_joint_gear_create.html) is destroyed, the gear joint should be deleted using this function _before_ any of the instances involved in forming the gear (but the remaining joints will be deleted automatically), for example in the destroy event of the instance.",
        "return": "N/A"
    },
    "phy_dynamic": {
        "parameters": [],
        "example": {
            "code": "if other.phy_dynamic<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (other)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dir;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir = point_direction(x, y, other.x, other.y);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_apply_impulse(x, y, x + lengthdir_x(100, dir), y + lengthdir_y(100, dir));<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_dynamic;",
        "function": "phy_dynamic;",
        "documentation": "A dynamic instance is one that is fully simulated within the physics world and this **read-only** variable will return true if the instance being checked is fully simulated or false if it is not.",
        "return": "Boolean"
    },
    "room_instance_add": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to add an object instance to."
            },
            {
                "label": "x",
                "documentation": "The x position of the new instance."
            },
            {
                "label": "y",
                "documentation": "The y position of the new instance."
            },
            {
                "label": "obj",
                "documentation": "The object to add an instance of."
            }
        ],
        "example": {
            "code": "global.rm = room_add();<br> room_assign(rm_Base, global.rm);<br> room_instance_add(global.rm, 100, 100, obj_Player);<br>",
            "description": ""
        },
        "signature": "room_instance_add(index, x, y, obj);",
        "function": "room_instance_add",
        "documentation": "",
        "return": "Instance ID"
    },
    "layer_create": {
        "parameters": [
            {
                "label": "depth",
                "documentation": "The depth that the layer has to be created at."
            },
            {
                "label": "name",
                "documentation": "The name to give the layer (a string - optional)"
            }
        ],
        "example": {
            "code": "global.Bullet_Layer = layer_create(-100);<br>",
            "description": ""
        },
        "signature": "layer_create(depth, [name])",
        "function": "layer_create",
        "documentation": "This function is used to create a new layer within the current room. You supply the depth that the new layer is to occupy and the function returns the unique Layer ID value that can then be used to access the layer in further functions. You can also supply an optional \"name\" argument, which will enable you to give the layer a specific name (as a string), and instead of using the layer ID to access the layer, you can use this name string instead, although it should be noted that using name strings will have a greater impact on performance than using just the ID value.",
        "return": "Layer ID (Real)"
    },
    "sprite_get_bbox_left": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to check."
            }
        ],
        "example": {
            "code": "var ww, hh;<br> ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index);<br> hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);<br>",
            "description": ""
        },
        "signature": "sprite_get_bbox_left(ind);",
        "function": "sprite_get_bbox_left",
        "documentation": "This function returns the relative position of the left of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the [collision mask properties](../../../2_interface/1_editors/sprites.html). The image below shows how it is calculated: ![](spr_bbox.png)",
        "return": ""
    },
    "sprite_save": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to save."
            },
            {
                "label": "subimg",
                "documentation": "The sub-image of the sprite to save."
            },
            {
                "label": "fname",
                "documentation": "The filename for the saved sprite."
            }
        ],
        "example": {
            "code": "var surf, spr_custom;<br> surf = surface_create(32, 32);<br> surface_set_target(surf);<br> draw_clear_alpha(c_black, 0);<br> draw_sprite(spr_Body, 0, 0, 0);<br> draw_sprite(spr_Clothes, 0, 0, 0);<br> draw_sprite(spr_Hair, 0, 0, 0);<br> spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16);<br> surface_reset_target();<br> surface_free(surf);<br> sprite_save(spr_custom, 0, \"Player_Custom_Sprite.png\");<br> sprite_delete(spr_Custom);<br>",
            "description": ""
        },
        "signature": "sprite_save(ind, subimg, fname);",
        "function": "sprite_save",
        "documentation": "This function can be used to save any sub-image of any sprite to disc, giving it the specified filename. This image _must_ be a *.png file.",
        "return": ""
    },
    "buffer_async_group_end": {
        "parameters": [],
        "example": {
            "code": "",
            "description": "The <tt>buffer_async_group_end()</tt> function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:"
        },
        "signature": "buffer_async_group_end();",
        "function": "buffer_async_group_end",
        "documentation": "This function finishes the definition of a buffer save group. You must have previously called the function [buffer\\_async\\_group_begin()](buffer_async_group_begin.html) to initiate the group, then call the function [buffer\\_save\\_async()](buffer_save_async.html) for each file that you wish to save out. Finally you call this function, which will start the saving of the files. The function will return a unique ID value for the save, which can then be used in the Asynchronous Save event to",
        "return": "Real"
    },
    "ds_queue_read": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read into."
            },
            {
                "label": "str",
                "documentation": "The string to read from."
            },
            {
                "label": "legacy (optional)",
                "documentation": "Can be either true or false or omitted completely."
            }
        ],
        "example": {
            "code": "queue = ds_queue_create();<br> ini_open(\"save.ini\");<br> var str = ini_read_string(\"Queues\", \"0\", \"\");<br> if str != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_queue_read(queue, str);<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "ds_queue_read(id, str [, legacy]);",
        "function": "ds_queue_read",
        "documentation": "With this function you can recreate a saved ds_queue (one that has previously been written as a string using [ds\\_queue\\_write](ds_queue_write.html)). You must first create a new ds\\_queue to read the string into, and if the ds\\_queue already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game. Note that if the data structure was created with previous versions of _GameMaker_ you should add the optional argument \"legacy\", setting it to true as the string format has changed with this version.",
        "return": "N/A"
    },
    "ds_stack_clear": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to clear."
            }
        ],
        "example": {
            "code": "if ai_count = 15 &amp;&amp; !ds_stack_empty(AI_stack)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_stack_clear(AI_stack);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_stack_clear(id);",
        "function": "ds_stack_clear",
        "documentation": "With this function you can clear all data from the given stack data-structure. This does _NOT_ destroy the data-structure (for that you should use [ds\\_stack\\_destroy](ds_stack_destroy.html)) it only wipes all data from it and returns an empty stack.",
        "return": "N/A"
    },
    "ds_stack_read": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read into."
            },
            {
                "label": "str",
                "documentation": "The string to read from."
            },
            {
                "label": "legacy (optional)",
                "documentation": "Can be either true or false or omitted completely."
            }
        ],
        "example": {
            "code": "stack = ds_stack_create();<br> ini_open(\"save.ini\");<br> var str = ini_read_string(\"Stacks\", \"0\", \"\");<br> if str != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_stack_read(stack, str);<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "ds_stack_read(id, str [, legacy] );",
        "function": "ds_stack_read",
        "documentation": "With this function you can recreate a saved ds_stack (one that has previously been written as a string using [ds\\_stack\\_write](ds_stack_write.html)). You must first create a new ds\\_stack to read the string into, and if the ds\\_stack already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game. Note that if the data structure was created with previous versions of _GameMaker_ you should add the optional argument \"legacy\", setting it to true as the string format has changed with this version.",
        "return": "N/A"
    },
    "degtorad": {
        "parameters": [
            {
                "label": "deg",
                "documentation": "The degrees to convert."
            }
        ],
        "example": {
            "code": "val = degtorad(90);",
            "description": ""
        },
        "signature": "degtorad(deg);",
        "function": "degtorad",
        "documentation": "In GM all the trigonometric functions work in radians, but most people work in degrees and this means that to convert your degrees into radians you need to use this function. For example, degtorad(180)returns 3.14159265 radians. This function translates degrees into radians using the formula:",
        "return": "Real"
    },
    "analytics_event_ext": {
        "parameters": [
            {
                "label": "string",
                "documentation": "A string to send to the provider."
            },
            {
                "label": "string_param[0 -9]",
                "documentation": "The parameter to send (a string)."
            },
            {
                "label": "value[0 - 9]",
                "documentation": "The value of the parameter (a real number)."
            }
        ],
        "example": {
            "code": "var num, time;<br> ini_open(\"Options.ini\");<br> num = ini_read_real(\"Data\", \"Plays\", 0);<br> num += 1;<br> time = current_time;<br> analytics_event_ext(GAME_NAME, \"Plays\", num, \"Time\", time);<br> ini_write_real(\"Data\", \"Plays\", num);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "analytics_event_ext(string, string_param, value);",
        "function": "analytics_event_ext",
        "documentation": "",
        "return": "N/A"
    },
    "audio_listener_velocity": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x velocity component of the listener (default 0)."
            },
            {
                "label": "y",
                "documentation": "The y velocity component of the listener (default 0)."
            },
            {
                "label": "z",
                "documentation": "The z velocity component of the listener (default 0)."
            }
        ],
        "example": {
            "code": "if speed &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_listener_velocity(abs(hspeed), abs(vspeed), 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_listener_velocity(vx, vy, vz);",
        "function": "audio_listener_velocity",
        "documentation": "This function can be used to give the listener _doppler_ effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the listener itself is not ever going to move, or the movement is not a constant motion, you would normally not need to set these values, but, for example, if you are making a scrolling game where the player has a constant bottom to top movement and the enemies a constant top to bottom movement, you would set the listener _and_ emitter velocities (for emitters you would use [audio\\_emitter\\_velocity](audio_emitter_velocity.html)) to the appropriate vectors to simulate the correct doppler effect as they move past the player instance.",
        "return": "N/A"
    },
    "ds_grid_value_disk_y": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            },
            {
                "label": "val",
                "documentation": "The value to find."
            }
        ],
        "example": {
            "code": "if ds_grid_value_disk_exists(grid, 5, 5, 5, val)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;xpos = ds_grid_value_disk_x(grid, 5, 5, 5, val);<br> &nbsp;&nbsp;&nbsp;ypos = ds_grid_value_disk_y(grid, 5, 5, 5, val);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_value_disk_y(index, xm, ym, r, val);",
        "function": "ds_grid_value_disk_y",
        "documentation": "With this function you can get the y coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by [ds\\_grid\\_create](ds_grid_create.html)) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
        "return": "Real"
    },
    "ds_list_sort": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to sort."
            },
            {
                "label": "ascend",
                "documentation": "Whether the values should be ascending (true) or descending (false) order."
            }
        ],
        "example": {
            "code": "if newgame<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_sort(name_list, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_sort(id, ascend);",
        "function": "ds_list_sort",
        "documentation": "With this function you can sort all the values within a list, either in ascending or descending order. If the list contains strings, these will be sorted alphabetically, based on the English 26 letter alphabet.",
        "return": "N/A"
    },
    "draw_set_alpha": {
        "parameters": [
            {
                "label": "alpha",
                "documentation": "The alpha to set (between 0 and 1)"
            }
        ],
        "example": {
            "code": "draw_set_alpha(0.5);<br> draw_set_colour(c_black);<br> draw_text(x+5, y+5, \"LEVEL 1\");<br> draw_set_alpha(1);<br> draw_set_colour(c_white);<br> draw_text(x, y, \"LEVEL 1\");<br>",
            "description": ""
        },
        "signature": "draw_set_alpha(alpha);",
        "function": "draw_set_alpha",
        "documentation": "With this function you can set the base draw alpha for the game. This value can be set from 0 to 1 with 0 being fully transparent and 1 being fully opaque (the default value), and will affect all further drawing, including backgrounds, sprites, fonts, primitives and 3D.",
        "return": "N/A"
    },
    "gpu_get_state": {
        "parameters": [],
        "example": {
            "code": "gpu_map = gpu_get_state();<br>",
            "description": ""
        },
        "signature": "gpu_get_state();",
        "function": "gpu_get_state",
        "documentation": "This function will get the current GPU state, returning it as a [ds_map](../../data_structures/ds%20maps/index.html). This can then be manipulated or even saved, and you can return this map to the GPU using the function [gpu\\_set\\_state](gpu_set_state.html).",
        "return": "ds_map"
    },
    "part_type_size": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "size_min",
                "documentation": "The minimum size the particle can start at."
            },
            {
                "label": "size_max",
                "documentation": "The maximum size the particle can start at."
            },
            {
                "label": "size_incr",
                "documentation": "How much the particle should increase or decrease per step."
            },
            {
                "label": "size_wiggle",
                "documentation": "How much should randomly be added or subtracted from the particles size per step."
            }
        ],
        "example": {
            "code": "part_type_shape(particle1, pt_shape_explosion);<br> part_type_size(particle1, 2, 2, 0.10, 0.01);<br> part_type_scale(particle1, 1, 1);<br> part_type_colour2(particle1, 16777215, 12632256);<br> part_type_alpha3(particle1, 0, 0.20, 0);<br> part_type_speed(particle1, 0.20, 0.20, 0, 0);<br> part_type_direction(particle1, 0, 359, 0, 20);<br> part_type_orientation(particle1, 0, 359, 0, 0, 1);<br> part_type_blend(particle1, 0);<br> part_type_life(particle1, 40, 60);<br>",
            "description": ""
        },
        "signature": "part_type_size(ind, size_min, size_max, size_incr, size_wiggle);",
        "function": "part_type_size",
        "documentation": "This function is used to determine the size of the particle when it is created and can also be used to make the particle increase or decrease in size over its lifetime. The minimum and maximum size values default at 1 (meaning that the size is the same ratio as the base particle after the [part\\_type\\_scale](part_type_scale.html) scale has been set) and if they are set to the same value, the initial size for all particles will be the same, but if set to different values, each particle will start with a random size from within the range, for example if you have a minimum of 0.5 and a maximum of 2, all particles will be created with a size between half and double the base scale.  \n  \nYou can also set an increment value that will make the particle sprite grow (if a positive number) or shrink (if a negative number) over the lifetime of the particle, with the given amount being added to the particle size each step. This value can be a minimum of (+/-)0.01.  \n  \nFinally, you can set the \"wiggle\" factor. This is a value that will be added or subtracted randomly to the size each step of the particles lifetime. Obviously larger values are more pronounced than smaller ones, and this value can even be a negative with the maximum range being between -20 and 20.",
        "return": "N/A"
    },
    "draw_text_transformed_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scale."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scale."
            },
            {
                "label": "angle",
                "documentation": "The angle of the text."
            },
            {
                "label": "c1",
                "documentation": "The colour for the top left of the drawn text."
            },
            {
                "label": "c2",
                "documentation": "The colour for the top right of the drawn text."
            },
            {
                "label": "c3",
                "documentation": "The colour for the bottom right of the drawn text."
            },
            {
                "label": "c4",
                "documentation": "The colour for the bottom left of the drawn text."
            },
            {
                "label": "alpha",
                "documentation": "The alpha for the text."
            }
        ],
        "example": {
            "code": "draw_set_halign(fa_center);<br> draw_set_valign(fa_middle);<br> image_angle += 1;<br> draw_text_transformed_colour(room_width / 2, room_height / 2, keyboard_string, 2, 2, image_angle, c_red, c_red, c_yellow, c_yellow, 0.5);<br>",
            "description": ""
        },
        "signature": "draw_text_transformed_colour(x, y, string, xscale, yscale, angle, c1, c2, c3, c4, alpha);",
        "function": "draw_text_transformed_colour",
        "documentation": "This function is a combination of the base [draw_text](draw_text.html) function with the [draw\\_text\\_transformed](draw_text_transformed.html) and [draw\\_text\\_colour](draw_text_colour.html) functions, permitting you to scale and rotate text as well as colour it with a gradient fill and change its alpha value, ignoring the base alpha and colour settings for drawing.  \n  \n_**NOTE:** Gradient blending is not available for the HTML5 target unless WebGL is enabled, although you can still set the blending colours and it will blend the font with the first given colour. However all blending in this way creates a duplicate font which is then stored in the cache and used when required, which is far from optimal and if you use multiple colour changes it will slow down your games performance. You can set the font cache size to try and limit this should it be necessary using the function [font\\_set\\_cache_size](../../fonts/font_set_cache_size.html)._",
        "return": "N/A"
    },
    "highscore_value": {
        "parameters": [
            {
                "label": "place",
                "documentation": "The place on the table (1-10)."
            }
        ],
        "example": {
            "code": "var i;<br> i = 10;<br> repeat(10)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;scr[i] = highscore_value(i);<br> &nbsp;&nbsp;&nbsp;i -= 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "highscore_value(place);",
        "function": "highscore_value",
        "documentation": "With this function you can retrieve the score value that has been stored in the high score list at the given position. If no score has been entered, the function will return 0.",
        "return": "N/A"
    },
    "script_exists": {
        "parameters": [
            {
                "label": "scr",
                "documentation": "The name of the script that you want to check."
            }
        ],
        "example": {
            "code": "script[0] = -1;<br> script[1] = scr_AI_Left;<br> script[2] = scr_AI_Right;<br> var script_num = choose(0, 1, 2);<br> if script_exists(script[script_num])<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;script_execute(script[script_num]);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "script_exists(scr);",
        "function": "script_exists",
        "documentation": "This function will return true or false depending on whether the script with the given index exists. Note, that this is _not_ a string, but rather the asset name which holds the unique index for each script (as it would appear in the IDE). For more information on scripts, see [Scripts](../../3_gml_overview/3_scripts.html).",
        "return": "Boolean"
    },
    "mp_grid_add_cell": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "h",
                "documentation": "Horizontal position of the cell in the grid"
            },
            {
                "label": "v",
                "documentation": "Vertical position of the cell in the grid"
            }
        ],
        "example": {
            "code": "with (obj_Wall)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;mp_grid_add_cell(grid, floor(x / 32), floor(y / 32));<br> &nbsp;&nbsp;&nbsp;}<br> with (obj_Door)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;mp_grid_add_cell(grid, x&gt;&gt;5, y&gt;&gt;5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_grid_add_cell(id, h, v);",
        "function": "mp_grid_add_cell",
        "documentation": "With this function we can mark individual cells within the mp_grid as being \"forbidden\" meaning that the path finding functions will not ever cross them. Now, normally you work in x/y _room_ coordinates, and not in mp_grid _cell_ coordinates. So let's consider the following image which shows how the two can correlate:  \n  \n![](images/mp_grid_add_cell_image.png)",
        "return": "N/A"
    },
    "object_set_persistent": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the object to change."
            },
            {
                "label": "pers",
                "documentation": "Whether the object should be flagged as persistent (true) or not (false)."
            }
        ],
        "example": {
            "code": "if room == rm_final object_set_persistent(obj_Player, 0); instance_create_layer(32, 32, \"Instances\", obj_Player);",
            "description": ""
        },
        "signature": "object_set_persistent(index, pers);",
        "function": "object_set_persistent",
        "documentation": "With this function you can set the persistence of a specific object. A persistent object is \"carried over\" from room to room and maintains its properties at all times (for more information on persistence see [Defining Objects](../../../2_interface/1_editors/objects.html)). Setting the persistence of the object means that all instances of this object that are created _after the persistence has been changed_ will be created persistent, while instances that are already in the room may not be affected.  \n  \nPlease note that this is not an instance function! You can set the persistent flag of individual instances using the [persistent](../instances/instance_variables/persistent.html) variable and so have ten instances all flagged as persistent even though the object in question has the flag set to false in the IDE, and even if you change the persistent flag of the object to true using this function, all instances that currently in the room will remain as they were, and only instances created after calling the function will start with persistent flagged as true.",
        "return": "N/A"
    },
    "path_change_point": {
        "parameters": [],
        "example": {
            "code": "for (var i = 0; i &lt; path_get_number(path0); i ++)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var px = path_get_point_x(path0, i) + 32 - random(64);<br> &nbsp;&nbsp;&nbsp;var py = path_get_point_y(path0, i) + 32 - random(64);<br> &nbsp;&nbsp;&nbsp;path_change_point(path0, i, px, py, 100);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_change_point(index, n, x, y, speed);",
        "function": "path_change_point",
        "documentation": "With this function you can change the position and/or the speed factor of any point previously defined for a path (the path can have been created in the path editor or through code using [path_add](path_add.html)).",
        "return": "N/A"
    },
    "physics_world_gravity": {
        "parameters": [
            {
                "label": "xg",
                "documentation": "The x component of the gravity vector"
            },
            {
                "label": "yg",
                "documentation": "The y component of the gravity vector"
            }
        ],
        "example": {
            "code": "physics_world_gravity(-5, 0)",
            "description": ""
        },
        "signature": "physics_world_gravity(xg, yg)",
        "function": "physics_world_gravity",
        "documentation": "As with all the physics functions, physics\\_world\\_gravity will only work on an instance if the room has a physics world defined for it in the room editor or using [physics\\_world\\_create](physics_world_create.html). It will then use the 0,0 defining point of the physics world to calculate the direction and strength of gravity based on the vector calculated from the xg and yg inputs. Here are some images to illustrate...  \n  \n![](images/physics_gravity_image.png)",
        "return": "N/A"
    },
    "steam_activate_overlay_store": {
        "parameters": [
            {
                "label": "app_id",
                "documentation": "The unique App ID for your game."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_f1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_activate_overlay_store(global.DLC_id);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_activate_overlay_store(app_id);",
        "function": "steam_activate_overlay_store",
        "documentation": "With this function you can open the Steam overlay on the store page for a game so that users can buy or download DLC (for example). You need to supply the unique App ID for the game or DLC which you would get from the Steam dashboard when you set it up.",
        "return": "N/A"
    },
    "ds_grid_get_disk_min": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_disk_min(grid, 5, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_disk_min(index, xm, ym, r);",
        "function": "ds_grid_get_disk_min",
        "documentation": "This function can be used to find the minimum value for all the cells found within the defined disk area of a grid, as shown in the image below: ![](ds_grid_get_disk_min.png)",
        "return": "Real or String"
    },
    "ds_queue_clear": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to clear."
            }
        ],
        "example": {
            "code": "if count = 15 &amp;&amp; !ds_queue_empty(command_queue)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_queue_clear(command_queue);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_queue_clear(id);",
        "function": "ds_queue_clear",
        "documentation": "With this function you can clear all data from the given queue data-structure. This does _NOT_ destroy the data-structure (for that you should use [ds\\_queue\\_destroy](ds_queue_destroy.html)) it only wipes all data from it and returns an empty queue.",
        "return": "N/A"
    },
    "colour_get_hue": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to check"
            }
        ],
        "example": {
            "code": "col = merge_colour(colour_get_hue(c_teal), c_white, 0.5);",
            "description": ""
        },
        "signature": "colour_get_hue(col);",
        "function": "colour_get_hue",
        "documentation": "This function will return the hue of the given colour. This is the \"pure\" colour tone which is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour: ![](images/get_hue.png)",
        "return": "Real"
    },
    "filename_change_ext": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The file to use."
            },
            {
                "label": "newext",
                "documentation": "The new extension to use."
            }
        ],
        "example": {
            "code": "ext = filename_change_ext(file_find_first(working_directory + \"*.*\", 0), \"\");<br>",
            "description": ""
        },
        "signature": "filename_change_ext(fname, newext);",
        "function": "filename_change_ext",
        "documentation": "This function returns the indicated file name with the extension (including the dot) changed to the new extension. By using an empty string as the new extension you can remove the extension part all together.",
        "return": "String."
    },
    "instance_copy": {
        "parameters": [
            {
                "label": "perf",
                "documentation": "Whether to perform the new instance's Create event (true) or not (false)."
            }
        ],
        "example": {
            "code": "var inst;<br> inst = instance_number(object_index);<br> if inst &lt; 10<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_copy(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_copy(perf);",
        "function": "instance_copy",
        "documentation": "With this function you can \"clone\" an instance as this will create a new version of the instance running the code at its same position. The \"perf\" argument is used to instruct this new instance to perform the create event or not. This function returns the [id](../instance_variables/id.html) of the new instance which can then be stored in a variable or used to access that instance.",
        "return": "Real (instance ID value)"
    },
    "depth": {
        "parameters": [],
        "example": {
            "code": "if y != yprevious<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;depth = -y;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "depth;",
        "function": "depth;",
        "documentation": "When you create an object you can assign it an initial _depth_ which defines how the instances of that object will be drawn in the room when the game is being played and this variable can be used to get and to change that depth value while the game is running. You would normally not need to use this variable as you should be setting instances to be added to discreet [layers](layer.html), which in turn are set to a specific depth, but it may be that you want to change the depth of an instance using this value, in which case a \"temporary layer\" will be created specifically for the instance at the given depth. Note that when no instances are on the same depth then this temporary layer will be removed from memory (unlike regular layers which will remain even if they have nothing on them).",
        "return": "Real"
    },
    "network_create_socket_ext": {
        "parameters": [
            {
                "label": "protocol",
                "documentation": "The network protocol to use"
            },
            {
                "label": "port",
                "documentation": "The port to use"
            }
        ],
        "example": {
            "code": "client = network_create_socket_ext(network_socket_udp, 6510);<br>",
            "description": ""
        },
        "signature": "network_create_socket_ext(protocol, port);",
        "function": "network_create_socket_ext",
        "documentation": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket protocol (see the list of constants below) and give a port to use, and the function will return a unique _id_ which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
        "return": "Real"
    },
    "physics_particle_get_data": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The (previously created) buffer to use to store the data."
            },
            {
                "label": "flags",
                "documentation": "The flags to use to extract data about specific particle types."
            }
        ],
        "example": {
            "code": "var count = physics_particle_count();<br> var flags = phy_particle_data_flag_position | phy_particle_data_flag_colour;<br> if (count &gt; 0)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var buffer = buffer_create(count * 12, buffer_grow, 4);<br> &nbsp;&nbsp;&nbsp;physics_particle_get_data(buffer, flags);<br> &nbsp;&nbsp;&nbsp;for (var n = 0; n &lt; count; n++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xx = buffer_read(buffer, buffer_f32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yy = buffer_read(buffer, buffer_f32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var argb = buffer_read(buffer, buffer_u32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var alpha = (argb &gt;&gt; 24) &amp; 255;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_sprite_ext(sprBlob, 0, xx, yy, 1, 1, 0, c_green, alpha);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;buffer_delete(buffer);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_particle_get_data(buffer, flags)",
        "function": "physics_particle_get_data",
        "documentation": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function [buffer_create()](../../buffers/buffer_create.html), and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise _or_ \"|\" to create a single flag value to get the desired information.",
        "return": "Buffer data"
    },
    "audio_resume_all": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause;<br> &nbsp;&nbsp;&nbsp;if global.Pause<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_pause_all();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_resume_all();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_resume_all();",
        "function": "audio_resume_all",
        "documentation": "With this function you can resume all sounds that have been paused previously.",
        "return": "N/A"
    },
    "buffer_load": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to load from."
            }
        ],
        "example": {
            "code": "player_buffer = buffer_load(\"Player_Save.sav\");",
            "description": ""
        },
        "signature": "buffer_load(filename);",
        "function": "buffer_load",
        "documentation": "This function will load the buffer data that was previously saved using the [buffer_save](buffer_save.html) functions into a new buffer. This new buffer is created by the function as a \"grow\" buffer (see [here](buffer_create.html)) with a byte alignment of 1, and the new buffer id is returned. This ID should be stored in a variable and used in all further function calls to this buffer.  \n  \n_**NOTE:** It's important that you remove any dynamically created resources like this from memory when you no longer need them to prevent memory leaks, so when you are finished with the buffer that you have created you should free it up again using [buffer_delete](buffer_delete.html)._",
        "return": "real"
    },
    "ds_queue_dequeue": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the queue to dequeue from."
            }
        ],
        "example": {
            "code": "if !ds_queue_empty(move_queue)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx, yy;<br> &nbsp;&nbsp;&nbsp;xx = ds_queue_dequeue(move_queue);<br> &nbsp;&nbsp;&nbsp;yy = ds_queue_dequeue(move_queue);<br> &nbsp;&nbsp;&nbsp;move_towards_point(xx, yy, 4);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_queue_dequeue(id);",
        "function": "ds_queue_dequeue",
        "documentation": "This function will _dequeue_ the head value off of the ds_queue, removing it from the queue and returning the value to be stored in a variable.",
        "return": "Real or String"
    },
    "ds_stack_push": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to push onto."
            },
            {
                "label": "val",
                "documentation": "The value to push onto the stack."
            },
            {
                "label": "[val2, ... val13]",
                "documentation": "Optional values to be added to the stack."
            }
        ],
        "example": {
            "code": "move_stack = ds_stack_create();<br> ds_stack_push(move_stack, x, y, x, y + 200, x + 200, y + 200, x +200, y);<br>",
            "description": ""
        },
        "signature": "ds_stack_push(id, val [, val2, ... val15]);",
        "function": "ds_stack_push",
        "documentation": "This function will _push_ (add) a value, which can be either a real or a string, onto the top of the stack. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to push multiple values consecutively to the stack in a single call.",
        "return": "N/A"
    },
    "colour_get_blue": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to check"
            }
        ],
        "example": {
            "code": "b_comp = colour_get_blue(c_teal);",
            "description": ""
        },
        "signature": "colour_get_blue(col);",
        "function": "colour_get_blue",
        "documentation": "This function returns the amount of blue used to make the given colour, with the value being between 0 and 255, where 0 is no blue and 255 is all blue. The following image illustrates this: ![](images/get_blue.png)",
        "return": "Real"
    },
    "part_emitter_exists": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system to check for an emitter."
            },
            {
                "label": "ind",
                "documentation": "The index of the emitter to search for."
            }
        ],
        "example": {
            "code": "if part_emitter_exists(sname, p_emit1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_emitter_burst(sname, p_emit1, part_1, 30);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_emitter_exists(ps, ind);",
        "function": "part_emitter_exists",
        "documentation": "With this function you can check to see if the given particle emitter indexed exists in the given system or not. Note that if the variable being checked is an uninitialised variable (that a particle emitter would otherwise have its index assigned to) this will throw an error.",
        "return": "Boolean"
    },
    "draw_skeleton_time": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "animname",
                "documentation": "The name of the animation to get the frame from (a string)."
            },
            {
                "label": "skinname",
                "documentation": "The name of the skin to use for drawing (a string)."
            },
            {
                "label": "time",
                "documentation": "The time-frame to draw the animation at (from 0 to the end duration, in seconds)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite."
            }
        ],
        "example": {
            "code": "var time += delta_time / 1000000;<br> var d = skeleton_animation_get_duration(\"walk\");<br> if time &gt; d time -= d;<br> draw_skeleton_time(sprite_index, \"walk\", \"skin1\", time, x, y, image_xscale, image_yscale, image_angle, c_white);<br>",
            "description": ""
        },
        "signature": "draw_skeleton_time(sprite, animname, skinname, time, x, y, xscale, yscale, rot, colour)",
        "function": "draw_skeleton_time",
        "documentation": "This function will draw the given animation using the given skin at a specific time in the animation. The time value should be between 0 (the beginning) and the end duration of the animation, which you can find using the function [skeleton\\_animation\\_get_duration()](../../sprites/skeletal%20animations/skeleton_animation_get_duration.html). You _can_ set the time value to values higher than the total duration of the animation and the animation will loop back to the beginning, but you run the risk of losing floating point accuracy as the accumulated time gets larger.",
        "return": "N/A"
    },
    "font_add_sprite_ext": {
        "parameters": [
            {
                "label": "spr",
                "documentation": "The sprite to add a font based on."
            },
            {
                "label": "string_map",
                "documentation": "String from which sprite sub-image order is taken."
            },
            {
                "label": "prop",
                "documentation": "Set as proportional font or not."
            },
            {
                "label": "sep",
                "documentation": "The space to leave between each letter."
            }
        ],
        "example": {
            "code": "global.Font = font_add_sprite_ext(spr_CalcFont, \"0123456789+-*/=\", true, 2);<br>",
            "description": ""
        },
        "signature": "font_add_sprite_ext(spr, string_map, prop, sep);",
        "function": "font_add_sprite_ext",
        "documentation": "With this function you can use a \"sprite strip\" (the sprite itself **must** be a sprite asset from the resource tree, or a sprite you have added to the game resources using sprite_add) to create a new font asset, where each sub-image would be an individual symbol or letter. Unlike the normal [font\\_add\\_sprite](font_add_sprite.html) which has a specific order for the sub-images of the sprite, this function will map the sprite sub-images based on the argument \"string_map\" of the function. This argument is a string that you can use to tell _GameMaker Studio 2_ what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of \"AaBbCcDdEeFfGgHh\", your sprite font _must_ have the sub-images ordered in this way. You can define \"space\" as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will _never_ be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.",
        "return": "Real"
    },
    "os_get_info": {
        "parameters": [],
        "example": {
            "code": "os_map = os_get_info();<br> if os_map != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var size, key, i;<br> &nbsp;&nbsp;&nbsp;size = ds_map_size(os_map);<br> &nbsp;&nbsp;&nbsp;key = ds_map_find_first(os_map);<br> &nbsp;&nbsp;&nbsp;for (i = 0; i &lt; size - 1; i++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_data[i] = ds_map_find_value(os_map, key);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key = ds_map_find_next(os_map, key);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(os_map);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_get_info()",
        "function": "os_get_info",
        "documentation": "This function returns a [ds_map](../data_structures/ds%20maps/index.html) with detailed information about the OS that the game is running on. The exact information returned will depend on the OS and the device. Note that the ds_map is not automatically cleared from memory and you should use the [ds\\_map\\_destroy()](../data_structures/ds%20maps/ds_map_destroy.html) function when you no longer need the data it contains.",
        "return": "Real (ds_map index)"
    },
    "display_get_dpi_x": {
        "parameters": [],
        "example": {
            "code": "dpx = display_get_dpi_x();",
            "description": ""
        },
        "signature": "display_get_dpi_x();",
        "function": "display_get_dpi_x",
        "documentation": "Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60 and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.  \n  \nThis function will get the dpi of the device display along the x axis (this value is also dependant on the orientation of the device). Please note that Mac and iOS do not return specific dpi settings but appear to return the same values as the OS, which are not correct (but will have to do) as Apple do not give the correct values.",
        "return": "Real"
    },
    "window_get_caption": {
        "parameters": [],
        "example": {
            "code": "if window_get_caption() != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;window_set_caption(\"\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_get_caption();",
        "function": "window_get_caption",
        "documentation": "This function returns the caption of the window (this is the text that appears on the top of the window, beside its icon) and by default this shows the caption of the room you're currently in.",
        "return": "N/A"
    },
    "debug_event": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The custom debug event string to use."
            }
        ],
        "signature": "debug_event(string)",
        "function": "debug_event",
        "documentation": "This function generates a custom debug event that will be shown in the Graph View of the debugger when a game is being run in [Debug Mode](../../../2_interface/2_extras/debugging.html). If you require messages to be displayed when _not_ in debug mode, then you should be using [show\\_debug\\_message()](show_debug_message.html).",
        "return": "N/A"
    },
    "draw_rectangle_colour": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the rectangle."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the rectangle."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the rectangle."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the rectangle."
            },
            {
                "label": "col1",
                "documentation": "The colour of the top left corner."
            },
            {
                "label": "col2",
                "documentation": "The colour of the top right corner."
            },
            {
                "label": "col3",
                "documentation": "The colour of the bottom right corner."
            },
            {
                "label": "col4",
                "documentation": "The colour of the bottom left corner."
            },
            {
                "label": "outline",
                "documentation": "Whether the rectangle is an outline (true) or filled in (false)."
            }
        ],
        "example": {
            "code": "draw_rectangle_colour(50, 50, 200, 200, c_black, c_white, c_black, c_white, false);",
            "description": ""
        },
        "signature": "draw_rectangle_colour(x1, y1, x2, y2, col1, col2, col3, col4, outline);",
        "function": "draw_rectangle_colour",
        "documentation": "With this function you can draw either an outline of a rectangle or a filled rectangle by defining an area where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html)).",
        "return": "N/A"
    },
    "gpu_get_fog": {
        "parameters": [],
        "example": {
            "code": "var fog_a = gpu_get_fog();<br> fog_a[1] = c_red;<br> gpu_set_fog(fog_a);<br>",
            "description": ""
        },
        "signature": "gpu_get_fog();",
        "function": "gpu_get_fog",
        "documentation": "This function can be used to retrieve the fog settings. The function returns a 4 element 1D array with the following information:",
        "return": "4 element 1D Array (see above for array elements)"
    },
    "draw_text_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "c1",
                "documentation": "The colour for the top left of the drawn text."
            },
            {
                "label": "c2",
                "documentation": "The colour for the top right of the drawn text."
            },
            {
                "label": "c3",
                "documentation": "The colour for the bottom right of the drawn text."
            },
            {
                "label": "c4",
                "documentation": "The colour for the bottom left of the drawn text."
            },
            {
                "label": "alpha",
                "documentation": "The alpha for the text."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> draw_text(100, 100, \"Health\");<br> draw_text_colour(100, 200, string(health), c_lime, c_lime, c_green, c_green, 1);<br>",
            "description": ""
        },
        "signature": "draw_text_colour(x, y, string, c1, c2, c3, c4, alpha);",
        "function": "draw_text_colour",
        "documentation": "This function will draw text in a similar way to [draw_text](draw_text.html) only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead of the base drawing colour and alpha.  \n  \n_**NOTE:** Gradient blending is not available for the HTML5 target unless WebGL is enabled, although you can still set the blending colours and it will blend the font with the first given colour. However all blending in this way creates a duplicate font which is then stored in the cache and used when required, which is far from optimal and if you use multiple colour changes it will slow down your games performance. You can set the font cache size to try and limit this should it be necessary using the function [font\\_set\\_cache_size](../../fonts/font_set_cache_size.html)._",
        "return": "N/A"
    },
    "layer_sprite_destroy": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite to be destroyed"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_Trees\");<br> if layer_sprite_exists(lay_id, global.Asset_spr_trees)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_destroy(lay_id);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_destroy(sprite_element_id)",
        "function": "layer_sprite_destroy",
        "documentation": "",
        "return": "N/A"
    },
    "layer_tilemap_create": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "x",
                "documentation": "The x position of the tilemap in the room"
            },
            {
                "label": "y",
                "documentation": "The y position of the tilemap in the room"
            },
            {
                "label": "tile set",
                "documentation": "The tile set index to be used"
            },
            {
                "label": "width",
                "documentation": "The width tilemap (in cells)"
            },
            {
                "label": "height",
                "documentation": "The height of the tilemap (in cells)"
            }
        ],
        "example": {
            "code": "global.back_layer = layer_create(10000);<br> global.back_tiles = layer_tilemap_create(global.back_layer, 0, 0, tmap_Trees, 16, 32);<br>",
            "description": ""
        },
        "signature": "layer_tilemap_create(layer_id, x, y, tile set, width, height)",
        "function": "layer_tilemap_create",
        "documentation": "",
        "return": "tilemap element ID (Real)"
    },
    "audio_channel_num": {
        "parameters": [
            {
                "label": "num",
                "documentation": "Number of available audio channels (default is 128)."
            }
        ],
        "example": {
            "code": "switch (os_browser)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case browser_not_a_browser:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (os_type)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case os_windows:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case os_macos:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_channel_num(200);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_channel_num(64);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;default:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_channel_num(16);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_channel_num(num);",
        "function": "audio_channel_num",
        "documentation": "With this function you can set how many audio channels are available for playing audio in _GameMaker Studio 2_. What this basically means is that you give the number of simultaneous sounds that can be played at any one time, and if the number exceeds the amount, those sounds with a lower _priority_ are stopped to free up a channel for the sounds with a higher _priority_. You can use this function to optimise your game for devices as the lower the number of channels for audio the better the performance, but bear in mind that this may also cause noticeable cut off of certain sounds if many are played at once.",
        "return": "N/A"
    },
    "audio_sound_get_track_position": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to get the play position of."
            }
        ],
        "example": {
            "code": "if audio_sound_get_track_position(global.Music) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_sound_set_track_position(global.Music, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sound_get_track_position(index);",
        "function": "audio_sound_get_track_position",
        "documentation": "This function will get the position (in seconds) within the sound file for the sound to play from. The sound can only be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions).",
        "return": "Real"
    },
    "camera_get_view_target": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var target = camera_get_view_target(view_camera[0]);<br> if target != obj_Player<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_view_target(view_camera[0], obj_Player);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_view_target(camera_id)",
        "function": "camera_get_view_target",
        "documentation": "This function can be used to retrieve the follow target of the given camera. The return value can be an object index, an instance ID or -1 if no follow target has been set.",
        "return": "Object Index, Instance ID, or -1 if no target is set."
    },
    "ds_queue_size": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if !ds_queue_empty(control_queue)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;num = ds_queue_size(control_queue);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_queue_size(id);",
        "function": "ds_queue_size",
        "documentation": "This function will return the \"size\" of the queue, ie: the number of items that have been queued onto it.",
        "return": "Real"
    },
    "ds_stack_size": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if !ds_stack_empty(control_stack)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;num = ds_stack_size(control_stack);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_stack_size(id);",
        "function": "ds_stack_size",
        "documentation": "This function will return the \"size\" of the stack, ie: the number of items that have been pushed onto it.",
        "return": "Real"
    },
    "get_save_filename_ext": {
        "parameters": [
            {
                "label": "filter",
                "documentation": "The file type filter and/or name."
            },
            {
                "label": "fname",
                "documentation": "The suggested filename to use."
            },
            {
                "label": "directory",
                "documentation": "The directory to start the search from."
            },
            {
                "label": "caption",
                "documentation": "The caption for the window."
            }
        ],
        "example": {
            "code": "var file;<br> file = get_save_filename_ext(\"screenshot|*.png\", \"\", working_directory, \"Save a level here\");<br> if file != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;screen_save(file);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "get_save_filename_ext(filter, fname, directory, caption);",
        "function": "get_save_filename_ext",
        "documentation": "This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form \"_name1|mask1|name2|mask2|..._\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"_bitmaps|*.bmp;*.wmf_\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does **not** save the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.  \n  \nAn important thing to note when using this function is that it grants you certain permissions for that file, for the duration of your game. So, once you get the file path from the user, you can access it again and again without having to ask, and the permission applies to reading _and_ writing equally.  \n  \n_**NOTE:** This function is only valid on the Windows and macOS targets._",
        "return": "String."
    },
    "sprite_set_speed": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to get the animation type of"
            }
        ],
        "example": {
            "code": "sprite_set_speed(sprite_index, 10, spritespeed_framespersecond);",
            "description": ""
        },
        "signature": "sprite_set_speed(index, speed, type)",
        "function": "sprite_set_speed",
        "documentation": "This function can be used to set the base animation speed and type as for the sprite resource. This is normally set in the [Sprite Editor](../../../2_interface/1_editors/sprites.html), but there may be moments when you are required to set this manually for a given sprite resource. You need to supply the sprite index to set, the animation speed and the type of animation speed to apply. The animation speed type can be any one of the following constants:",
        "return": "Constant (see above)"
    },
    "audio_sync_group_debug": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to debug, or -1 to switch off the debugging."
            }
        ],
        "example": {
            "code": "if (debug_mode)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_sync_group_debug(sg);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_sync_group_debug(-1);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "audio_sync_group_debug(group_index);",
        "function": "audio_sync_group_debug",
        "documentation": "This function can be used to display debug information about any given sync group (the group index is the value returned when the group was created using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html)). You can call the function with a value of -1 to switch off the overlay.",
        "return": "N/A"
    },
    "mouse_y": {
        "parameters": [],
        "example": {
            "code": "y = median(64, mouse_y, room_height - 64);",
            "description": ""
        },
        "signature": "mouse_y;",
        "function": "mouse_y;",
        "documentation": "This **read-only** variable returns the current y axis position of the mouse within the room.",
        "return": "Real"
    },
    "draw_ellipse_colour": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the ellipse."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the ellipse."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the ellipse."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the ellipse."
            },
            {
                "label": "col1",
                "documentation": "The colour of the center."
            },
            {
                "label": "col2",
                "documentation": "The colour of the edge."
            },
            {
                "label": "outline",
                "documentation": "Whether the ellipse is an outline (true) or filled in (false)."
            }
        ],
        "example": {
            "code": "draw_ellipse_colour(50, 50, 200, 100, c_black, c_white, false);",
            "description": ""
        },
        "signature": "draw_ellipse_colour(x1, y1, x2, y2, col1, col2, outline);",
        "function": "draw_ellipse_colour",
        "documentation": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. If it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html)). You can define how precise the drawing is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html).",
        "return": "N/A"
    },
    "file_text_eof": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to check."
            }
        ],
        "example": {
            "code": "var num = 0;<br> file = file_text_open_read(working_directory + \"Game_Data.txt\");<br> while (!file_text_eof(file))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;str[num++] = file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_eof(fileid);",
        "function": "file_text_eof",
        "documentation": "This function returns true when the end of a given opened text file has been reached or false if not.",
        "return": "Boolean"
    },
    "game_load_buffer": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer id to load from."
            }
        ],
        "signature": "game_load_buffer(buffer);",
        "function": "game_load_buffer",
        "documentation": "With this function you can load a game state that has been saved previously. The game is loaded from a previously created \"grow\" buffer (see [Buffers](../buffers/index.html)) and the buffer must have had a game state saved to it using [game\\_save\\_buffer](game_save_buffer.html) function.",
        "return": "N/A"
    },
    "audio_is_paused": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to check."
            }
        ],
        "example": {
            "code": "if audio_is_paused(snd_Waterfall)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_resume_sound(snd_Waterfall);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_is_paused(index);",
        "function": "audio_is_paused",
        "documentation": "This function will check the given sound to see if it is currently paused. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset, in which case _all_ instances of the given sound will be checked and if any of them are paused the function will return true otherwise it will return false.",
        "return": "Boolean"
    },
    "buffer_base64_decode": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The base64 encoded string to decode"
            }
        ],
        "example": {
            "code": "ini_open(\"Save.ini\");<br> buff = buffer_base64_decode(ini_read_string(\"Save\", \"Slot1\", \"\"));<br> ini_close();",
            "description": ""
        },
        "signature": "buffer_base64_decode(string);",
        "function": "buffer_base64_decode",
        "documentation": "With this function you can decode a base64 encoded string (created using the [buffer\\_base64\\_encode](buffer_base64_encode.html) function) into a buffer. This function will create the buffer (as a 1 byte aligned \"grow\" buffer\") and return the unique index for the buffer which should be used in all further function calls.  \n  \n_**NOTE:** It's important that you remove any dynamically created resources like this from memory when you no longer need them to prevent memory leaks, so when you are finished with the buffer that you have created you should free it up again using [buffer_delete](buffer_delete.html)._",
        "return": "Real"
    },
    "draw_triangle_colour": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the triangle's first corner."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the triangle's first corner."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the triangle's second corner."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the triangle's second corner."
            },
            {
                "label": "x3",
                "documentation": "The x coordinate of the triangle's third corner."
            },
            {
                "label": "y3",
                "documentation": "The y coordinate of the triangle's third corner."
            },
            {
                "label": "col1",
                "documentation": "The colour of the first corner."
            },
            {
                "label": "col2",
                "documentation": "The colour of the second corner."
            },
            {
                "label": "col3",
                "documentation": "The colour of the third corner."
            },
            {
                "label": "outline",
                "documentation": "Whether the triangle is an outline (true) or filled in (false)."
            }
        ],
        "example": {
            "code": "draw_triangle_colour(200, 200, 300, 200, 200, 300, c_red, c_blue, c_blue, false);",
            "description": ""
        },
        "signature": "draw_triangle_colour(x1, y1, x2, y2, x3, y3, col1, col2, col3, outline);",
        "function": "draw_triangle_colour",
        "documentation": "With this function you can draw either an outline of a triangle or a filled triangle. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html)).",
        "return": "N/A"
    },
    "physics_particle_set_radius": {
        "parameters": [
            {
                "label": "radius",
                "documentation": "The radius (in pixels) of the particle fixture."
            }
        ],
        "example": {
            "code": "physics_particle_set_radius(15);<br> physics_particle_set_density(0.5);<br> physics_particle_set_damping(1);<br> physics_particle_set_gravity_scale(1);<br>",
            "description": ""
        },
        "signature": "physics_particle_set_radius(radius)",
        "function": "physics_particle_set_radius",
        "documentation": "With this function you can set the radius (in pixels) for the particles in a physics simulation. This function is _global_ in scope, in that it will change the radius not just for new particles created after the change, but also for those already present in the simulation.",
        "return": "N/A"
    },
    "layer_background_get_stretch": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_stretch(back_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_stretch(back_id, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_stretch(background_element_id);",
        "function": " layer_background_get_stretch",
        "documentation": "",
        "return": "Boolean"
    },
    "buffer_delete": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to delete."
            }
        ],
        "example": {
            "code": "buffer_delete(player_buffer);<br>",
            "description": ""
        },
        "signature": "buffer_delete(buffer)",
        "function": "buffer_delete",
        "documentation": "With this function you can delete a buffer previously have created using the function [buffer_create](buffer_create.html) from memory, releasing the resources used to create it and removing any data that it may currently contain.  \n  \n_**NOTE:** It's important to always remove any dynamically created resources from memory when you no longer need them to prevent memory leaks._",
        "return": "N/A"
    },
    "ds_grid_get": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x",
                "documentation": "The x position of the cell you want to find the value of."
            },
            {
                "label": "y",
                "documentation": "The y position of the cell you want to find the value of."
            }
        ],
        "example": {
            "code": "var xx, yy;<br> xx = irandom(ds_grid_width(grid) - 1);<br> yy = irandom(ds_grid_height(grid) - 1);<br> val = ds_grid_get(grid, xx, yy)<br>",
            "description": ""
        },
        "signature": "ds_grid_get(index, x, y);",
        "function": "ds_grid_get",
        "documentation": "This function can be used to get the value (either a real number or a string) from any cell within the given ds_grid. If you pass invalid grid coordinates to the function, then the value returned will be 0.",
        "return": "Real or String"
    },
    "ds_list_find_value": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to use."
            },
            {
                "label": "pos",
                "documentation": "The position to look at, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1."
            }
        ],
        "example": {
            "code": "val = ds_list_find_value(list, ds_list_size(list) - 1);",
            "description": ""
        },
        "signature": "ds_list_find_value(id, pos);",
        "function": "ds_list_find_value",
        "documentation": "With this function you can check the given list position and the value held within the list for that position will be returned.  \n  \n_**NOTE:** If you give a position that is outside of the given list size (ie: position 11 in a 10 value list) then the function will return <undefined>. You should always check this using the [is_undefined()](../../../3_gml_overview/checking_data_types/is_undefined.html) function._",
        "return": "Real, String or Undefined"
    },
    "draw_text_transformed": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scale (default 1)."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scale(default 1)."
            },
            {
                "label": "angle",
                "documentation": "The angle of the text."
            }
        ],
        "example": {
            "code": "draw_set_halign(fa_center);<br> draw_set_valign(fa_middle);<br> image_angle += 1;<br> draw_text_transformed(room_width / 2, room_height / 2, \"GAME OVER!\", 2, 2, image_angle);<br>",
            "description": ""
        },
        "signature": "draw_text_transformed(x, y, string, xscale, yscale, angle);",
        "function": "draw_text_transformed",
        "documentation": "This function will draw text in a similar way to [draw_text](draw_text.html) only now you can choose to scale the text along the horizontal or vertical axis (effectively stretching or shrinking it) and also have _GameMaker Studio 2_ draw it at an angle (where 0 is normal and every degree over 0 rotates the text anti-clockwise).",
        "return": "N/A"
    },
    "object_get_physics": {
        "parameters": [],
        "example": {
            "code": "if object_get_physics(object_index) &nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;phy_active = true; &nbsp;&nbsp;&nbsp;}",
            "description": ""
        },
        "signature": "object_get_physics(obj);",
        "function": "object_get_physics",
        "documentation": "This function will tell you whether the object you are checking has been flagged as \"physics enabled\", returning true, or not, returning false.",
        "return": "Boolean"
    },
    "room_last": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"Q\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto(room_last);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_last;",
        "function": "room_last;",
        "documentation": "",
        "return": "Index"
    },
    "string_height_ext": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to measure the height of."
            },
            {
                "label": "sep",
                "documentation": "The distance in pixels between lines of text as if the string was being drawn."
            },
            {
                "label": "w",
                "documentation": "The maximum width (in pixels) of the string before a line break as if the string was bring drawn."
            }
        ],
        "example": {
            "code": "var hh;<br> hh = string_height_ext(str_Story_Text[1], -1, 100);<br> draw_text_ext(32, 32, str_Story_Text[1], -1, 100);<br> draw_text_ext(32, 32 + hh, str_Story_Text[2], -1, 100);<br>",
            "description": ""
        },
        "signature": "string_height_ext(string, sep, w);",
        "function": "string_height_ext",
        "documentation": "This function will return the height (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy for calculating distances between text elements based on the tallest of the letters that make up the string as well as the actual string length itself when spread over several lines as it would be drawn with [draw\\_text\\_ext](../drawing/text/draw_text_ext.html) using the currently defined font. Separation and width can be set to -1 to get the default spacing.",
        "return": "Real"
    },
    "audio_listener_set_orientation": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The listener to set the orientation of."
            },
            {
                "label": "lookat_x",
                "documentation": "The x look vector (default 0)."
            },
            {
                "label": "lookat_y",
                "documentation": "The y look vector (default 0)."
            },
            {
                "label": "lookat_z",
                "documentation": "The z look vector (default -1)."
            },
            {
                "label": "up_x",
                "documentation": "The x up vector (default 0)."
            },
            {
                "label": "up_y",
                "documentation": "The y up vector (default 1)."
            },
            {
                "label": "up_z",
                "documentation": "The z up vector (default 0)."
            }
        ],
        "example": {
            "code": "var _vmat = camera_get_view_mat(view_camera[0]);<br> audio_listener_set_position(global.Player_Listener, _vmat[0], _vmat[1], _vmat[2]);<br> audio_listener_set_orientation(info[? \"index\"], _vmat[3], _vmat[4], _vmat[5], _vmat[6], _vmat[7], _vmat[8]);<br>",
            "description": ""
        },
        "signature": "audio_listener_set_orientation(index, lookat_x, lookat_y, lookat_z, up_x, up_y, up_z);",
        "function": "audio_listener_set_orientation",
        "documentation": "With this function you can change the orientation of the given _listener_ within the 3D audio space. The default listener index is 0, but you can use the function [audio\\_get\\_listener_info](audio_get_listener_info.html) to get the different indices available for the target platform.",
        "return": "N/A"
    },
    "buffer_async_group_begin": {
        "parameters": [
            {
                "label": "groupname",
                "documentation": "The name of the group (as a string)."
            }
        ],
        "example": {
            "code": "buffer_async_group_begin(\"SaveGame\");<br> save1 = buffer_save_async(buff1, \"Player_Save1.sav\", 0, 16384);<br> save2 = buffer_save_async(buff2, \"Player_Save2.sav\", 0, 16384);<br> save3 = buffer_save_async(buff3, \"Player_Save3.sav\", 0, 16384);<br> save4 = buffer_save_async(buff4, \"Player_Save4.sav\", 0, 16384);<br> buffer_async_group_end();<br>",
            "description": ""
        },
        "signature": "buffer_async_group_begin(groupname);",
        "function": "buffer_async_group_begin",
        "documentation": "This function is called when you want to begin the saving out of multiple buffers to multiple files. The \"groupname\" is a string and will be used as the directory name for where the files will be saved, and should be used as part of the file path when loading the files back into the IDE later (using any of the [buffer_load](buffer_load.html) functions). This function is _only_ for use with the [buffer\\_save\\_async()](buffer_save_async.html) function and you must also finish the save definition by calling [buffer\\_async\\_group_end()](buffer_async_group_end.html) function otherwise the files will not be saved out.  \n  \nNote that for the console platforms (like PS4 for example), the \"groupname\" will be used as the save slot description, and using this function can help you avoid having the UI show for every file that is being saved out.",
        "return": "N/A"
    },
    "fps_real": {
        "parameters": [],
        "example": {
            "code": "if debug_mode<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_text(32, 32, \"FPS = \" + string(fps_real));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "fps_real",
        "function": "fps_real",
        "documentation": "In _GameMaker Studio 2_ there are two main ways that can be used to tell the speed at which your game runs. The [game speed](../game/game_get_speed.html) (as specified in the Game Options) and the fps (frames per second). These values are often confused, but basically one is the number of game steps that _GameMaker Studio 2_ is supposed to be completing in a second (game speed), while the other is the number of CPU steps that _GameMaker Studio 2_ is actually completing in a second (the real fps), and this value is generally much higher than the game speed, but will drop as your game gets more complex and uses more processing power to maintain the set room speed.",
        "return": "Real"
    },
    "part_system_destroy": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to destroy."
            }
        ],
        "example": {
            "code": "mysystem = part_system_create();<br> part_system_destroy( mysystem );",
            "description": ""
        },
        "signature": "part_system_destroy(ind);",
        "function": "part_system_destroy",
        "documentation": "With this function you can destroy a given particles system and remove it from memory. This should always be called when the system is no longer needed, like at the end of a room, or in the destroy event of an instance, otherwise you could end up with particles appearing in later rooms and no way to remove them as well as a memory leak which will eventually crash your game.  \n  \n_**NOTE:** This function will also destroy and remove any emitters that may have been created and associated with the system being destroyed._",
        "return": "N/A"
    },
    "base64_decode": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to decode."
            }
        ],
        "example": {
            "code": "var str, file;<br> str = base64_encode(game_data);<br> file = file_text_open_read(\"save.txt\");<br> str = file_text_read_string(file); level_data = base64_decode(str);<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "base64_decode(string)",
        "function": "base64_decode",
        "documentation": "This function will convert a string encoded previously using base64 format, into standard text. Base64 is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye.",
        "return": "String"
    },
    "file_bin_size": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to get the size of."
            }
        ],
        "example": {
            "code": "file = file_bin_open('myfile.bin', 2);<br> size = file_bin_size(file);<br> file_bin_close(file);<br>",
            "description": ""
        },
        "signature": "file_bin_size(binfile);",
        "function": "file_bin_size",
        "documentation": "This function will return the size (in bytes) of a file that has been opened for reading and/or writing. The File ID is the value returned by the function [file\\_bin\\_open()](file_bin_open.html).",
        "return": "Real"
    },
    "matrix_stack_set": {
        "parameters": [
            {
                "label": "matrix",
                "documentation": "The matrix index to use."
            }
        ],
        "example": {
            "code": "var m = matrix_build(x, y, 0, 0, 0, 0, 1, 1, 1);<br> matrix_stack_set(m);<br>",
            "description": ""
        },
        "signature": "matrix_stack_set(matrix);",
        "function": "matrix_stack_set",
        "documentation": "This function overwrites the current top of the matrix stack with the specified matrix.",
        "return": "N/A"
    },
    "layer_background_get_yscale": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_yscale(back_id) != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_yscale(back_id, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_yscale(background_element_id);",
        "function": " layer_background_get_yscale",
        "documentation": "",
        "return": "Real"
    },
    "steam_ugc_request_item_details": {
        "parameters": [
            {
                "label": "published_file_id",
                "documentation": "The unique file ID for the UGC to be checked."
            },
            {
                "label": "max_age_seconds",
                "documentation": "The \"age\" of the data to check (recommended 30 - 60 seconds)."
            }
        ],
        "signature": "steam_ugc_request_item_details(published_file_id, max_age_seconds);",
        "function": "steam_ugc_request_item_details",
        "documentation": "This function can be used to retrieve information about a given file ID. You give the file ID and supply a maximum age for checking (see the Steam docs for more information), then the function returns a unique async ID value which can be used to check the details correctly in the Steam Async event. This event will have the async_load DS map which will be populated with the following key/value pairs:",
        "return": "Async ID"
    },
    "mouse_check_button_pressed": {
        "parameters": [
            {
                "label": "numb",
                "documentation": "Which mouse button constant to check for."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score += 50;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mouse_check_button_pressed(numb);",
        "function": "mouse_check_button_pressed",
        "documentation": "This function will return true if the mouse button being checked has been pressed or false if it has not. This function will only be triggered _once_ for any mouse button when it is first pressed and to trigger it again the button will need to have been released and pressed again. Note that it will be considered triggered for the duration of the step, and for all instances that have any mouse events or that use this same function.",
        "return": "Boolean"
    },
    "gravity_direction": {
        "parameters": [],
        "example": {
            "code": "if place_meeting(x, y, obj_switch)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gravity_direction += 180;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gravity_direction;",
        "function": "gravity_direction;",
        "documentation": "",
        "return": "Real"
    },
    "yprevious": {
        "parameters": [],
        "example": {
            "code": "if x != xprevious || y != yprevious<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;moved = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "yprevious;",
        "function": "yprevious;",
        "documentation": "This built-in variable returns the _previous_ y position for the instance. This variable will be set to the current x position just before the start of the **begin step event** but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.",
        "return": "Real"
    },
    "mp_linear_step": {
        "parameters": [
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "checkall",
                "documentation": "Whether to check all instances (true) or just solid ones (false)."
            }
        ],
        "example": {
            "code": "if mp_linear_step(mouse_x, mouse_y, 5, 0)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(x, y, \"Effects\", obj_Explosion);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_linear_step(xgoal, ygoal, stepsize, checkall);",
        "function": "mp_linear_step",
        "documentation": "With this function you tell an instance to take a \"step\" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like [move\\_towards\\_point](../movement/move_towards_point.html). The stepsize is also the distance \"ahead\" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with _any_ instance or only those that are flagged as solid.  \n  \n_**Note:** This function does not try to make detours if it meets an obstacle, it simply fails and stops moving. The function will return whether it has reached the goal position (true) or if it has failed (false)._",
        "return": "Boolean"
    },
    "physics_apply_torque": {
        "parameters": [
            {
                "label": "torque",
                "documentation": "The torque (in Newton metres) to be applied"
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_left) physics_apply_torque(-100);",
            "description": ""
        },
        "signature": "physics_apply_torque(torque)",
        "function": "physics_apply_torque",
        "documentation": "When we talk about torque, we are generally talking about the tendency of a force or impulse to rotate an instance about its centre of mass, but in _GameMaker Studio 2_ you can also apply torque independently to an instance, causing it to rotate in a given direction. How much torque you apply to get the desired rotation all depends on the size and density of the fixture you assign to your instance, as both these properties go towards defining its mass, which defines its inertia, which affects torque! The general rule of thumb is that if an instance has a lot of inertia, you will need a lot of torque to get it to start rotating. It should also be noted that other factors like gravity and collisions can also affect the torque of an instance. Here is an image to help explain:  \n  \n![](images/physics_apply_torque_image.png)",
        "return": "N/A"
    },
    "physics_joint_prismatic_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "w_anchor_x",
                "documentation": "The x coordinate where the joint is anchored, within the game world"
            },
            {
                "label": "w_anchor_y",
                "documentation": "The y coordinate where the joint is anchored, within the game world"
            },
            {
                "label": "w_axis_x",
                "documentation": "The x component of the axis vector"
            },
            {
                "label": "w_axis_y",
                "documentation": "The y component of the axis vector"
            },
            {
                "label": "lower_trans_limit",
                "documentation": "The lower permitted limit for the joint movement"
            },
            {
                "label": "upper_trans_limit",
                "documentation": "The lower permitted limit for the joint movement"
            },
            {
                "label": "limit",
                "documentation": "Whether to limit the movement of the joint (true) or not (false)"
            },
            {
                "label": "max_motor_force",
                "documentation": "Sets the maximum movement speed for the motor"
            },
            {
                "label": "motor_speed",
                "documentation": "This is the speed at which the motor should move"
            },
            {
                "label": "motor",
                "documentation": "Whether the motor should be active (true) or not (false)"
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var mainFixture, o_id;<br> mainFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br> o_id = instance_create_layer(x+25, y, \"Instances\", obj_Piston);<br> physics_fixture_bind(mainFixture, id);<br> physics_fixture_bind(mainFixture, o_id);<br> physics_joint_prismatic_create(id, o_id, x, y, 0, 10, 0, 0, 0, 5, 0, 1, 1);<br> physics_fixture_delete(mainFixture);<br>",
            "description": ""
        },
        "signature": "physics_joint_prismatic_create(inst1, inst2, w_anchor_x, w_anchor_y, w_axis_x, w_axis_x, lower_trans_limit, upper_trans_limit, limit, max_motor_force, motor_speed, motor, col)",
        "function": "physics_joint_prismatic_create",
        "documentation": "Like a revolute joint, the prismatic joint only has one degree of freedom, but with this joint it is directional relative to an axis rather than rotational and actually prevents any form of rotation. Here is an image to help you visualise how this works:  \n  \n![](images/prismatic_joint_image_1.png)",
        "return": "index of the joint"
    },
    "gamepad_button_check_released": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "button",
                "documentation": "Which gamepad button constant to check for."
            }
        ],
        "example": {
            "code": "if gamepad_button_check_released(0, gp_select)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound(snd_Button, 0, false);<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_button_check_released(device, button);",
        "function": "gamepad_button_check_released",
        "documentation": "This function will return true or false depending on whether the given gamepad button is detected as having been released or not. Note that this function will only trigger _once_ for the button the moment it has been released. For it to trigger again the button must first be pressed and then released once more.",
        "return": "Boolean"
    },
    "gpu_get_zwriteenable": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_zwriteenable() == false<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_zwriteenable(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_zwriteenable();",
        "function": "gpu_get_zwriteenable",
        "documentation": "This function can be used to retrieve whether z-writing is enabled (the function returns true) or not (the function returns false). The default value is that z-writing is _enabled_, so the function will return true.",
        "return": "Boolean"
    },
    "gpu_get_tex_max_mip": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_tex_max_mip() != 4<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_mip(4);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_max_mip();",
        "function": "gpu_get_tex_max_mip",
        "documentation": "With this function you can get the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
        "return": "Real (default: 16)"
    },
    "get_open_filename": {
        "parameters": [
            {
                "label": "filter",
                "documentation": "The file type filter and/or name."
            },
            {
                "label": "fname",
                "documentation": "The suggested filename to use."
            }
        ],
        "example": {
            "code": "var file;<br> file = get_open_filename(\"text file|*.txt\", \"\");<br> if file != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_text_open_read(file);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "get_open_filename(filter, fname);",
        "function": "get_open_filename",
        "documentation": "This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form \"_name1|mask1|name2|mask2|..._\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"_bitmaps|*.bmp;*.wmf_\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does **not** open the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned.  \n  \nAn important thing to note when using this function is that it grants you certain permissions for that file, for the duration of your game. So, once you get the file path from the user, you can access it again and again without having to ask. However, since this function is for reading a file, the permissions granted are _only for reading_ and saving will not be permitted by the OS. Should you need to read and write to the file, you can get permission using the function [get\\_save\\_filename](get_save_filename.html).  \n  \n_**NOTE:** This function is only valid on the Windows and macOS targets._",
        "return": "String."
    },
    "timeline_clear": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the time line to clear."
            }
        ],
        "example": {
            "code": "if timeline_position &gt; 200<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_clear(global.tl);<br> &nbsp;&nbsp;&nbsp;timeline_index = -1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_clear(ind);",
        "function": "timeline_clear",
        "documentation": "With this function you can clear a specific time line of \"moments\", removing all codes and actions for that time line and leaving it empty.",
        "return": "N/A"
    },
    "audio_emitter_pitch": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to change."
            },
            {
                "label": "pitch",
                "documentation": "The pitch multiplier (default 1)."
            }
        ],
        "example": {
            "code": "switch (gear)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 1: audio_emitter_pitch(s_emit, 0.8); break;<br> &nbsp;&nbsp;&nbsp;case 2: audio_emitter_pitch(s_emit, 0.9); break;<br> &nbsp;&nbsp;&nbsp;case 3: audio_emitter_pitch(s_emit, 0.95); break;<br> &nbsp;&nbsp;&nbsp;case 4: audio_emitter_pitch(s_emit, 1); break;<br> &nbsp;&nbsp;&nbsp;case 5: audio_emitter_pitch(s_emit, 1.2); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_pitch(emitter, pitch);",
        "function": "audio_emitter_pitch",
        "documentation": "This function can be used to change the pitch of all sounds emitted from the given emitter. It is a _pitch multiplier_, in that the input value multiplies the current pitch by that amount, so the default value of 1 is no pitch change, while a value of less than 1 will lower the pitch and greater than 1 will raise the pitch. It is best to use small increments for this function as any value under 0 or over 5 may not be audible anyway.",
        "return": "N/A"
    },
    "buffer_create": {
        "parameters": [
            {
                "label": "size",
                "documentation": "The size (in bytes) of the buffer."
            },
            {
                "label": "type",
                "documentation": "The type of buffer to create (see the constants list below)."
            },
            {
                "label": "alignment",
                "documentation": "The byte alignment for the buffer"
            }
        ],
        "example": {
            "code": "player_buffer = buffer_create(16384, buffer_fixed, 2);<br>",
            "description": ""
        },
        "signature": "buffer_create(size, type, alignment)",
        "function": "buffer_create",
        "documentation": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique _buffer id_ that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the [buffer_write](buffer_write.html) function, with the following constants being used to define the buffer type:",
        "return": "Real"
    },
    "window_view_mouse_get_x": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the view to compare the mouse position to."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx, yy;<br> &nbsp;&nbsp;&nbsp;xx = window_view_mouse_get_x(0);<br> &nbsp;&nbsp;&nbsp;yy = window_view_mouse_get_y(0);<br> &nbsp;&nbsp;&nbsp;if xx &gt; 0 &amp;&amp; xx &lt; 32 &amp;&amp; yy &gt; 0 &amp;&amp; yy &lt; 32<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b_press[0] = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_view_mouse_get_x( id );",
        "function": "window_view_mouse_get_x",
        "documentation": "This function will return the mouse x position relative to the view selected.",
        "return": "Real"
    },
    "ds_queue_enqueue": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the queue to add to."
            },
            {
                "label": "val",
                "documentation": "The value to add to the queue."
            },
            {
                "label": "[val2, ... val15]",
                "documentation": "Optional values to be added to the queue."
            }
        ],
        "example": {
            "code": "move_queue = ds_queue_create();<br> ds_queue_enqueue(move_queue, x + 200);<br> ds_queue_enqueue(move_queue, y);<br> ds_queue_enqueue(move_queue, x + 200);<br> ds_queue_enqueue(move_queue, y + 200);<br> ds_queue_enqueue(move_queue, x);<br> ds_queue_enqueue(move_queue, y + 200);<br> ds_queue_enqueue(move_queue, x);<br> ds_queue_enqueue(move_queue, y);<br>",
            "description": ""
        },
        "signature": "ds_queue_enqueue(id, val [, val2, ... val15]);",
        "function": "ds_queue_enqueue",
        "documentation": "This function will add a value (real or string) onto the tail of the ds_queue. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to add multiple values consecutively to the tail of the queue in a single call.",
        "return": "N/A"
    },
    "draw_flush": {
        "parameters": [],
        "example": {
            "code": "draw_flush();<br>",
            "description": ""
        },
        "signature": "draw_flush();",
        "function": "draw_flush",
        "documentation": "With this function you can flush the entire draw pipeline. This is a **debug only** function and in general _it should not be used_ unless indicated by a member of the YoYo Games Support staff, as indiscriminate use will cause serious performance issues with your game.",
        "return": "N/A"
    },
    "part_type_colour_hsv": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "hmin",
                "documentation": "The minimum the final colour's hue component can be."
            },
            {
                "label": "hmax",
                "documentation": "The maximum the final colour's hue component can be."
            },
            {
                "label": "smin",
                "documentation": "The minimum the final colour's saturation component can be."
            },
            {
                "label": "smax",
                "documentation": "The maximum the final colour's saturation component can be."
            },
            {
                "label": "vmin",
                "documentation": "The minimum the final colour's value component can be."
            },
            {
                "label": "vmax",
                "documentation": "The maximum the final colour's value component can be."
            }
        ],
        "example": {
            "code": "part_type_hsv(global.Stars, 0, 255, 0, 255, 255, 255 );",
            "description": ""
        },
        "signature": "part_type_colour_hsv(ind, hmin, hmax, smin, smax, vmin, vmax);",
        "function": "part_type_colour_hsv",
        "documentation": "With this function you can set a hue, saturation and value range for all particles of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. In this way you can create particles of the same hue but different saturations, or of different hues but the same value (luminosity) etc... All values must be between 0 and 255.",
        "return": "N/A"
    },
    "font_replace_sprite_ext": {
        "parameters": [
            {
                "label": "font",
                "documentation": "The font to replace."
            },
            {
                "label": "spr",
                "documentation": "The sprite to add a font based on."
            },
            {
                "label": "string_map",
                "documentation": "String from which sprite sub-image order is taken."
            },
            {
                "label": "prop",
                "documentation": "Set as proportional font or not."
            },
            {
                "label": "sep",
                "documentation": "The space to leave between each letter."
            }
        ],
        "example": {
            "code": "font_replace_sprite_ext(global.Font, spr_CalcFont, \"0123456789+-*/=\", true, 2);<br>",
            "description": ""
        },
        "signature": "font_replace_sprite_ext(font, spr, string_map, prop, sep);",
        "function": "font_replace_sprite_ext",
        "documentation": "This function will replace a sprite font that you created previously using the function [font\\_add\\_sprite_ext](font_add_sprite_ext.html). It uses a \"sprite strip\", where each sub-image is be an individual symbol or letter, and the images are mapped to letters based on the argument \"string_map\" of the function. This argument is a string that you can use to tell _GameMaker Studio 2_ what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of \"AaBbCcDdEeFfGgHh\", your sprite font _must_ have the sub-images ordered in this way.",
        "return": "N/A"
    },
    "date_days_in_month": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to use."
            }
        ],
        "example": {
            "code": "days = date_days_in_month(date_current_datetime());",
            "description": ""
        },
        "signature": "date_days_in_month(date);",
        "function": "date_days_in_month",
        "documentation": "With this function you can get the number of days that the given month has, either 28, 29, 30 or 31.",
        "return": "Real"
    },
    "move_contact_all": {
        "parameters": [
            {
                "label": "dir",
                "documentation": "The direction to move in."
            },
            {
                "label": "maxdist",
                "documentation": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
            }
        ],
        "example": {
            "code": "if !place_meeting(x, y + 1, all)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;move_contact_all(270, -1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "move_contact_all(dir, maxdist);",
        "function": "move_contact_all",
        "documentation": "This function will move the instance running the code a set number of pixels in the specified direction until it meets _any_ other instance with a valid mask. You can use -1 or 0 for the maxdist being a default 1000px, ie: _GameMaker Studio 2_ will move the instance continually up 1000 pixels until it is out of collision.",
        "return": "N/A"
    },
    "layer_background_vtiled": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "visible",
                "documentation": "The vertical tiling toggle, which can be true or false"
            }
        ],
        "example": {
            "code": "var back = layer_background_get_id(layer);<br> if !layer_background_get_htiled(back) || !layer_background_get_vtiled(back)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_htiled(back, true);<br> &nbsp;&nbsp;&nbsp;layer_background_vtiled(back, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_background_vtiled(background_element_id, tiled);",
        "function": "layer_background_vtiled",
        "documentation": "",
        "return": "N/A"
    },
    "string_set_byte_at": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to change the byte of."
            },
            {
                "label": "pos",
                "documentation": "The position within the string (starting at 1) to change the byte of."
            },
            {
                "label": "byte",
                "documentation": "The new byte value."
            }
        ],
        "example": {
            "code": "str = string_set_byte_at(\"hello\", 2, 97);<br>",
            "description": ""
        },
        "signature": "string_set_byte_at(str, pos, byte);",
        "function": "string_set_byte_at",
        "documentation": "This function sets a byte directly in a string (based on the UTF8 format) and returns a copy of the string with the changes.",
        "return": "String"
    },
    "camera_get_view_speed_x": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var xs = camera_get_view_speed_x(view_camera[0]);<br> var ys = camera_get_view_speed_y(view_camera[0]);<br> if xs != 5 || ys != 5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_view_speed(view_camera[0], 5, 5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_view_speed_x(camera_id)",
        "function": "camera_get_view_speed_x",
        "documentation": "This function can be used to retrieve the movement speed of the given camera along the x axis (horizontal movement). The return value will be in pixels per game frame.",
        "return": "Real"
    },
    "gamepad_is_supported": {
        "parameters": [],
        "example": {
            "code": "global.GP = gamepad_is_supported();<br>",
            "description": ""
        },
        "signature": "gamepad_is_supported();",
        "function": "gamepad_is_supported",
        "documentation": "With this function you can find out whether the target platform supports game pads (returns true) or not (returns false).",
        "return": "Boolean"
    },
    "ds_grid_get_disk_mean": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_disk_mean(grid, 5, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_disk_mean(index, xm, ym, r);",
        "function": "ds_grid_get_disk_mean",
        "documentation": "This function can be used to find the mean value for all the cells found within the defined disk area of a grid (all cell values are added together and then divided by the total number of cells that make up the disk), as shown in the image below: ![](ds_grid_get_disk_mean.png)",
        "return": "Real or String"
    },
    "date_get_week": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "myweek = date_get_week(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_week(date);",
        "function": "date_get_week",
        "documentation": "This function returns the week of the given datetime value within the year.",
        "return": "Real"
    },
    "irandom": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The upper range from which the random number will be selected."
            }
        ],
        "example": {
            "code": "if irandom(9) = 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;score += 100;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "irandom(n);",
        "function": "irandom",
        "documentation": "",
        "return": "Integer"
    },
    "path_reverse": {
        "parameters": [],
        "example": {
            "code": "path_reverse(path0);",
            "description": ""
        },
        "signature": "path_reverse(index);",
        "function": "path_reverse",
        "documentation": "With this function you can reverse the order in which the individual path points are numbered, so, for example, if the path has 5 points, point 0 would become point 4, point 1 would be point 3 and point 2 would not be changed. The actual position of the points remains the same, only the order in which they are processed is changed. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.",
        "return": "N/A"
    },
    "layer_destroy": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to destroy (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "if !instance_exists(obj_Bullet_Parent)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_destroy(global.Bullet_Layer);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_destroy(layer_id)",
        "function": "layer_destroy",
        "documentation": "",
        "return": "N/A"
    },
    "layer_sprite_get_blend": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var back_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_blend(back_id) == c_white<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_blend(back_id, make_colour_rgb(random(255), random(255), 255));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_blend(sprite_element_id);",
        "function": "layer_sprite_get_blend",
        "documentation": "",
        "return": "Colour Value (Real)"
    },
    "layer_sprite_x": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "x",
                "documentation": "The x position for the sprite"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Asset_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> layer_sprite_x(spr_id, irandom(room_width));<br>",
            "description": ""
        },
        "signature": "layer_sprite_x(sprite_element_id, x);",
        "function": "layer_sprite_x",
        "documentation": "",
        "return": "N/A"
    },
    "browser_width": {
        "parameters": [],
        "example": {
            "code": "if browser_height &gt; window_get_height() || browser_width &gt; window_get_width()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx, yy;<br> &nbsp;&nbsp;&nbsp;if browser_width &gt; window_get_width()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx = (browser_width - window_get_width()) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;if browser_height &gt; window_get_height()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy = (browser_height - window_get_height()) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;window_set_position(xx, yy);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "browser_width",
        "function": "browser_width",
        "documentation": "This variable holds the width (in pixels) of the browser the game is being run in. If no browser is present then the window size is returned. the following image illustrates how this variable relates to the rest of the positioning functions available through the [Window Functions](../cameras%20and%20display/display/the%20game%20window/index.html).  \n  \n![](../cameras%20and%20display/display/the%20game%20window/images/window_position.png)",
        "return": "Real"
    },
    "mouse_wheel_up": {
        "parameters": [],
        "example": {
            "code": "if mouse_wheel_up()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y -= 10;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mouse_wheel_up();",
        "function": "mouse_wheel_up",
        "documentation": "This function returns true if the mouse wheel is being rotated upwards and false otherwise.",
        "return": "Boolean"
    },
    "draw_surface_general": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "left",
                "documentation": "The left position in the surface of the part to be drawn."
            },
            {
                "label": "top",
                "documentation": "The top position in the surface of the part to be drawn."
            },
            {
                "label": "w",
                "documentation": "The width of the part to be draw, from left."
            },
            {
                "label": "h",
                "documentation": "The height of the part to be draw, from top."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling to draw the surface with."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling to draw the surface with."
            },
            {
                "label": "rot",
                "documentation": "The rotation or angle to draw the surface with."
            },
            {
                "label": "c1",
                "documentation": "The colour of the top left corner of the surface."
            },
            {
                "label": "c2",
                "documentation": "The colour of the top right corner of the surface."
            },
            {
                "label": "c3",
                "documentation": "The colour of the bottom right corner of the surface."
            },
            {
                "label": "c4",
                "documentation": "The colour of the bottom left corner of the surface."
            },
            {
                "label": "alpha",
                "documentation": "The alpha transparency to draw the surface with.."
            }
        ],
        "example": {
            "code": "draw_surface_general(surf, 8, 8, 32, 32, x, y, 2, 0.5, 180, c_white, c_white, c_black, c_black, 1);",
            "description": ""
        },
        "signature": "draw_surface_general(id, left, top, w, h, x, y, xscale, yscale, rot, c1, c2, c3, c4, alpha);",
        "function": "draw_surface_general",
        "documentation": "This function combines the function [draw\\_surface\\_ext](draw_surface_ext.html) with the function [draw\\_surface\\_part](draw_surface_part.html), adding in some additional blending options so that each corner of the final surface part can be blended with an individual colour.",
        "return": "N/A"
    },
    "surface_save": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to set as the drawing target."
            },
            {
                "label": "fname",
                "documentation": "The name of the saved image file."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(ord(\"S\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_save(surf, \"test.png\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_save(surface_id, fname);",
        "function": "surface_save",
        "documentation": "This function will save a surface to disc using the given filename. The surface _must_ be saved as a *.png format file.",
        "return": "N/A"
    },
    "font_get_fontname": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "fnt_Name = font_get_fontname(font0);<br>",
            "description": ""
        },
        "signature": "font_get_fontname(ind);",
        "function": "font_get_fontname",
        "documentation": "With this function you can get the actual system name of the selected font asset. This function returns a _string_ and not an _index_, and the name returned will depend on the font being used. For example, you may have a font asset called \"fnt_Main\" in the _GameMaker Studio 2_ resource tree, and the font itself may be the Windows system font **Arial**. In this case the function will return \"Arial\" as that is the system name of the font. Should you need the name as it appears in the resource tree, you should use [font\\_get\\_name](font_get_name.html).",
        "return": "String"
    },
    "font_get_uvs": {
        "parameters": [
            {
                "label": "font",
                "documentation": "The index of the font to use."
            }
        ],
        "example": {
            "code": "var tex = font_get_uvs(fnt_Main);<br> tex_left = tex[0];<br> tex_top = tex[1];<br> tex_right = tex[2];<br> tex_left = tex[3];<br>",
            "description": ""
        },
        "signature": "font_get_uvs(font);",
        "function": "font_get_uvs",
        "documentation": "This function returns an array with the UV coordinates for the font texture on the texture page, filling in the array with the following values: \\[0\\] = left, \\[1\\] = top, \\[2\\] = right and \\[3\\] = bottom. This value can then be used in other draw functions, particularly in general drawing when using [primitives](../drawing/primitives/index.html) as well as the [Shader](../shaders/index.html) functions.",
        "return": "Array"
    },
    "motion_add": {
        "parameters": [
            {
                "label": "dir",
                "documentation": "The added direction."
            },
            {
                "label": "speed",
                "documentation": "The added speed."
            }
        ],
        "signature": "motion_add(dir, speed);",
        "function": "motion_add",
        "documentation": "This function add to the direction and a movement speed of an instance, and can be very useful for collisions and simple physics.",
        "return": "N/A"
    },
    "object_get_persistent": {
        "parameters": [],
        "signature": "object_get_persistent(obj);",
        "function": "object_get_persistent",
        "documentation": "This function will tell you whether the object you are checking has been flagged as \"persistent\" or not. A persistent object is one that will cause any instances of it to be carried through from room to room unless they are explicitly destroyed. Please note that this is not an instance function! So, you can have a persistent object and a non-persistent instance of the same object and vice-versa. You can set an individual instances persistent flag using the [persistent](../instances/instance_variables/persistent.html) instance variable.",
        "return": "Boolean"
    },
    "physics_fixture_set_sensor": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "state",
                "documentation": "whether a fixture is a sensor (true) or not (false)"
            }
        ],
        "example": {
            "code": "physics_fixture_set_sensor(fix_Cloud, 1);",
            "description": ""
        },
        "signature": "physics_fixture_set_sensor(fixture, state)",
        "function": "physics_fixture_set_sensor",
        "documentation": "Some times you will want your game to detect and recognise when two instances with fixtures collide, but not have any physical reaction to the collision. This can be done by converting the fixture into a sensor, which basically means that they will generate a collision event but with no physical response so that you can use these instances as \"triggers\" for other events to happen in the game room. Any fixture can be flagged as a sensor, and it makes no difference if the instance it is bound to is static or in movement.  \n  \n**_NOTE:_ A sensor fixture will fire off the collision event when the collision** first occurs only, meaning you don't get a stream of collision events as the two bodies continue to overlap (which is what would traditionally occur). If they stop overlapping and overlap subsequently there will be another collision event triggered.",
        "return": "N/A"
    },
    "room_height": {
        "parameters": [],
        "example": {
            "code": "if bbox_bottom &gt; room_height<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y += room_height - bbox_bottom;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_height;",
        "function": "room_height;",
        "documentation": "",
        "return": "Real"
    },
    "view_enabled": {
        "parameters": [],
        "example": {
            "code": "if !view_enabled<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_visible[0] = true;<br> &nbsp;&nbsp;&nbsp;view_enabled = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_enabled;",
        "function": "view_enabled;",
        "documentation": "",
        "return": "Boolean (<tt>true</tt>: enabled, <tt>false</tt>: disabled)"
    },
    "view_visible": {
        "parameters": [],
        "example": {
            "code": "if !view_visible[0]<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_visible[0] = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_visible[0 ... 7];",
        "function": "view_visible[0 ... 7];",
        "documentation": "",
        "return": "Boolean (<tt>true</tt>: enabled, <tt>false</tt>: disabled)"
    },
    "draw_primitive_begin_texture": {
        "parameters": [
            {
                "label": "kind",
                "documentation": "The kind of primitive you are going to draw."
            },
            {
                "label": "tex",
                "documentation": "The texture to use with the primitive."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> var tex = background_get_texture(background0);<br> draw_primitive_begin_texture(pr_trianglestrip, tex);<br> draw_vertex_texture(0, 0, 0, 0);<br> draw_vertex_texture(640, 0, 1, 0);<br> draw_vertex_texture(640, 480, 1, 1);<br> draw_vertex_texture(0, 480, 0, 1);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_primitive_begin_texture(kind, tex)",
        "function": "draw_primitive_begin_texture",
        "documentation": "This function must be called before you define the vertices of a textured primitive. You must give the kind of primitive to use (see [draw\\_primitive\\_begin](draw_primitive_begin.html) for more information) and the **id** of a texture to use, which can be a sprite or background image asset. This asset **id** can be gotten from the functions [sprite\\_get\\_texture](../../sprites/sprite_get_texture.html) (use -1 for no texture).",
        "return": "N/A"
    },
    "texture_get_width": {
        "parameters": [
            {
                "label": "tex",
                "documentation": "The texture page asset pointer to use"
            }
        ],
        "example": {
            "code": "tex_w = texture_get_width(sprite_get_texture(spr_Model_tex, 0));",
            "description": ""
        },
        "signature": "texture_get_width(tex);",
        "function": "texture_get_width",
        "documentation": "Returns the width of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.",
        "return": "Real"
    },
    "date_date_of": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to extract the date from."
            }
        ],
        "example": {
            "code": "today = date_date_of(date_current_datetime());",
            "description": ""
        },
        "signature": "date_date_of(date);",
        "function": "date_date_of",
        "documentation": "Returns the date value of the given datetime.",
        "return": "Real"
    },
    "phy_linear_velocity_y": {
        "parameters": [],
        "example": {
            "code": "if phy_linear_velocity_y != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_linear_velocity_y = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_linear_velocity_y;",
        "function": "phy_linear_velocity_y;",
        "documentation": "This variable can be used to get or to change the y component the instances linear velocity vector and is defined in pixels per second (for pixels per step, see [phy\\_speed\\_y](phy_speed_y.html)). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
        "return": "Real"
    },
    "sprite_create_from_surface": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the surface to create from."
            },
            {
                "label": "x",
                "documentation": "The x position to copy from."
            },
            {
                "label": "y",
                "documentation": "The y position to copy from."
            },
            {
                "label": "w",
                "documentation": "The width of the area to be copied (from the x position)."
            },
            {
                "label": "h",
                "documentation": "The height of the area to be copied (from the y position)."
            },
            {
                "label": "removeback",
                "documentation": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
            },
            {
                "label": "smooth",
                "documentation": "Indicates whether to smooth the edges."
            },
            {
                "label": "xorig",
                "documentation": "Indicates the x position of the origin in the sprite."
            },
            {
                "label": "yorig",
                "documentation": "Indicates the y position of the origin in the sprite."
            }
        ],
        "example": {
            "code": "var surf;<br> surf = surface_create(32, 32);<br> surface_set_target(surf);<br> draw_clear_alpha(c_black, 0);<br> draw_sprite(spr_Body, 0, 0, 0);<br> draw_sprite(spr_Clothes, 0, 0, 0);<br> draw_sprite(spr_Hair, 0, 0, 0);<br> spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16);<br> surface_reset_target();<br> surface_free(surf);<br>",
            "description": ""
        },
        "signature": "sprite_create_from_surface(index, x, y, w, h, removeback, smooth, xorig, yorig);",
        "function": "sprite_create_from_surface",
        "documentation": "With this function you can create a sprite from a previously initialised surface (the surface index ID value is returned when you create the surface using [surface_create](../drawing/surfaces/surface_create.html)). The x and y coordinates that you then input in the function should be relative to the (0,0) position of the _surface_ (the top left corner) and not the game window (nor the view if you have one active). The width and height arguments are in pixels and define the width and height of the part of the surface to use.",
        "return": ""
    },
    "audio_emitter_get_pitch": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_pitch(emitter_player) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_pitch(emitter_player, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_pitch(emitter);",
        "function": "audio_emitter_get_pitch",
        "documentation": "This function returns the current pitch value set for the given audio emitter.",
        "return": "Real"
    },
    "date_compare_time": {
        "parameters": [
            {
                "label": "datetime1",
                "documentation": "The first datetime."
            },
            {
                "label": "datetime2",
                "documentation": "The datetime to compare the first one to."
            }
        ],
        "example": {
            "code": "d = date_compare_time(date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime());",
            "description": ""
        },
        "signature": "date_compare_time(datetime1, datetime2);",
        "function": "date_compare_time",
        "documentation": "With this function you can check two dates and times to see which one has the time component earlier or later than the other. The function returns -1 if datetime1 is earlier, 1 if datetime1 is later and 0 if they are the same, and it ignores the date, so literally just which of the times is further through its given day.",
        "return": "Real"
    },
    "mp_potential_path": {
        "parameters": [
            {
                "label": "path",
                "documentation": "index of the path that is to be used by the function"
            },
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "factor",
                "documentation": "This number is used to prevent an infinite loop. It should be larger than 1. See the function description for more information."
            },
            {
                "label": "checkall",
                "documentation": "Whether to check all instances (true) or just solid ones (false)."
            }
        ],
        "example": {
            "code": "path = path_add();<br> mp_potential_path(path, obj_Player.x, obj_Player.y, 3, 4, 0);<br> path_start(path, 3, 0, 0);<br>",
            "description": ""
        },
        "signature": "mp_potential_path(path, xgoal, ygoal, stepsize, factor, checkall)",
        "function": "mp_potential_path",
        "documentation": "This function computes a path for the instance from its current position _and orientation_ to the position specified by the xgoal,ygoal arguments. It uses the indicated step size while trying to avoid collision with either all instances or only those flagged as solid. Like in the function [mp\\_potential\\_step](mp_potential_step.html) it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function [mp\\_potential\\_settings](mp_potential_settings.html). The indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).  \n  \nTo avoid the function continuing to compute forever you need to provide a factor of larger than 1 - the function will stop and report failure if it cannot find a path shorter than this factor times the distance between start and goal. A factor of 4 is normally good enough but if you expect long detours you might make it longer. If it fails a path is still created that runs in the approximate direction of the goal but it will not reach it.  \n  \n_**Note:** This function does not move the instance. It sets a path only, and you must use the [Path](../../paths/index.html) functions for movement._",
        "return": "Boolean."
    },
    "sprite_get_speed": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to get the speed of"
            }
        ],
        "example": {
            "code": "s_speed = sprite_get_speed(sprite_index);<br> s_type = sprite_get_speed_type(sprite_index);",
            "description": ""
        },
        "signature": "sprite_get_speed(index)",
        "function": "sprite_get_speed",
        "documentation": "This function can be used to retrieve the sprite speed as defined for the sprite resource in the [Sprite Editor](../../../2_interface/1_editors/sprites.html). The value returned can then be used, for example, to calculate how many frames may be drawn for different [image_speeds](../instances/instance_variables/image_speed.html). Note that the return value will be very different depending on the _type_ of speed that was applied in the Sprite Editor, either _Frames Per Second_, or _Frames Per Game Frame_. The following two examples illustrate this:",
        "return": "Real"
    },
    "sprite_get_yoffset": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to find the yoffset of."
            }
        ],
        "example": {
            "code": "if y - sprite_get_yoffset(sprite_index) &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y = sprite_get_yoffset(sprite_index);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_get_yoffset(index);",
        "function": "sprite_get_yoffset",
        "documentation": "When you define a sprite in the sprite editor, you need to set the _origin_ for that sprite. This is the point at which the sprite will be \"attached\" or \"drawn\" when used with an instance. This function returns the relative offset for the y-axis of the origin based on the upper left corner being the 0,0 position, with a +y being down and a -y being up from this. The following image illustrates this: ![](spr_xyoffset.png)",
        "return": ""
    },
    "string_ord_at": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to check."
            },
            {
                "label": "index",
                "documentation": "The position to get the character code from."
            }
        ],
        "example": {
            "code": "str = \"Hello World\";<br> char_code = string_ord_at(str1, 7);<br>",
            "description": ""
        },
        "signature": "string_ord_at(str, index);",
        "function": "string_ord_at",
        "documentation": "You can use this function to return a specific character code at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the value given to index, -1 is returned.",
        "return": "Real"
    },
    "virtual_key_show": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the virtual key to show."
            }
        ],
        "example": {
            "code": "if global.Debug<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;virtual_key_show(global.Left);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;virtual_key_hide(global.Left);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "virtual_key_show(index);",
        "function": "virtual_key_show",
        "documentation": "Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly. For that you would call this function, using the index of the virtual key that you want to see (previously created and stored using [virtual\\_key\\_add](virtual_key_add.html)) which will draw a coloured rectangle to represent the key on the screen. Once you are happy with things it is recommended that you create and place your own graphic in its area.",
        "return": "N/A"
    },
    "vertex_freeze": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to freeze."
            }
        ],
        "example": {
            "code": "vertex_freeze(buff);",
            "description": ""
        },
        "signature": "vertex_freeze(buffer);",
        "function": "vertex_freeze",
        "documentation": "This function can be used to \"freeze\" a vertex buffer. this buffer becomes **read-only**, meaning that should you need to change it, you would have to delete the whole buffer and re-create it. A frozen buffer can be submitted to the shader faster than a normal, dynamic buffer and is recommended for those effects that require an unchanging custom primitive for the duration of a level or the game.",
        "return": "N/A"
    },
    "id": {
        "parameters": [],
        "example": {
            "code": "for(var i = 0; i &lt; instance_count; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if instance_id[i] != id<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance_id[i].scr += 5;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "id;",
        "function": "id;",
        "documentation": "",
        "return": "Real (instance ID value)"
    },
    "tilemap_set_at_pixel": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to change"
            },
            {
                "label": "tiledata",
                "documentation": "The tile set data to set"
            },
            {
                "label": "xcell",
                "documentation": "The x position (in the room)"
            },
            {
                "label": "ycell",
                "documentation": "The y position (in the room)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var data = tilemap_get_at_pixel(map_id, 4, 4);<br> data = tile_set_flip(data, true);<br> tilemap_set_at_pixel(map_id, data, 4, 4);<br>",
            "description": ""
        },
        "signature": "tilemap_set_at_pixel(tilemap_element_id, tiledata, x, y)",
        "function": "tilemap_set_at_pixel",
        "documentation": "",
        "return": "Boolean"
    },
    "ord": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string with which to find the Unicode code."
            }
        ],
        "example": {
            "code": "if keyboard_check(ord(\"W\"))<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;y -= 4;<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ord(string);",
        "function": "ord",
        "documentation": "This function takes a string (of a single character only, and if it is a letter, it _must_ be capitalised) and returns the Unicode value for that character. In this way you can, for example, store as integers individual key presses, and it is most commonly used by the [keyboard_check()](../controls/keyboard%20input/index.html) functions.",
        "return": "Real"
    },
    "view_get_surface_id": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            }
        ],
        "example": {
            "code": "if view_get_surface_id(0) == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_surface_id(0, global.vSurf);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_get_surface_id(view_port)",
        "function": "view_get_surface_id",
        "documentation": "This function can be used to retrieve the unique ID value for the surface assigned to the given view port (will return -1 if no surface has been assigned).",
        "return": "Real"
    },
    "friction": {
        "parameters": [],
        "example": {
            "code": "if abs(speed) &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;friction = 0.05;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;friction = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "friction;",
        "function": "friction;",
        "documentation": "",
        "return": "Real"
    },
    "move_towards_point": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position of the point to move towards."
            },
            {
                "label": "y",
                "documentation": "The y position of the point to move towards."
            },
            {
                "label": "sp",
                "documentation": "The speed to move at in pixels per second."
            }
        ],
        "example": {
            "code": "if point_distance(x, y, target.x, target.y) &gt; 5<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;move_towards_point(target.x, target.y, 5);<br> &nbsp;&nbsp;&nbsp;}<br> else speed = 0;<br>",
            "description": ""
        },
        "signature": "move_towards_point( x, y, sp );",
        "function": "move_towards_point",
        "documentation": "This function simply tells the instance running the code to move towards a set point at a set speed. Bear in mind that it is up to you to tell it what to do once it gets there, as it won't just stop by itself. This means that you can get a \"vibrating\" instance as it moves (for example) 3 pixels forward, overshoots the x/y target position by 2, then moves 3 pixels back again, overshooting the target point by one and so on... There are a number of ways that this can be avoided, for example using [distance\\_to\\_point](../../maths/vector%20functions/distance_to_point.html) to see how far from the specified location the instance is before moving.  \n  \n_**Note:** this function sets the speed of the instance, so even if you stop using this code, the instance will keep moving in the previous direction, so it is necessary to set the instance [speed](../../instances/instance_variables/speed.html) to 0 if you wish it to stop. See the code example below._",
        "return": "N/A"
    },
    "steam_file_persisted": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to check."
            }
        ],
        "example": {
            "code": "if !steam_file_persisted(\"Save.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_file_share(\"Save.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_file_persisted(filename);",
        "function": "steam_file_persisted",
        "documentation": "With this function you can check the given file to see if it has been synchronised with the Steam Cloud. A return value of true means that it is, while false means it is not.",
        "return": "Boolean"
    },
    "audio_resume_sync_group": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to resume."
            }
        ],
        "example": {
            "code": "if (keyboard_check_pressed((ord)\"P\"))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = !global.Pause<br> &nbsp;&nbsp;&nbsp;if global.Pause<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_pause_sync_group(sg);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_resume_sync_group(sg);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_resume_sync_group(group_index);",
        "function": "audio_resume_sync_group",
        "documentation": "This function will resume the given sync group if it is playing and has previously been paused (using the function [audio\\_pause\\_sync_group](audio_pause_sync_group.html)). The group index is the value returned when you created the group using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html).",
        "return": "N/A"
    },
    "ds_exists": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The variable index to check for the data structure"
            },
            {
                "label": "type",
                "documentation": "The type of data structure to check for (see the list of constants below)"
            }
        ],
        "example": {
            "code": "if !ds_exists(ai_grid, ds_type_grid)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ai_grid = ds_grid_create(room_width / 32, room_height / 32);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_exists(ind, type);",
        "function": "ds_exists",
        "documentation": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the ds \"type\", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.",
        "return": "Boolean"
    },
    "gpu_get_blendmode_destalpha": {
        "parameters": [],
        "example": {
            "code": "var bm;<br> bm[0] = gpu_get_blendmode_srcalpha();<br> bm[1] = gpu_get_blendmode_destalpha();<br> gpu_set_blendmode_ext_sepalpha(bm_inv_src_alpha, bm_inv_dest_colour, bm[0], bm[1]);<br>",
            "description": ""
        },
        "signature": "gpu_get_blendmode_destalpha();",
        "function": "gpu_get_blendmode_destalpha",
        "documentation": "This function can be used to retrieve the current _destination_ extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from the destination) with only the \"A\" component being used when drawing:",
        "return": "Constant (see above table)"
    },
    "file_bin_rewrite": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to rewrite."
            }
        ],
        "example": {
            "code": "file = file_bin_open('myfile.bin', 2);<br> file_bin_rewrite(file);<br>",
            "description": ""
        },
        "signature": "file_bin_rewrite(binfile);",
        "function": "file_bin_rewrite",
        "documentation": "This function takes the filename handle as returned by the function [file\\_bin\\_open](file_bin_open.html) and then rewrites the file, clearing it of all previous data to start writing from the beginning of the file.",
        "return": "N/A"
    },
    "file_delete": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to delete."
            }
        ],
        "example": {
            "code": "if file_exists(\"level.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_delete(\"level.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "file_delete(fname);",
        "function": "file_delete",
        "documentation": "This function will delete the specified file from the system. It should be noted that this function will only delete those files that _GameMaker Studio 2_ is able to create and parse: ini files, text files and binary files, or those files made to store game created resources like sprites or surfaces. However, it will _not_ delete any other file. The function will also return true if the file has successfully been removed, or false in any other circumstances.  \n  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "Boolean"
    },
    "ds_map_replace": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to change."
            },
            {
                "label": "key",
                "documentation": "The key with the value that should be replaced by the new one."
            },
            {
                "label": "val",
                "documentation": "The new value to replace the given value with"
            }
        ],
        "signature": "ds_map_replace( id, key, val );",
        "function": "ds_map_replace",
        "documentation": "With this function you can change the value for the given key within the (previously created) ds_map. Please note that if the key to be replaced does _not_ exists, it is created and the given value assigned to it.",
        "return": "N/A."
    },
    "draw_get_alpha": {
        "parameters": [],
        "example": {
            "code": "if draw_get_alpha() != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_set_alpha(1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_get_alpha()",
        "function": "draw_get_alpha",
        "documentation": "This function returns the current value of the draw alpha, which will range between 0 (fully transparent) and 1 (fully opaque). The draw alpha affects the transparency of all draw functions, and can be set with the [draw\\_set\\_alpha](draw_set_alpha.html) function.",
        "return": "Real"
    },
    "gpu_set_state": {
        "parameters": [
            {
                "label": "ds_map",
                "documentation": "The GPU state to set as a ds_map."
            }
        ],
        "example": {
            "code": "gpu_set_state(gpu_map);<br>",
            "description": ""
        },
        "signature": "gpu_set_state(ds_map);",
        "function": "gpu_set_state",
        "documentation": "This function will set the current GPU state using the passed-in [ds_map](../../data_structures/ds%20maps/index.html). The supplied map can be created using the function [gpu\\_get\\_state](gpu_get_state.html)",
        "return": "N/A"
    },
    "gpu_get_tex_mip_filter_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_mip_filter_ext(_sampleIndex) != tf_point<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_mip_filter_ext(_sampleIndex, tf_point);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_mip_filter_ext(sampler_index);",
        "function": "gpu_get_tex_mip_filter_ext",
        "documentation": "With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return one of the mode value constants listed below.",
        "return": "Constant (listed below):"
    },
    "surface_getpixel": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface."
            },
            {
                "label": "x",
                "documentation": "The x position on the surface from which to get the pixel."
            },
            {
                "label": "y",
                "documentation": "The y position on the surface from which to get the pixel."
            }
        ],
        "example": {
            "code": "col = surface_getpixel(surf, 56, 78 );",
            "description": ""
        },
        "signature": "surface_getpixel(surface_id, x, y);",
        "function": "surface_getpixel",
        "documentation": "This function can be used to get the colour of a specific pixel from a surface, using the local coordinates of the surface where (0,0) is the top left corner. This function should _not_ be used very often as it is extremely slow and may cause a pause in your game.",
        "return": "Real"
    },
    "file_bin_position": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to get the position in."
            }
        ],
        "example": {
            "code": "pos = file_bin_position(file);",
            "description": ""
        },
        "signature": "file_bin_position(binfile);",
        "function": "file_bin_position",
        "documentation": "This function will returns the current position in bytes, where 0 is the first position, of the file with the given file id. You supply the file ID value, as returned by the function [file\\_bin\\_open](file_bin_open.html).",
        "return": "Real"
    },
    "object_get_name": {
        "parameters": [],
        "signature": "object_get_name(obj);",
        "function": "object_get_name",
        "documentation": "This function will return the name _as a string_ of the specified object. This name is the one that has been specified for the object in the resource tree of the main _GameMaker Studio 2_ window. Please note that this is _only_ a string and cannot be used to reference the object directly - for that you would need the _object index_. You can, however, use this string to get the _object index_ using the returned string along with the function [asset\\_get\\_index()](../asset_get_index.html).",
        "return": "String"
    },
    "audio_play_sound": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to play."
            },
            {
                "label": "priority",
                "documentation": "Set the channel priority for the sound."
            },
            {
                "label": "loop",
                "documentation": "Sets the sound to loop or not."
            }
        ],
        "example": {
            "code": "if health &lt;= 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;lives -= 1;<br> &nbsp;&nbsp;&nbsp;audio_play_sound(snd_PlayerDead, 10, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_play_sound(index, priority, loop);",
        "function": "audio_play_sound",
        "documentation": "With this function you can play any sound resource in your game. You provide the sound index and assign it a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function [audio\\_channel\\_num](audio_channel_num.html). Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as _GameMaker Studio 2_ will prioritize them the same). The final argument is for making the sound loop and setting it to true will make the sound loop until it is stopped and setting it to false will play the sound once only.",
        "return": "Index"
    },
    "keyboard_check_pressed": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to check the pressed state of."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_anykey)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto_next();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_check_pressed(key);",
        "function": "keyboard_check_pressed",
        "documentation": "With this function you can check to see if a key has been pressed or not. Unlike the [keyboard_check](keyboard_check.html) function, this function will only run once for every time the key is pressed down, so for it to trigger again, the key must be first released and then pressed again.",
        "return": "Boolean"
    },
    "part_type_clear": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to clear."
            }
        ],
        "example": {
            "code": "part_type_clear(global.explode_part);",
            "description": ""
        },
        "signature": "part_type_clear(ind);",
        "function": "part_type_clear",
        "documentation": "With this function you can \"reset\" a particle, returning all the values for each of the functions relating to the particle (life, colour, alpha, orientation etc...) to their default values. Note that this function does not remove any particles currently visible in the room from the screen, for that you should be using [part\\_particles\\_clear](../particle%20systems/part_particles_clear.html).",
        "return": "N/A"
    },
    "phy_position_yprevious": {
        "parameters": [],
        "example": {
            "code": "xx = phy_position_xprevious;<br> yy = phy_position_yprevious;<br>",
            "description": ""
        },
        "signature": "phy_position_yprevious;",
        "function": "phy_position_yprevious;",
        "documentation": "This variable can be used to get (or to set) the previous y position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one.",
        "return": "Real"
    },
    "url_get_domain": {
        "parameters": [],
        "example": {
            "code": "dom_name=url_get_domain();",
            "description": ""
        },
        "signature": "url_get_domain();",
        "function": "url_get_domain",
        "documentation": "You can use this to get the domain where your HTML5 game is being played.",
        "return": "string"
    },
    "mouse_lastbutton": {
        "parameters": [],
        "example": {
            "code": "if mouse_lastbutton = mb_left<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x -= 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mouse_lastbutton;",
        "function": "mouse_lastbutton;",
        "documentation": "This variable returns the last mouse button that was pressed and can return any of the special mouse constants (you may also set this variable to one of the constants too). The constant returned (or being set) will be one of the following:",
        "return": "Constant"
    },
    "ds_priority_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to remove."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_priority_destroy(AI_queue);<br> &nbsp;&nbsp;&nbsp;AI_queue = -1;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_destroy(id);",
        "function": "ds_priority_destroy",
        "documentation": "This function will remove the given priority queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_priority queue to prevent memory leaks that can slow down and crash your game.",
        "return": "N/A"
    },
    "gpu_get_texfilter_ext": {
        "parameters": [
            {
                "label": "sampler_id",
                "documentation": "The sampler id from the shader."
            }
        ],
        "example": {
            "code": "var s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");<br> if gpu_get_texfilter_ext(s_tex)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter_ext(s_tex, false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texfilter_ext(s_tex, true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_get_texfilter_ext(sampler_id);",
        "function": "gpu_get_texfilter_ext",
        "documentation": "With this function you can check to see whether texture interpolation (linear interpolation) is enabled (returns true) or not (returns false) for a given shader sampler texture.",
        "return": "Boolean"
    },
    "gpu_get_tex_max_aniso_ext": {
        "parameters": [
            {
                "label": "sampler_index",
                "documentation": "The index of the shader sampler to get"
            }
        ],
        "example": {
            "code": "var _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");<br> var _spriteTex = sprite_get_texture(sprite_index, 0);<br> shader_set(shd_Glass);<br> if gpu_get_tex_max_aniso_ext(_sampleIndex) != 8<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_max_aniso_ext(_sampleIndex, 8);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> texture_set_stage(_sampleIndex , _spriteTex);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_max_aniso_ext(sampler_index);",
        "function": "gpu_get_tex_max_aniso_ext",
        "documentation": "With this function you can get the current maximum level of anisotropy when using the tf_anisotropic filter mode (see [gpu\\_get\\_tex\\_mip\\_filter()](gpu_get_tex_mip_filter.html) for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function [shader\\_get\\_sampler_index()](../../shaders/shader_get_sampler_index.html), and the function will return a value within the range of 1 and 16.",
        "return": "Real (default: 16)"
    },
    "ef_explosion": {
        "parameters": [],
        "example": {
            "code": "if health &lt;= 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_explosion, x, y, 2, c_red);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_explosion;",
        "function": "ef_explosion;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create an explosion effect as illustrated in the image below:  \n  \n![](images/ef_explosion.png)",
        "return": "N/A."
    },
    "font_get_name": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "Index of the font to check."
            }
        ],
        "example": {
            "code": "fnt_Name = font_get_name(font0);<br>",
            "description": ""
        },
        "signature": "font_get_name(ind);",
        "function": "font_get_name",
        "documentation": "This function can be used to get the name (as a string) that was given to the font when it was added as an asset to the _GameMaker Studio 2_ resource tree. Please note that this is _only_ a string and cannot be used to reference the font directly - for that you would need the _font index_. You can, however, use this string to get the _font index_ using the returned string along with the function [asset\\_get\\_index()](../asset_get_index.html).",
        "return": "String"
    },
    "round": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The number to round."
            }
        ],
        "example": {
            "code": "score += round(hp / 5);",
            "description": ""
        },
        "signature": "round(n);",
        "function": "round",
        "documentation": "Just as it says, round() takes a real number and rounds it up or down to the nearest integer. In the special case where the number supplied is exactly a half-integer (1.5, 17.5, -2.5, etc), the number will be rounded to the nearest _even_ value, for example, 2.5 would be rounded to 2, while 3.5 will be rounded to 4. This type of rounding is called _bankers rounding_ and over large numbers of iterations or when using floating point maths, it gives a statistically better rounding than the more traditional \"round up if over .5 and round down otherwise\" approach.",
        "return": "Integer"
    },
    "physics_fixture_set_chain_shape": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "The index of the fixture"
            },
            {
                "label": "loop",
                "documentation": "Whether to close the chain (true) or not (false)."
            }
        ],
        "example": {
            "code": "var xx = -100;<br> var yy = room_height / 2;<br> var fix = physics_fixture_create(); physics_fixture_set_chain_shape(fix, false);<br> for (var i = 0; i &lt; 10; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_fixture_add_point(fix, xx, yy);<br> &nbsp;&nbsp;&nbsp;xx += 50 + random(150);<br> &nbsp;&nbsp;&nbsp;yy = (room_height / 2) - 250 + irandom(500);<br> &nbsp;&nbsp;&nbsp;}<br> physics_fixture_bind(fix, id);<br>",
            "description": ""
        },
        "signature": "physics_fixture_set_chain_shape(fixture, loop)",
        "function": "physics_fixture_set_chain_shape",
        "documentation": "This function defines a \"chain\" fixture shape. A chain fixture is comprised of a number of points, which are then connected together using edge shapes to join them. The function itself takes the index (ID) of the fixture and can tell the fixture to loop or not. Setting this to true will connect the last point to the first point with an edge, while setting it to false will not. Note that this function on prepares the fixture to accept the points required to make the chain, and these should be added after calling this function using [physics\\_fixture\\_add_point](physics_fixture_add_point.html), much as you would when building a polygon fixture.  \n  \nWhen creating a chain fixture, you must give it at least two points but you are not limited in the number of subsequent points that you can add to make up the finished fixture.",
        "return": "N/A"
    },
    "physics_particle_get_damping": {
        "parameters": [],
        "example": {
            "code": "if physics_particle_get_damping() &lt; 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_particle_set_damping(physics_particle_get_damping() + 0.01);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_particle_get_damping()",
        "function": "physics_particle_get_damping",
        "documentation": "With this function you can find out what the current linear damping is for particles in the physics simulation (you can set this value using [physics\\_particle\\_set_damping()](physics_particle_set_damping.html)).",
        "return": "Real"
    },
    "room": {
        "parameters": [],
        "example": {
            "code": "if room_next(room) != -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;room_goto(room_next);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room;",
        "function": "room;",
        "documentation": "",
        "return": "Real (unique index value)"
    },
    "layer_x": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to set the x position of"
            },
            {
                "label": "x",
                "documentation": "The x position in the room to set the layer to"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_x(lay_id) != 0 || layer_get_x(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_x(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_y(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_x(layer_id, x)",
        "function": "layer_x",
        "documentation": "You can use this function to set the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the horizontal axis of the room.",
        "return": "N/A"
    },
    "clipboard_get_text": {
        "parameters": [],
        "example": {
            "code": "if clipboard_has_text()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;str = clipboard_get_text();<br> &nbsp;&nbsp;&nbsp;clipboard_set_text(\"\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "clipboard_get_text();",
        "function": "clipboard_get_text",
        "documentation": "This function will return a string of the text contained on the clipboard. if no text is stored it will return an empty string \"\".",
        "return": "String"
    },
    "audio_emitter_velocity": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to change."
            },
            {
                "label": "vx",
                "documentation": "The x vector value (default 0)."
            },
            {
                "label": "vy",
                "documentation": "The y vector value (default 0)."
            },
            {
                "label": "vz",
                "documentation": "The z vector value (default 0)."
            }
        ],
        "example": {
            "code": "s_emit = audio_emitter_create();<br> audio_emitter_position(s_emit, room_width, 0, 0);<br> audio_emitter_velocity(s_emit, -5, 0, 0);<br>",
            "description": ""
        },
        "signature": "audio_emitter_velocity(emitter, vx, vy, vz);",
        "function": "audio_emitter_velocity",
        "documentation": "This function can be used to give an emitter _doppler_ effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the emitter itself is not ever going to move you would normally not need to set these values, but, for example, if you are making a scrolling shooter game where the enemies come from the right and scroll to the left, you would set this to have a velocity of (hspeed, 0, 0) in the create event of the enemies (and update the emitter of each instance in the step event using [audio\\_emitter\\_position](audio_emitter_position.html)) to give any sounds emitted by the enemy instances the correct doppler as they pass the player instance (which in turn would be using the function [audio\\_listener\\_position](audio_listener_position.html) to set the _listener_ to the correct position).",
        "return": "N/A"
    },
    "draw_line": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the start of the line."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the start of the line."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the end of the line."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the end of the line."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_lime);<br> draw_line(50,50,150,50);<br>",
            "description": ""
        },
        "signature": "draw_line(x1, y1, x2, y2);",
        "function": "draw_line",
        "documentation": "With this function you can draw a 1 pixel wide line between any two points in the game room.",
        "return": "N/A"
    },
    "draw_surface_part_ext": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "left",
                "documentation": "The left position in the surface of the part to be drawn."
            },
            {
                "label": "top",
                "documentation": "The top position in the surface of the part to be drawn."
            },
            {
                "label": "w",
                "documentation": "The width of the part to be draw, from left."
            },
            {
                "label": "h",
                "documentation": "The height of the part to be drawn, from top."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling the part should be drawn with."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling the part should be drawn with."
            },
            {
                "label": "colour",
                "documentation": "The colour blending the part should be drawn with."
            },
            {
                "label": "alpha",
                "documentation": "The alpha transparency the part should be drawn with."
            }
        ],
        "example": {
            "code": "draw_surface_part_ext(surf, 8, 8, 32, 32, x, y, 2, 0.5, c_black, 1);",
            "description": ""
        },
        "signature": "draw_surface_part_ext(id, left, top, w, h, x, y, xscale, yscale, colour, alpha);",
        "function": "draw_surface_part_ext",
        "documentation": "This function will draw a part of the chosen surface at the given position following the same rules as per [draw\\_surface\\_part](draw_surface_part.html), only now you can scale the part, blend a colour with it, or change its alpha when drawing it to the screen (the same as when drawing a surface with [draw\\_surface\\_ext](draw_surface_ext.html)).",
        "return": "N/A"
    },
    "matrix_get": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of matrix to get the values of (see the constants listed above)"
            }
        ],
        "example": {
            "code": "v_array = matrix_get(matrix_view);<br>",
            "description": ""
        },
        "signature": "matrix_get(type);",
        "function": "matrix_get",
        "documentation": "This function returns a 1D array of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements \\[0 - 3\\], row 2 is elements \\[4 -7\\], etc... (see the image on the [main page](index.html)). The available matrices are _view_, _projection_ and _world_, for which you would use one of the following constants:",
        "return": "Array (1D, 16 elements)"
    },
    "collision_ellipse": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left side of the ellipse to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top side of the ellipse to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right side of the ellipse to check."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom side of the ellipse to check."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instance collisions."
            },
            {
                "label": "prec",
                "documentation": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
            },
            {
                "label": "notme",
                "documentation": "Whether the calling instance, if relevant, should be excluded (true) or not (false)."
            }
        ],
        "example": {
            "code": "if collision_ellipse(50, 50, 200, 100, obj_Player, false, true)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(obj_Player.x, obj_Player.y, \"Effects\", obj_Splash);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "collision_ellipse( x1, y1, x2, y2, obj, prec, notme );",
        "function": "collision_ellipse",
        "documentation": "Collision_ellipse uses the first four arguments (x1,y1,x2,y2) to define the width and height of an ellipse within the current room and then checks to see if **any** object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:  \n  \n![](images/collision_ellipse_illustration.png)",
        "return": "Instance id or <b>noone</b>"
    },
    "path_get_number": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            }
        ],
        "example": {
            "code": "if path_get_number(ai_path) &gt; 1 &nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;path_start(ai_path, 4, 3, 0); &nbsp;&nbsp;&nbsp;}",
            "description": ""
        },
        "signature": "path_get_number(index);",
        "function": "path_get_number",
        "documentation": "This function can be used to return the number of points on a path.",
        "return": "Real."
    },
    "clipboard_has_text": {
        "parameters": [],
        "example": {
            "code": "if clipboard_has_text()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;str = clipboard_get_text();<br> &nbsp;&nbsp;&nbsp;clipboard_set_text(\"\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "clipboard_has_text();",
        "function": "clipboard_has_text",
        "documentation": "This function will return true if the clipboard contains text or false if it does not.",
        "return": "Boolean"
    },
    "buffer_read": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to read from."
            },
            {
                "label": "type",
                "documentation": "The type of data that is to be read from the buffer (see the list of constants below)."
            }
        ],
        "example": {
            "code": "var cmd = buffer_read(buff, buffer_s16);",
            "description": ""
        },
        "signature": "buffer_read(buffer, type)",
        "function": "buffer_read",
        "documentation": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
        "return": "Real/String"
    },
    "ds_priority_copy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to copy to."
            },
            {
                "label": "source",
                "documentation": "The id of the priority queue to copy from."
            }
        ],
        "example": {
            "code": "with (instance_create_layer(x, y, \"Enemies\", obj_Enemy))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;p_queue = ds_priority_create();<br> &nbsp;&nbsp;&nbsp;ds_priority_copy(p_queue, other.p_queue);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_copy(id, source);",
        "function": "ds_priority_copy",
        "documentation": "This function can be used to copy the contents of one priority queue into another. Note that this does _NOT_ remove the contents from the original priority queue, nor does it destroy the original priority queue. When using this function the priority queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
        "return": "N/A"
    },
    "draw_roundrect_colour": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the rounded rectangle."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the rounded rectangle."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the rounded rectangle."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the rounded rectangle."
            },
            {
                "label": "col1",
                "documentation": "The center colour."
            },
            {
                "label": "col2",
                "documentation": "The outside edge colour."
            },
            {
                "label": "outline",
                "documentation": "Whether the rectangle is an outline (true) or filled in (false)."
            }
        ],
        "example": {
            "code": "draw_roundrect_colour(50, 50, 200, 200, c_black, c_white, false);",
            "description": ""
        },
        "signature": "draw_roundrect_colour(x1, y1, x2, y2, col1, col2, outline);",
        "function": "draw_roundrect_colour",
        "documentation": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for the centre and the edges, and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html)).You can define how precise the drawing of the corners is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html), but the corners are always drawn with a fixed radius. Should you need to change the corner radius you should use the function [draw\\_roundrect\\_colour_ext()](draw_roundrect_colour_ext.html).",
        "return": "N/A"
    },
    "instance_position": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check for instances."
            },
            {
                "label": "y",
                "documentation": "The y position to check for instances."
            },
            {
                "label": "obj",
                "documentation": "The object to check for instances of."
            }
        ],
        "example": {
            "code": "var inst;<br> inst = instance_position(mouse_x, mouse_y, obj_Pause_Button);<br> if inst != noone<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (inst) image_index=1;<br> &nbsp;&nbsp;&nbsp;instance_create_layer(room_width / 2, 0, \"Controllers\", obj_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_position( x, y, obj );",
        "function": "instance_position",
        "documentation": "With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked and will return the unique instance [id](../instance_variables/id.html). If you do not need the id of the colliding instance you should consider using [position_meeting](../../movement%20and%20collisions/collisions/position_meeting.html) instead. This function also accepts the special keywords **all** and **other** and will return the keyword **noone** if no collision occurs or the unique ID value of the instance found if a collision does occur.",
        "return": "Real (either an instance ID value or the keyword <tt>noone</tt>)"
    },
    "layer_get_name": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the name of"
            }
        ],
        "example": {
            "code": "var a = layer_get_all();<br> var layer_list = ds_list_create(); for (var i = 0; i Alt; array_length_1d(a); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if layer_get_name(a[i]) != \"\"<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds_list_add(layer_list, a[i])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_name(layer_id)",
        "function": "layer_get_name",
        "documentation": "You can use this function to get the _name_ of the given layer. You supply the unique layer ID value and if the layer is one of the named layers created in the room editor, then the function will return a string with the layer name. If the layer is not one of the room editor ones (ie: it was created using [layer_create](layer_create.html)) then an empty string will be returned.",
        "return": "String"
    },
    "tilemap_get_height": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the height of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var _w = tilemap_get_width(map_id);<br> var _h = tilemap_get_height(map_id);<br> total_tiles = (_w * _h);<br>",
            "description": ""
        },
        "signature": "tilemap_get_height(tilemap_element_id);",
        "function": "tilemap_get_height",
        "documentation": "",
        "return": "Integer"
    },
    "window_get_colour": {
        "parameters": [],
        "example": {
            "code": "if window_get_colour() != c_black<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;window_set_colour(c_black);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_get_colour();",
        "function": "window_get_colour",
        "documentation": "This function returns the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:  \n  \n![](images/window_set_colour.png) The above image has two views with two view ports, each one drawn at different positions. This stretches the game window to accommodate both ports and uses the window colour to colour the background where no view is shown.",
        "return": "N/A"
    },
    "game_load": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to load."
            }
        ],
        "signature": "game_load(filename);",
        "function": "game_load",
        "documentation": "With this function you can load a game that has been saved previously (using [game_save](game_save.html)).",
        "return": "N/A"
    },
    "path_mirror": {
        "parameters": [],
        "example": {
            "code": "path_mirror(mypath);",
            "description": ""
        },
        "signature": "path_mirror(index);",
        "function": "path_mirror",
        "documentation": "This function takes all the path points and mirrors them along the vertical axis. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.  \n  \n![](pathmirror.png)",
        "return": "N/A"
    },
    "layer_get_vspeed": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to get the vertical speed from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_hspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_vspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_vspeed(layer_id)",
        "function": "layer_get_vspeed",
        "documentation": "You can use this function to retrieve the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the vertical speed, where a positive value is down and a negative value up. Default is 0 (unless set in the room editor).",
        "return": "N/A"
    },
    "steam_activate_overlay": {
        "parameters": [
            {
                "label": "overlayindex",
                "documentation": "The page index of the Steam API UI to show (see constants listed below)."
            }
        ],
        "example": {
            "code": "var key = keyboard_lastkey;<br> switch (key)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case vk_f1: steam_activate_overlay(ov_friends); break;<br> &nbsp;&nbsp;&nbsp;case vk_f2: steam_activate_overlay(ov_community); break;<br> &nbsp;&nbsp;&nbsp;case vk_f3: steam_activate_overlay(ov_players); break;<br> &nbsp;&nbsp;&nbsp;case vk_f4: steam_activate_overlay(ov_settings); break;<br> &nbsp;&nbsp;&nbsp;case vk_f5: steam_activate_overlay(ov_gamegroup); break;<br> &nbsp;&nbsp;&nbsp;case vk_f6: steam_activate_overlay(ov_achievements); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_activate_overlay(overlayindex);",
        "function": "steam_activate_overlay",
        "documentation": "The Steam overlay is a piece of the Steam user interface that can be activated over the top of almost any game launched through Steam. It lets the user access their friends list, web browser, chat, and in-game DLC purchasing. The default key for a user to access the overlay while in a game is SHIFT+TAB, but you can also bring up any page of the overlay using this function. It takes one of six **constants** that are listed below:",
        "return": "N/A"
    },
    "steam_reset_all_stats": {
        "parameters": [],
        "example": {
            "code": "ini_open(\"Save.ini\");<br> if global.Version != ini_read_real(\"Data\", \"Version\", 0)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ini_write_real(\"Data\", \"Version\", global.Version);<br> &nbsp;&nbsp;&nbsp;steam_reset_all_stats();<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "steam_reset_all_stats();",
        "function": "steam_reset_all_stats",
        "documentation": "With this function you can reset all the statistics for you game to their default values (as defined in the Steamworks control panel for your game). It is recommended that you only use this function as a debug tool when developing your game.",
        "return": "N/A"
    },
    "steam_reset_all_stats_achievements": {
        "parameters": [],
        "example": {
            "code": "ini_open(\"Save.ini\");<br> if global.Version != ini_read_real(\"Data\", \"Version\", 0)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ini_write_real(\"Data\", \"Version\", global.Version);<br> &nbsp;&nbsp;&nbsp;steam_reset_all_stats_achievements();<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "steam_reset_all_stats_achievements();",
        "function": "steam_reset_all_stats_achievements",
        "documentation": "With this function you can reset all the statistics and achievements for you game to their default values (as defined in the Steamworks control panel for your game). It is recommended that you only use this function as a debug tool when developing your game.",
        "return": "N/A"
    },
    "audio_emitter_get_vz": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_vz(emitter_player) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_velocity(emitter_player, 0, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_vz(emitter);",
        "function": "audio_emitter_get_vz",
        "documentation": "This function returns the current velocity along the z axis for the given audio emitter.",
        "return": "Real"
    },
    "gpu_set_colorwriteenable": {
        "parameters": [
            {
                "label": "red",
                "documentation": "Enable/disable the red channel"
            },
            {
                "label": "green",
                "documentation": "Enable/disable the green channel"
            },
            {
                "label": "blue",
                "documentation": "Enable/disable the blue channel"
            },
            {
                "label": "alpha",
                "documentation": "Enable/disable the alpha channel"
            }
        ],
        "example": {
            "code": "var cw = gpu_get_colorwriteenable();<br> cw[3] = false;<br> gpu_set_colorwriteenable(cw);<br>",
            "description": ""
        },
        "signature": "gpu_set_colorwriteenable(red, green, blue, alpha);",
        "function": "gpu_set_colorwriteenable",
        "documentation": "With this function you can switch on or off the colour channels and the alpha channel for all further drawing. For example, you can use this function to create alpha-channel only surfaces (switch off the RGB writing before using the surface), or to create special effects while drawing to the screen. The default value for each of the components is true, and can be supplied as either four unique arguments or as a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled):",
        "return": "N/A"
    },
    "room_goto_next": {
        "parameters": [],
        "example": {
            "code": "if room_exists(room_next(room)) room_goto_next();",
            "description": ""
        },
        "signature": "room_goto_next();",
        "function": "room_goto_next",
        "documentation": "",
        "return": "N/A"
    },
    "skeleton_animation_get_duration": {
        "parameters": [
            {
                "label": "animname",
                "documentation": "The name (a string) of the animation set to use."
            }
        ],
        "signature": "skeleton_animation_get_duration(animname);",
        "function": "skeleton_animation_get_duration",
        "documentation": "This function will return the time required for the given animation set to run before looping back to the beginning. The return value is in seconds.",
        "return": "Real"
    },
    "window_set_position": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of where to position the window."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to position the window."
            }
        ],
        "example": {
            "code": "window_set_position(0, 0);",
            "description": ""
        },
        "signature": "window_set_position(x, y);",
        "function": "window_set_position",
        "documentation": "",
        "return": "N/A"
    },
    "device_get_tilt_x": {
        "parameters": [],
        "example": {
            "code": "if display_get_orientation() = display_landscape<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x += sign(device_get_tilt_y());<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x += sign(device_get_tilt_x());<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_get_tilt_x()",
        "function": "device_get_tilt_x",
        "documentation": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90ï¿½. The image below shows how each if the available functions relates to the device: ![](tilt_image.png)",
        "return": "Real"
    },
    "file_text_close": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to close."
            }
        ],
        "example": {
            "code": "file = file_text_open_write(working_directory + \"Game_Data.txt\");<br> while (!file_text_eof(file))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_write_string(file, level_data);<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_close(fileid);",
        "function": "file_text_close",
        "documentation": "Once you have finished working with a given file (whether reading from it or writing to it), you must close the file again, or else you risk losing the information contained within. This also prevents memory leaks and makes sure that you never go over the file limit by having more than 32 files open.",
        "return": "N/A"
    },
    "instance_number": {
        "parameters": [
            {
                "label": "obj",
                "documentation": "The object to total the number of instances of."
            }
        ],
        "example": {
            "code": "if instance_number(object_index) &lt; 50 &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(random(room_width), random(room_height), \"Instances\", object_index);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_number(obj);",
        "function": "instance_number",
        "documentation": "With this function you can find out how many active instances of the specified object exists in the room. When checking using this function, if the object is a **parent**, then _all child objects will also be included in the return value_, and also note that those instances which have been deactivated with the [instance_deactivate](../deactivating_instances/index.html) functions will _not_ be included in this check.",
        "return": "Real"
    },
    "sprite_xoffset": {
        "parameters": [],
        "example": {
            "code": "if x - sprite_xoffset &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = sprite_xoffset;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "sprite_xoffset;",
        "function": "sprite_xoffset;",
        "documentation": "This **read only** variable returns the local xoffset (the x component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This xoffset is returned in pixels and will be dependant on the [image_xscale](image_xscale.html), so that (for example) if a square 32x32 sprite is defined as having the x origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled xoffset you should use [sprite\\_get\\_xoffset](../../sprites/sprite_get_xoffset.html). ![](../images/xoffset_image.png)",
        "return": "Real"
    },
    "date_days_in_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to use."
            }
        ],
        "example": {
            "code": "days = date_days_in_year(date_current_datetime());",
            "description": ""
        },
        "signature": "date_days_in_year(date);",
        "function": "date_days_in_year",
        "documentation": "With this function you can get the number of days that the given year has, returning 365 for a normal year, and 366 for a leap year.",
        "return": "Real"
    },
    "phy_collision_y": {
        "parameters": [],
        "example": {
            "code": "var i;<br> for(i = 0; i &lt; phy_collision_points; i += 1;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_particles_create(global.Sname, phy_collision_x[i], phy_collision_y[i], global.Spark, 5);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_collision_y;",
        "function": "phy_collision_y;",
        "documentation": "This **read-only** array returns the y position of all points detected in a collision between two physics enabled instances.  \n  \n_**NOTE:** This variable is only available in the collision event of a physics enabled instance._",
        "return": "Real"
    },
    "gpu_get_texrepeat": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_texrepeat()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texrepeat(false);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texrepeat(true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_get_texrepeat();",
        "function": "gpu_get_texrepeat",
        "documentation": "With this function you can check to see whether texture repeating is enabled (returns true) or not (returns false). For more information on texture repeating, see the function [gpu\\_set\\_texrepeat](gpu_set_texrepeat.html).",
        "return": "Boolean"
    },
    "part_system_create": {
        "parameters": [],
        "example": {
            "code": "global.Sname = part_system_create();",
            "description": ""
        },
        "signature": "part_system_create();",
        "function": "part_system_create",
        "documentation": "This function is used to create a new particle system and will return a unique index number that should be stored and used in all further functions relating to that system. The system will be assigned a managed layer and will be set to have a depth of 0. Managed layers are not accessible to the user and used only for internal management when depth is used instead of layers. Normally you would use the function [part\\_system\\_create_layer](part_system_create_layer.html) instead of this one.",
        "return": "Real"
    },
    "vertex_float3": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "float",
                "documentation": "The first input value."
            },
            {
                "label": "float",
                "documentation": "The second input value."
            },
            {
                "label": "float",
                "documentation": "The third input value."
            }
        ],
        "example": {
            "code": "vertex_float3(buff, 0.05, 0.01, room_width / x);",
            "description": ""
        },
        "signature": "vertex_float3(buffer, float, float, float);",
        "function": "vertex_float3",
        "documentation": "This function will add three floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the [vertex\\_format\\_add_custom](../vertex%20formats/vertex_format_add_custom.html) function.",
        "return": "N/A"
    },
    "instance_deactivate_object": {
        "parameters" : [
            {
                "label": "obj",
                "documentation": "The object or instance to deactivate (the keyword all can also be used)."
            }
        ],
        "example": {
            "code" : "instance_deactivate_object(obj_Enemy);<br>var _vx = camera_get_view_x(view_camera[0]);<br>var _vy = camera_get_view_y(view_camera[0]);<br>var _vw = camera_get_view_width(view_camera[0]);<br>var _vh = camera_get_view_height(view_camera[0]);<br>instance_activate_region(_vx - 64, _vy - 64, _vw + 128, _vh + 128, false);",
            "description": "The code above checks to see if the OS has been paused and if it has then it pauses the physics world, deactivates everything except itself, and then creates a pause menu instance."
        },
        "signature": "physics_pause_enable(flag)",
        "function": "instance_deactivate_object",
        "documentation": "With this function you can deactivate a single instance or all instances of a specific object from all those that have been activated previously. Note that if you have deactivated an instance or object that has been flagged as Persistent, then you will need to reactivate it again with the function instance_activate_object before changing room, otherwise it will not be carried over and will be discarded instead.",
        "return": "N/A"
    },
    "draw_sprite_part": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "left",
                "documentation": "The x position on the sprite of the top left corner of the area to draw."
            },
            {
                "label": "top",
                "documentation": "The y position on the sprite of the top left corner of the area to draw."
            },
            {
                "label": "width",
                "documentation": "The width of the area to draw."
            },
            {
                "label": "height",
                "documentation": "The height of the area to draw."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            }
        ],
        "example": {
            "code": "draw_sprite_part(sprite_index, image_index, 4, 0, sprite_width-16, sprite_height-16, x, y );",
            "description": ""
        },
        "signature": "draw_sprite_part(sprite, subimg, left, top, width, height, x, y);",
        "function": "draw_sprite_part",
        "documentation": "With this function you can draw part of any sprite at a given position within the room. As with [draw_sprite](draw_sprite.html) you can specify a sprite and a sub-image for drawing, then you must give the _relative coordinates_ within the sprite of the area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the sprite and all further coordinates should be taken from that position. The image below shows an example of how this works: ![](images/spr_part.png)",
        "return": "N/A"
    },
    "instance_id": {
        "parameters": [],
        "example": {
            "code": "for (var i = 0; i &lt; instance_count; i ++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;with (instance_id[i]) speed += 0.1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_id[num]);",
        "function": "instance_id[num]);",
        "documentation": "",
        "return": "Real (instance ID value)"
    },
    "floor": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The number to floor."
            }
        ],
        "example": {
            "code": "val = floor( 3.9 );",
            "description": ""
        },
        "signature": "floor(n);",
        "function": "floor",
        "documentation": "Returns the floor of n, that is, n rounded down to an integer. This is similar to the [round()](round.html) function, but it only rounds _down_, no matter what the decimal value, so floor(5.99999) will return 5, as will floor(5.2), floor(5.6457) etc...",
        "return": "Real"
    },
    "GM_version": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, date_time_string(GM_build_date));<br> draw_text(32, 64, \"v\" + GM_version);<br>",
            "description": ""
        },
        "signature": "GM_version;",
        "function": "GM_version;",
        "documentation": "This constant hold the version number as defined in the [Game Options](../../../2_interface/3_settings/game_options/index.html) for each target platform. The value is stored as a string.",
        "return": "String"
    },
    "tilemap_get_mask": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the mask of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mask = tilemap_get_mask(map_id);<br> var new_mask = tile_mirror | tile_flip | tile_rotate | 255;<br> if mask != new_mask<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;tilemap_set_mask(map_id, new_mask);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_get_mask(tilemap_element_id);",
        "function": "tilemap_get_mask",
        "documentation": "",
        "return": "Real (0 for no mask, -1 for an error)"
    },
    "steam_is_overlay_activated": {
        "parameters": [],
        "example": {
            "code": "if steam_is_overlay_activated()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Pause = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_is_overlay_activated();",
        "function": "steam_is_overlay_activated",
        "documentation": "This function can be used to find out if the user has the Steam Overlay active or not. If the overlay is active and visible to the user the function will return true, and if it is not, then it will return false. An example of what this function can be used for would be for polling the Steam API for the overlay so that you can pause your game while the overlay is being shown.",
        "return": "Boolean"
    },
    "vertex_create_buffer_from_buffer_ext": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to create the vertex buffer from."
            },
            {
                "label": "format",
                "documentation": "The primitive vertex format to use."
            },
            {
                "label": "src_offset",
                "documentation": "The offset within the the source buffer to copy from."
            },
            {
                "label": "vert_num",
                "documentation": "The number of vertices the buffer should have."
            }
        ],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_position_3d();<br> vertex_format_add_colour();<br> vertex_format_add_textcoord();<br> var my_format = vertex_format_end();<br> v_buff = vertex_create_buffer_from_buffer(global.modelBuff, myFormat, 0, 512);",
            "description": ""
        },
        "signature": "vertex_create_buffer_from_buffer_ext(buffer, format, src_offset, vert_num);",
        "function": "vertex_create_buffer_from_buffer_ext",
        "documentation": "As with the function [vertex\\_create\\_buffer](vertex_create_buffer.html), this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer is pre-formatted with the vertex format for building primitives for use with (for example) shaders, and you can also supply an offset within the source buffer to copy from and the number of vertices that the final buffer should have. Note that if the number of vertices does not match those being copied you may get corrupted vertex data.",
        "return": "Pointer"
    },
    "date_inc_month": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to."
            },
            {
                "label": "amount",
                "documentation": "The number of months (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_month(date_current_datetime(), 12);",
            "description": ""
        },
        "signature": "date_inc_month( date, amount );",
        "function": "date_inc_month",
        "documentation": "With this function you can increment a given datetime value by a specific number of months, and it will return the new datetime value.",
        "return": "Real"
    },
    "network_set_timeout": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to use."
            },
            {
                "label": "read_timeout",
                "documentation": "The milliseconds in which a transfer from a server will timeout."
            },
            {
                "label": "write_timeout",
                "documentation": "The milliseconds in which a transfer to a server will timeout."
            }
        ],
        "example": {
            "code": "network_set_timeout(sock, 3000, 3000);<br>",
            "description": ""
        },
        "signature": "network_set_timeout(socket, read_timeout, write_timeout);",
        "function": "network_set_timeout",
        "documentation": "With this function you can set the timeout for reading and writing data to/from a server through the given socket. Note that the timeout does not generate any type of event, so you will need to deal with timeouts yourself using alarms (for example). Note that this value only affects the sending and receiving of data, and should you wish to change the connection timeout value then you should be using the function [network\\_set\\_config](network_set_config.html).",
        "return": "N/A"
    },
    "phy_mass": {
        "parameters": [],
        "example": {
            "code": "if phy_mass &lt; other.phy_mass<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_mass;",
        "function": "phy_mass;",
        "documentation": "This **read-only** variable returns the mass of the instance in _kilograms_. This value is calculated automatically based on the surface area of the assigned fixtures and their density values, but it can be changed using the function [physics\\_mass\\_properties](../physics_mass_properties.html).",
        "return": "Real"
    },
    "steam_ugc_query_set_return_total_only": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "total_only",
                "documentation": "Whether to have the query return only the total number of hits or not."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);<br> steam_ugc_query_set_return_total_only(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": " steam_ugc_query_set_return_total_only(ugc_query_handle , total_only);",
        "function": " steam_ugc_query_set_return_total_only",
        "documentation": "This function can be used to further filter any given UGC query, specifically to request only the number of results without any other information (meaning that the DS map generated by the send function will contain the key \"num_results\" without any further map data). The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is either true or false. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "audio_group_stop_all": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index of the audio group to stop (as defined in the Audio Groups Window)"
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_space)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_group_stop_all(audiogroup_level1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_group_stop_all(groupID);",
        "function": "audio_group_stop_all",
        "documentation": "This function will stop all sounds from the given audio group that are currently playing.",
        "return": "N/A"
    },
    "buffer_peek": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "offset",
                "documentation": "The offset position (in bytes) within the buffer to read the given data from."
            },
            {
                "label": "type",
                "documentation": "The type of data that is to be read from the buffer (see the list of constants here)."
            }
        ],
        "example": {
            "code": "var red = buffer_peek(buff, 1, buffer_u8);<br> var green = buffer_peek(buff, 2, buffer_u8);<br> var blue = buffer_peek(buff, 3, buffer_u8);<br> image_blend = make_colour_rgb(red, green, blue);<br>",
            "description": ""
        },
        "signature": "buffer_peek(buffer, offset, type);",
        "function": "buffer_peek",
        "documentation": "With the [buffer_read](buffer_read.html) function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written. However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.  \n  \n_**NOTE:** Using the incorrect data type for the data being read will result in erroneous values!_",
        "return": "Real/String"
    },
    "ds_queue_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to remove."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_queue_destroy(AI_queue);<br> &nbsp;&nbsp;&nbsp;AI_queue = -1;<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_queue_destroy(id);",
        "function": "ds_queue_destroy",
        "documentation": "This function will remove the given queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_queue to prevent memory leaks that can slow down and crash your game.",
        "return": "N/A"
    },
    "part_type_colour3": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "colour1",
                "documentation": "The colour the particle will start at."
            },
            {
                "label": "colour2",
                "documentation": "The colour the particle will be halfway through its lifespan."
            },
            {
                "label": "colour3",
                "documentation": "The colour the particle will end at."
            }
        ],
        "example": {
            "code": "part_type_colour3( part_Health, c_red, c_white, c_maroon);",
            "description": ""
        },
        "signature": "part_type_colour3( ind, colour1, colour2, colour3 );",
        "function": "part_type_colour3",
        "documentation": "This function can be used to set a three colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one that will be blended to half way through its lifetime and the third colour is the one with which the particle will end with. A smooth gradient change will occur through the colours over the particles lifetime from one colour to the other.",
        "return": "N/A"
    },
    "physics_joint_weld_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "anchor_x",
                "documentation": "The x coordinate for the joint, within the game world"
            },
            {
                "label": "anchor_y",
                "documentation": "The y coordinate for the joint, within the game world"
            },
            {
                "label": "ref_angle",
                "documentation": "The joint angle to maintain"
            },
            {
                "label": "freq_hz",
                "documentation": "This is the oscillation frequency for the joint, in hertz"
            },
            {
                "label": "damping_ratio",
                "documentation": "This damping ratio for the joint"
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var i, fix, o_id, p_id;<br> p_id = noone;<br> o_id = noone;<br> fix = physics_fixture_create();<br> physics_fixture_set_box_shape(fix, 64, 32);<br> for (i = 0; i &lt; 5; i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;o_id = instance_create_layer(x + (128 * i), y, \"Instances\", obj_BridgePart);<br> &nbsp;&nbsp;&nbsp;physics_fixture_bind(fix, o_id);<br> &nbsp;&nbsp;&nbsp;if i &gt; 0 &amp;&amp; i &lt; 4<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;physics_joint_weld_create(p_id, o_id, x + (128 * i) - 64, y, 0, 10, 12, true);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;p_id = o_id;<br> &nbsp;&nbsp;&nbsp;}<br> physics-fixture_delete(fix);<br>",
            "description": ""
        },
        "signature": "physics_joint_weld_create(inst1, inst2, anchor_x, anchor_y, ref_angle, freq_hz, damping_ratio, col)",
        "function": "physics_joint_weld_create",
        "documentation": "The weld joint is designed to attach two fixtures together in a strong, yet flexible bond. The weld joint will permit flexing between the two joined fixtures but without the stretching associated with, for example, a distance joint, and will always try to \"spring\" back to the reference angle when put under any stress or load. You define the point in the room where the joint should be created, as well as the angle that you wish the joint to try and maintain at all times, as shown in the image below:  \n  \n![](images/weld_joint_image.png)",
        "return": "Index of the joint"
    },
    "window_handle": {
        "parameters": [
            {
                "label": "Windows",
                "documentation": "Window HWND"
            },
            {
                "label": "macOS",
                "documentation": "NSWindow class"
            },
            {
                "label": "Ubuntu (Linux)",
                "documentation": "XWindow handle"
            },
            {
                "label": "HTML5",
                "documentation": "Canvas ID"
            }
        ],
        "example": {
            "code": "win_id = windows_handle();",
            "description": ""
        },
        "signature": "window_handle();",
        "function": "window_handle",
        "documentation": "With this function you can get the internal <<span class=\"notranslate\">Windows id value (the HWND, a _pointer_). This function is really only useful for extension writers who need the window handle to call Windows API's in DLL code (the returned pointer should be cast into a string and then in the C++ just cast it to an HWND). The table below shows the platforms supported along with what they return:",
        "return": "Pointer"
    },
    "surface_free": {
        "parameters": [
            {
                "label": "surface_id",
                "documentation": "The ID of the surface to be freed."
            }
        ],
        "example": {
            "code": "if keyboard_check_pressed(vk_escape)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surface_free(surf);<br> &nbsp;&nbsp;&nbsp;room_goto(rm_Menu);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_free(surface_id);",
        "function": "surface_free",
        "documentation": "When you are working with surfaces, you should always use this function whenever you are finished using them. Surfaces take up space in memory and so need to be removed, normally at the end of a room, but it can be done at any time depending on the use you put them to. Failure to do so can cause memory leaks which will eventually slow down and crash your game.",
        "return": "N/A"
    },
    "current_hour": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, \"The time is \" + string(current_hour) + \":\" + string(current_minute) + \".\" + string(current_second));<br>",
            "description": ""
        },
        "signature": "current_hour;",
        "function": "current_hour;",
        "documentation": "This **read only** variable will return the hour that corresponds to the current moment based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function [date\\_set\\_timezone()](date_set_timezone.html).",
        "return": "Real"
    },
    "arctan": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The angle (in radians) to return the inverse tangent of."
            }
        ],
        "example": {
            "code": "val = arctan( 0 );",
            "description": ""
        },
        "signature": "arctan(x);",
        "function": "arctan",
        "documentation": "Returns the inverse tangent of x. This will accept any number as, unlike tan, arctans asymptotes are on the y axis so it just means you'll never get returned a number greater than pi/2 or less than -pi/2.",
        "return": "Real"
    },
    "path_get_precision": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            }
        ],
        "example": {
            "code": "if path_get_kind(mypath)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if path_get_precision(mypath) !=8 path_set_precision(mypath, 8);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_get_precision(index);",
        "function": "path_get_precision",
        "documentation": "This function returns with what precision the given path has been \"smoothed\", and will be an integer value from 1 to 8. Although you can get (and set) this value for a straight-line path it will have no influence over how an instance uses the path as it is only relevant when the path kind is set to \"smooth\".",
        "return": "Real."
    },
    "phy_bullet": {
        "parameters": [],
        "example": {
            "code": "with (instance_create_layer(x, y, \"Bullets\", obj_Shoot))<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_bullet = true;<br> &nbsp;&nbsp;&nbsp;physics_apply_local_impulse(0, 10, 0, 200);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_bullet;",
        "function": "phy_bullet;",
        "documentation": "This variable defines whether or not the instance is extremely fast moving (for example a bullet). The default value is false but if set to true this tells _GameMaker Studio 2_ that the instance will be moving at such high speeds that it will require more expensive collision detection to ensure it doesn't pass through other instances undetected.",
        "return": "Boolean"
    },
    "phy_linear_damping": {
        "parameters": [],
        "example": {
            "code": "if place_meeting(phy_position_x, phy_position_y, obj_Water)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_linear_damping = 10;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_linear_damping = 3;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_linear_damping;",
        "function": "phy_linear_damping;",
        "documentation": "This variable can be used to set the linear damping of the instance, or it can be used to get the current linear damping. The damping is the amount of \"resistance\" to forward movement that the physics enabled instance has, with a lower value permitting the instance to move and accelerate faster and a higher value making it require a more forceful push.",
        "return": "Real"
    },
    "tilemap_tileset": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to change"
            },
            {
                "label": "tileset_index",
                "documentation": "The new tile set index to use"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_trees\");<br> var tile_id = layer_tilemap_get_id(lay_id);<br> if tilemap_get_tileset(tile_id) != ts_Nighttime<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;tilemap_tileset(tile_id, ts_Nighttime);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_tileset(tilemap_element_id, tileset_index)",
        "function": "tilemap_tileset",
        "documentation": "",
        "return": "N/A"
    },
    "steam_download_scores": {
        "parameters": [
            {
                "label": "lb_name",
                "documentation": "The name of the leaderboard that you are downloading the scores from (a string)."
            },
            {
                "label": "start_idx",
                "documentation": "The start position within the leaderboard."
            },
            {
                "label": "end_idx",
                "documentation": "The end position within the leaderboard."
            }
        ],
        "signature": "steam_download_scores(lb_name, start_idx, end_idx);",
        "function": "steam_download_scores",
        "documentation": "This function is used retrieve a sequential range of leaderboard entries by leaderboard ranking. The start_idx and end_idx parameters control the requested range of ranks, for example, you can display the top 10 on a leaderboard for your game by setting the start value to 1 and the end value to 10. The leaderboard name is a string that was defined when you created the leaderboard using the function [steam\\_create\\_leaderboard](steam_create_leaderboard.html), and the function will return a value which can then be used to identify the call-back in the [Steam Async Event](../../../2_interface/1_editors/events/async_events.html), or it will return -1 if it has failed.",
        "return": "Real"
    },
    "steam_is_screenshot_requested": {
        "parameters": [],
        "example": {
            "code": "if steam_is_screenshot_requested()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var file = \"Catch_The_Haggis_\" + string(global.scrn_num) + \".png\");<br> &nbsp;&nbsp;&nbsp;screen_save(file)<br> &nbsp;&nbsp;&nbsp;steam_send_screenshot(file, window_get_width(), window_get_height());<br> &nbsp;&nbsp;&nbsp;global.scrn_num += 1;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_is_screenshot_requested();",
        "function": "steam_is_screenshot_requested",
        "documentation": "This function will poll the Steam API to see if the key for taking a screenshot of the game has been pressed. The function will only return true for one step (game tick) if the key has been pressed, and will return false at all other times.  \n  \n_**NOTE:** this does **not** take a screenshot for you. This only signals that the key has been pressed and you must use the_ GameMaker Studio 2 functions [screen_save](../cameras%20and%20display/display/screen_save.html) or [screen\\_save\\_part](../cameras%20and%20display/display/screen_save_part.html) to save a local copy of the file to be uploaded.",
        "return": "Boolean"
    },
    "ds_priority_change_priority": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to change."
            },
            {
                "label": "val",
                "documentation": "The value to change the priority of."
            },
            {
                "label": "priority",
                "documentation": "The new priority of the value."
            }
        ],
        "example": {
            "code": "if global.Game_Time &lt; 1000<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_priority_change(ai_priority, scr_AI_Search, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_change_priority(id, val, priority);",
        "function": "ds_priority_change_priority",
        "documentation": "This function will take a given value and change its priority within the referenced priority queue.",
        "return": "N/A"
    },
    "current_time": {
        "parameters": [],
        "example": {
            "code": "if current_time &gt; 600000<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;msg = show_question_async(\"Would you like to rate?\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "current_time;",
        "function": "current_time;",
        "documentation": "This **read only** variable will return the number of milliseconds that have passed since the game was started.",
        "return": "Real"
    },
    "matrix_stack_push": {
        "parameters": [
            {
                "label": "matrix",
                "documentation": "The matrix index to use."
            }
        ],
        "example": {
            "code": "var m1 = matrix_build(66, 145, 0, 0, 0, 0, 1, 1, 1);<br> var m2 = matrix_build(0, 0, 0, 0, 0, image_angle * 6, 1, 1, 1) ;<br> matrix_stack_push(m1);<br> matrix_stack_push(m2);<br> matrix_set(matrix_world, matrix_stack_top());<br> draw_sprite(tyre, 0, 0, 0);<br> matrix_stack_pop();<br> matrix_stack_pop();<br>",
            "description": ""
        },
        "signature": "matrix_stack_push(matrix);",
        "function": "matrix_stack_push",
        "documentation": "This function pushes the specified matrix onto the matrix stack.",
        "return": "N/A"
    },
    "move_snap": {
        "parameters": [
            {
                "label": "hsnap",
                "documentation": "The horizontal snapping (the size in pixels between 'cells')."
            },
            {
                "label": "vsnap",
                "documentation": "The vertical snapping (the size in pixels between 'cells')."
            }
        ],
        "example": {
            "code": "with (obj_Pieces)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !place_snapped(32, 32)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move_snap(32, 32);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "move_snap( hsnap, vsnap );",
        "function": "move_snap",
        "documentation": "This function is used to \"snap\" the instance to a grid of a given size. It will be snapped to the nearest corresponding position on the \"invisible\" grid that the hsnap and vsnap values define.",
        "return": "N/A"
    },
    "physics_world_update_iterations": {
        "parameters": [
            {
                "label": "y1",
                "documentation": "the iterations (per step) that the physics system will perform"
            }
        ],
        "example": {
            "code": "physics_world_update_iterations(20)",
            "description": ""
        },
        "signature": "physics_world_update_iterations(iterations)",
        "function": "physics_world_update_iterations",
        "documentation": "Everything in _GameMaker Studio 2_ is based around steps and, normally, each event will only happen once per step. However, to get the necessary precision with the physics functions they are made to do several calculations each step which are called \"iterations\" the number of which are controlled by this function. The default number for the physics system is 10, but this can be changed to higher or lower depending how many times you want the physics to calculate each step, but it is recommended that you set this no lower than 5 and no higher than 30. You should also be aware that this function is dependant on the [physics\\_world\\_update_speed](physics_world_update_speed.html) function.",
        "return": "N/A"
    },
    "steam_user_installed_dlc": {
        "parameters": [
            {
                "label": "dlc_id",
                "documentation": "The unique identifier for the DLC to be checked (an integer)."
            }
        ],
        "example": {
            "code": "global.Level_Max = 100;<br> if steam_user_owns_dlc(10354)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if steam_user_installed_dlc(10354)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.Level_max = 200;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_user_installed_dlc(dlc_id);",
        "function": "steam_user_installed_dlc",
        "documentation": "If your game has DLC created for it, you can use this function to check and see whether the user has installed it before accessing any files associated with it. The function returns true if the player has the content installed, and false if the user does not, but note that the user must also own the DLC, so you should use the additional function of [steam\\_user\\_owns_dlc](steam_user_owns_dlc.html) to check that it is owned as well before using it.",
        "return": "Boolean"
    },
    "ds_map_empty": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if ds_map_empty(inventory)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;weight = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_map_empty(id);",
        "function": "ds_map_empty",
        "documentation": "This function will simply return false if the specified (previously created) ds_map contains any key/value pairs, or true if it does not.",
        "return": "Boolean."
    },
    "gpu_pop_state": {
        "parameters": [],
        "example": {
            "code": "gpu_push_state();<br> gpu_set_blendmode(bm_add);<br> gpu_set_blendenable(false);<br> gpu_set_cullmode(true);<br> with (obj_Effect_Parent)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_self();<br> &nbsp;&nbsp;&nbsp;}<br> gpu_pop_state();<br> <br>",
            "description": ""
        },
        "signature": "gpu_pop_state();",
        "function": "gpu_pop_state",
        "documentation": "This function pops the previous GPU state from the stack and applies it. See [gpu\\_push\\_state](gpu_push_state.html) for more information.",
        "return": "N/A"
    },
    "part_system_get_layer": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The particle system ID value to get the layer ID of"
            }
        ],
        "example": {
            "code": "if part_system_get_layer(global.p_sys) != \"effects_layer\"<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;part_system_layer(global.p_sys, \"effects_layer\";<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_get_layer(ind);",
        "function": "part_system_get_layer",
        "documentation": "This function can be used to retrieve the unique layer ID value for the given particle system. You supply the particle system ID value (as returned by the function [part\\_system\\_create_layer](part_system_create_layer.html)) and the function will return the ID value of the layer. Note that if the particle system has been flagged as persistent, then it may have been placed on a managed layer (if the layer defined when the system was created in a previous room does not exist), meaning that the value returned will be 0.",
        "return": "Real (unique layer ID value or 0 if the layer is an internally managed one)"
    },
    "file_bin_close": {
        "parameters": [
            {
                "label": "binfile",
                "documentation": "The ID of the file to close."
            }
        ],
        "example": {
            "code": "file = file_bin_open('myfile.bin', 2);<br> file_bin_rewrite(file);<br> file_bin_close(file);<br>",
            "description": ""
        },
        "signature": "file_bin_close(binfile);",
        "function": "file_bin_close",
        "documentation": "Closes a previously opened binary file. You supply the file ID value, as returned by the function [file\\_bin\\_open](file_bin_open.html).",
        "return": "N/A"
    },
    "game_display_name": {
        "parameters": [],
        "signature": "game_display_name",
        "function": "game_display_name",
        "documentation": "This **read only** variable returns the display name of your game for the target platform, as set in the [Game Options](../../../2_interface/3_settings/game_options/index.html).",
        "return": "String"
    },
    "path_get_speed": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            },
            {
                "label": "pos",
                "documentation": "How far through the path to check. Between 0 (start) and 1 (end), can be decimal."
            }
        ],
        "example": {
            "code": "speed = path_get_speed(path0, 0.5) / 20;",
            "description": ""
        },
        "signature": "path_get_speed(ind, pos);",
        "function": "path_get_speed",
        "documentation": "This function returns the speed factor of any given position on a path. The position should be a value between 0 and 1 (you can use [path_position](../path_position.html), for example, if you need the current position of the instance) with 0 being the start position and 1 being the end. The value returned will be the factor by which the actual [path_speed](../path_speed.html) is being set. For example, on a path with only two points, 0 and 1, where the point 0 speed factor is 100 and point 1 speed factor is 0, the function path\\_get\\_speed(path, 0.5) will return 50.",
        "return": "Real."
    },
    "room_set_persistent": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to set the persistence of."
            },
            {
                "label": "val",
                "documentation": "Whether the room shall be persistent (true) or not (false)."
            }
        ],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_width(global.myroom, 640);<br> room_set_height(global.myroom, 480);<br> room_set_persistent(global.myroom, true);",
            "description": ""
        },
        "signature": "room_set_persistent(index, val);",
        "function": "room_set_persistent",
        "documentation": "",
        "return": "N/A"
    },
    "layer_tilemap_get_id": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"tilemap_trees\");<br> var tile_id = layer_tilemap_get_id(lay_id);<br> layer_tilemap_destroy(tile_id);<br>",
            "description": ""
        },
        "signature": "layer_tilemap_get_id(layer_id)",
        "function": "layer_tilemap_get_id",
        "documentation": "",
        "return": "tilemap element ID value (Real)"
    },
    "camera_get_view_border_x": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var xb = camera_get_view_border_x(view_camera[0]);<br> var yb = camera_get_view_border_y(view_camera[0]);<br> if xb != 200 || yb != 200<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_view_border(view_camera[0], 200, 200);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_view_border_x(camera_id)",
        "function": "camera_get_view_border_x",
        "documentation": "This function can be used to retrieve the border value for object/instance following of the given camera along the x axis (horizontal border). The return value will be in pixels.",
        "return": "Real"
    },
    "colour_get_red": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to check"
            }
        ],
        "example": {
            "code": "r_comp = colour_get_red(c_teal);",
            "description": ""
        },
        "signature": "colour_get_red(col);",
        "function": "colour_get_red",
        "documentation": "This function returns the amount of red used to make the given colour, with the value being between 0 and 255, where 0 is no red and 255 is all red. The following image illustrates this: ![](images/get_red.png)",
        "return": "Real"
    },
    "surface_create": {
        "parameters": [
            {
                "label": "w",
                "documentation": "The width of the surface to be created."
            },
            {
                "label": "h",
                "documentation": "The height of the surface to be created."
            }
        ],
        "example": {
            "code": "if !surface_exists(surf)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;surf = surface_create(1024, 1024);<br> &nbsp;&nbsp;&nbsp;surface_set_target(surf);<br> &nbsp;&nbsp;&nbsp;draw_clear_alpha(c_black, 0);<br> &nbsp;&nbsp;&nbsp;surface_reset_target();<br> &nbsp;&nbsp;&nbsp;view_surface_id[0] = surf;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "surface_create(w, h);",
        "function": "surface_create",
        "documentation": "This function is used to create a surface and will return the index of the surface which should be stored in a variable for future function calls. When the surface is first created, it may contain \"noise\" as basically it is just an area of memory that is put aside for the purpose (and that memory may still contain information), so you may want to clear the surface before use with a function like [draw\\_clear\\_alpha](../colour/draw_clear_alpha.html).",
        "return": "Real"
    },
    "json_encode": {
        "parameters": [
            {
                "label": "map",
                "documentation": "a ds_map with the information to encode"
            }
        ],
        "example": {
            "code": "var hiscore_map, i, str;<br> hiscore_map = ds_map_create();<br> for (i = 0; i &lt; 10; i ++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_map_add(name[i], score[i]);<br> &nbsp;&nbsp;&nbsp;}<br> str = json_encode(hiscore_map);<br> get[0] = http_post_string(\"http://www.angusgames.com/game?game_id=\" + string(global.game_id), str)<br> ds_map_destroy(hiscore_map);",
            "description": ""
        },
        "signature": "json_encode(map)",
        "function": "json_encode",
        "documentation": "JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:",
        "return": "string"
    },
    "game_restart": {
        "parameters": [],
        "signature": "game_restart();",
        "function": "game_restart",
        "documentation": "With this function you can restart the game. This is essentially the same as running the game for the first time and so the [Game Start Event](../../../2_interface/1_editors/events/index.html) will be triggered, _as well as_ the [Game End Event](../../../2_interface/1_editors/events/index.html). However it should be noted that global variables will _not_ be re-initialised unless explicitly coded as such - for example, the built-in global variable score will not start at zero after a game restart if it has been modified in the game already. This is also the case for GPU state (so if you have set the draw colour or alpha, for example, it will remain at the changed value) and for the game speed. Also note that if any resource from the resource tree has been changed at run time within the game - for example if you change the origin for a sprite resource or shift the position of a path resource - then these will _not_ be reset either.",
        "return": "N/A"
    },
    "physics_particle_group_join": {
        "parameters": [
            {
                "label": "to",
                "documentation": "The first particle group to join."
            },
            {
                "label": "from",
                "documentation": "The second particle group to join."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var groupflags = phy_particle_group_flag_solid;<br> physics_particle_group_begin(flags, groupflags, mouse_x- 45, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_circle(50);<br> var g1 = physics_particle_group_end();<br> physics_particle_group_begin(flags, groupflags, mouse_x + 45, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);<br> physics_particle_group_circle(50);<br> var g2 = physics_particle_group_end();<br> physics_particle_group_join(g1, g2);<br>",
            "description": ""
        },
        "signature": "physics_particle_group_join(to, from)",
        "function": "physics_particle_group_join",
        "documentation": "With this function you can join two particle groups together, and the joined groups will then behave as if they were both part of a single entity. The groups should have been created with over-lapping edges, as, if they are not already touching, they will not be joined. The function takes the unique group IDs of the groups to join, as returned by the function [physics\\_particle\\_group_end()](physics_particle_group_end.html), and you can use the function any number of times for a single group to join various soft bodies together.",
        "return": "N/A"
    },
    "audio_is_playing": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to check."
            }
        ],
        "example": {
            "code": "if !audio_is_playing(snd_Waterfall)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound_at(snd_Waterfall, x, y, 0, 300, true, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_is_playing(index);",
        "function": "audio_is_playing",
        "documentation": "This function will check the given sound to see if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset, in which case _all_ instances of the given sound will be checked and if any of them are playing the function will return true otherwise it will return false. Note that this function will still return true if the sound being checked has previously been paused using the [audio\\_pause\\_sound](audio_pause_sound.html) function.",
        "return": "Boolean"
    },
    "camera_set_update_script": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera."
            },
            {
                "label": "script",
                "documentation": "The script to run each game frame"
            }
        ],
        "example": {
            "code": "camera_set_update_script(view_camera[0], updateCamera);",
            "description": ""
        },
        "signature": "camera_set_update_script(camera_id, script)",
        "function": "camera_set_update_script",
        "documentation": "This function can be used to set a script that will be called every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned by the different camera_create functions) and the script ID of the script to be called. The order in which scripts attached to cameras and the actual rendering of the camera view is as follows:",
        "return": "N/A"
    },
    "window_get_x": {
        "parameters": [],
        "example": {
            "code": "wx = window_get_x();",
            "description": ""
        },
        "signature": "window_get_x();",
        "function": "window_get_x",
        "documentation": "",
        "return": "Real"
    },
    "gamepad_axis_value": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "axisIndex",
                "documentation": "The axis index to check (see the constants list)."
            }
        ],
        "example": {
            "code": "var haxis = gamepad_axis_value(0, gp_axislh);<br> var vaxis = gamepad_axis_value(0, gp_axislv);<br> direction = point_direction(0, 0, haxis, vaxis);<br> speed = point_distance(0 ,0, haxis, vaxis) * 5;<br>",
            "description": ""
        },
        "signature": "gamepad_axis_value(device, axisIndex);",
        "function": "gamepad_axis_value",
        "documentation": "You can use this function to get the value of the different axes from a given gamepad. The return value will be between -1 and 1 for each of the available horizontal and vertical axes (the constants used by this function can be found listed [here](index.html)).",
        "return": "real"
    },
    "vertex_end": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to end writing to."
            }
        ],
        "example": {
            "code": "vertex_end(buff);",
            "description": ""
        },
        "signature": "vertex_end(buffer);",
        "function": "vertex_end",
        "documentation": "With this function you end the building of the custom primitive. Once you call this command the primitive can be used in the [vertex_submit](vertex_submit.html) function for use in a shader or you can freeze the buffer (making the vertex buffer used read-only and much faster) using [vertex_freeze](vertex_freeze.html).",
        "return": "N/A"
    },
    "date_minute_span": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first datetime."
            },
            {
                "label": "date2",
                "documentation": "The datetime to compare it to."
            }
        ],
        "example": {
            "code": "diff = date_minute_span(date_create_datetime(2011, 9, 15, 11, 4, 0 ), date_current_datetime());",
            "description": ""
        },
        "signature": "date_minute_span(date1, date2);",
        "function": "date_minute_span",
        "documentation": "With this function you can get the number of minutes between two dates. This value is always positive, and incomplete minutes will be returned as a fraction.",
        "return": "Real"
    },
    "tan": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in radians) to return the tangent of."
            }
        ],
        "example": {
            "code": "val = tan( pi );",
            "description": ""
        },
        "signature": "tan(val);",
        "function": "tan",
        "documentation": "In a right angled triangle _tan(val) = Opposite / Adjacent_ where val is one of the three angles.",
        "return": "Real"
    },
    "os_get_language": {
        "parameters": [
            {
                "label": "Arabic",
                "documentation": "ar"
            },
            {
                "label": "Chinese",
                "documentation": "zh"
            },
            {
                "label": "Danish",
                "documentation": "da"
            },
            {
                "label": "English",
                "documentation": "en"
            },
            {
                "label": "French",
                "documentation": "fr"
            },
            {
                "label": "German",
                "documentation": "de"
            },
            {
                "label": "Greek",
                "documentation": "el"
            },
            {
                "label": "Italian",
                "documentation": "it"
            },
            {
                "label": "Japanese",
                "documentation": "ja"
            },
            {
                "label": "Norwegian",
                "documentation": "no"
            },
            {
                "label": "Polish",
                "documentation": "pl"
            },
            {
                "label": "Portuguese",
                "documentation": "pt"
            },
            {
                "label": "Russian",
                "documentation": "ru"
            },
            {
                "label": "Spanish",
                "documentation": "es"
            },
            {
                "label": "Swedish",
                "documentation": "sv"
            }
        ],
        "example": {
            "code": "switch (os_get_language())<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case \"es\": ini_open(\"spanish.ini\"); break;<br> &nbsp;&nbsp;&nbsp;case \"fr\": ini_open(\"french.ini\"); break;<br> &nbsp;&nbsp;&nbsp;case \"it\": ini_open(\"italian.ini\"); break;<br> &nbsp;&nbsp;&nbsp;default: ini_open(\"english.ini\"); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_get_language()",
        "function": "os_get_language",
        "documentation": "This function returns a string with the two letter Language Code for the OS that is running the game, as set by the [ISO639](http://en.wikipedia.org/wiki/ISO_639) standard. If the information is not available, it will hold simply an empty string \"\", or \"en\" for \"English\" language. Note that some languages also have a relevant Regional Code too, so to distinguish between different regions of the same country use the function [os\\_get\\_region()](os_get_region.html).  \n  \nThe following table shows some of the main two letter language codes as defined by ISO 639:",
        "return": "String"
    },
    "buffer_get_address": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            }
        ],
        "example": {
            "code": "var b_address = buffer_get_address(buff_model);<br> var b_end_address = b_address + buffer_get_size(buff_model);<br>",
            "description": ""
        },
        "signature": "buffer_get_address(buffer);",
        "function": "buffer_get_address",
        "documentation": "With this function you can get the a _pointer_ to the raw, _aligned_ buffer address. This is primarily for use with extensions as you can pass this value through to them, allowing them to access the buffer data. Note that there are a few things you cannot do with the buffer when accessing from an extension:",
        "return": "pointer"
    },
    "keyboard_key_release": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to simulate a release of."
            }
        ],
        "example": {
            "code": "keyboard_key_release(vk_space);<br>",
            "description": ""
        },
        "signature": "keyboard_key_release(key);",
        "function": "keyboard_key_release",
        "documentation": "With this function you can simulate the release of any key on the keyboard. The function accepts any of the vk_ constants as well as the standard keys and ascii code.",
        "return": "N/A"
    },
    "draw_skeleton_collision": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "animname",
                "documentation": "The name of the animation to get the frame from (a string)."
            },
            {
                "label": "frame",
                "documentation": "The animation frame to draw (from 0 to image_number - 1)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite."
            }
        ],
        "example": {
            "code": "draw_skeleton_collision(sprite_index, \"jump\", image_index, x, y, image_xscale, image_yscale, image_angle, c_white);",
            "description": ""
        },
        "signature": "draw_skeleton_collision(sprite, animname, frame, x, y, xscale, yscale, rot, colour)",
        "function": "draw_skeleton_collision",
        "documentation": "This function will draw the collision masks associated with the given skeletal animation. You supply the base sprite, the animation set to use and the frame to get the information from, and you can also set the transform properties to suit.",
        "return": "N/A"
    },
    "date_create_datetime": {
        "parameters": [
            {
                "label": "year",
                "documentation": "The year to set."
            },
            {
                "label": "month",
                "documentation": "The month to set."
            },
            {
                "label": "day",
                "documentation": "The day to set."
            },
            {
                "label": "hour",
                "documentation": "The hour to set."
            },
            {
                "label": "minute",
                "documentation": "The minute to set."
            },
            {
                "label": "second",
                "documentation": "The second to set."
            }
        ],
        "example": {
            "code": "mydatetime = date_create_datetime(2011, 9, 15, 9, 43, 30);<br>",
            "description": ""
        },
        "signature": "date_create_datetime(year, month, day, hour, minute, second);",
        "function": "date_create_datetime",
        "documentation": "This function will create a datetime value from the component given as the arguments.",
        "return": "Real"
    },
    "radtodeg": {
        "parameters": [
            {
                "label": "rad",
                "documentation": "The radians to convert."
            }
        ],
        "example": {
            "code": "val = radtodeg( pi );",
            "description": ""
        },
        "signature": "radtodeg(rad);",
        "function": "radtodeg",
        "documentation": "Once you have done your calculations using sin, or cos etc... the result is in radians. This may not always be what you want and so to turn the radians into degrees we use this function. For example, radtodeg(sin(180)) will return -45 degrees. This function translates radians into degrees using the formula:",
        "return": "Real"
    },
    "skeleton_bone_data_get": {
        "parameters": [
            {
                "label": "bone",
                "documentation": "The name (as a string) of the bone."
            },
            {
                "label": "map",
                "documentation": "The (previously created) ds_map that stores the bone data."
            }
        ],
        "example": {
            "code": "bone_map = ds_map_create();<br> skeleton_bone_data_get(\"leftarm\", bone_map);<br>",
            "description": ""
        },
        "signature": "skeleton_bone_data_get(bone, map);",
        "function": "skeleton_bone_data_get",
        "documentation": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program. This function can be used to get information on the named bone at any time and store the data in an empty [ds_map](../../data_structures/ds%20maps/index.html), which you must have created previously. Note that this data refers to the **default** pose for the skeleton, and not the current pose that is being drawn. If you need the data from the **current** pose, use [skeleton\\_bone\\_state_get](skeleton_bone_state_get.html).",
        "return": "N/A"
    },
    "x": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check(vk_left) x += 5;<br> if keyboard_check(vk_right) x -= 5;<br>",
            "description": ""
        },
        "signature": "x;",
        "function": "x;",
        "documentation": "",
        "return": "Real"
    },
    "path_rescale": {
        "parameters": [],
        "example": {
            "code": "path_rescale(path0, 3, 3);",
            "description": ""
        },
        "signature": "path_rescale(index, xscale, yscale);",
        "function": "path_rescale",
        "documentation": "This function can be used to rescale the given path along both (or either) the vertical and horizontal axis, basically moving each of the path points to a new position corresponding to this scale around the centre of the path. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.",
        "return": "N/A"
    },
    "string_delete": {
        "parameters": [
            {
                "label": "str",
                "documentation": "The string to copy and delete from."
            },
            {
                "label": "index",
                "documentation": "The position of the first character to remove."
            },
            {
                "label": "count",
                "documentation": "The number of characters to remove."
            }
        ],
        "example": {
            "code": "str1 = \"Helloo World\";<br> str2 = string_delete(str1, 5, 1);<br>",
            "description": ""
        },
        "signature": "string_delete(str, index, count);",
        "function": "string_delete",
        "documentation": "You can use this function to remove a specific part of a string. So, you supply the input string and the start and end position within that string to remove characters (index starts at 1) and the function will return a new string without that section in it.",
        "return": "String"
    },
    "camera_get_view_width": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var vw = camera_get_view_width(view_camera[0]) / 2;<br> var vh = camera_get_view_height(view_camera[0]) / 2;<br> camera_set_view_pos(view_camera[0], x - vw, y - vh);<br>",
            "description": ""
        },
        "signature": "camera_get_view_width(camera_id)",
        "function": "camera_get_view_width",
        "documentation": "This function can be used to retrieve the width (in pixels) of the given camera.",
        "return": "Real"
    },
    "view_set_xport": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "x",
                "documentation": "The new x position"
            }
        ],
        "example": {
            "code": "if view_get_xport(0) != (display_get_width() / 2) - (view_wport[0] / 2)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_xport(0, (display_get_width() / 2) - (view_wport[0] / 2));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_set_xport(view_port, x)",
        "function": "view_set_xport",
        "documentation": "This function can be used to set the x position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.",
        "return": "N/A"
    },
    "ds_priority_clear": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to clear."
            }
        ],
        "example": {
            "code": "if count = 15 &amp;&amp; !ds_priority_empty(command_queue)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_priority_clear(command_queue);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;ai_count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_clear(id);",
        "function": "ds_priority_clear",
        "documentation": "With this function you can clear all data from the given priority queue data-structure. This does _NOT_ destroy the data-structure (for that you should use [ds\\_priority\\_destroy](ds_priority_destroy.html)) it only wipes all data from it and returns an empty priority queue.",
        "return": "N/A"
    },
    "place_free": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check."
            },
            {
                "label": "y",
                "documentation": "The y position to check."
            }
        ],
        "example": {
            "code": "if place_free(mouse_x, mouse_y)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = mouse_x;<br> &nbsp;&nbsp;&nbsp;y = mouse_y;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "place_free(x, y);",
        "function": "place_free",
        "documentation": "You can use this function to check and see if the calling instance would collide with any instance _flagged as **solid**_ in your game. Now, it should be noted that for this to work, the instance running the code must have a valid collision mask (either for the sprite itself, or through the [mask_index](../../instances/instance_variables/mask_index.html)) and it will only register collisions with those solid flagged instances that also have a valid mask.  \n  \nThe function itself basically works by taking the instance and testing for collisions with only solid flagged instances when placed at the position specified by the x/y arguments. The collision checking can be either precise or based on the bounding box of the instance, depending on what kind of collision mask has been selected.  \n  \nNote that the given x/y coordinates will be floored to the nearest integer before the check is performed.",
        "return": "Boolean."
    },
    "phy_sleeping": {
        "parameters": [],
        "example": {
            "code": "if phy_sleeping<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_sleeping;",
        "function": "phy_sleeping;",
        "documentation": "This **read-only** variable returns whether or not the instance is currently \"sleeping\" (true) or not (false), A \"sleeping\" instance is one that is not actively engaged in any physical simulation. _GameMaker Studio 2_ will put objects to sleep to save simulation cycles when an instance is at rest and not in collision with another instance.",
        "return": "Boolean"
    },
    "gpu_set_tex_min_mip": {
        "parameters": [
            {
                "label": "minmip",
                "documentation": "The minimum mipmap level to use"
            }
        ],
        "example": {
            "code": "if gpu_get_tex_min_mip() != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_min_mip(0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_set_tex_min_mip(minmip);",
        "function": "gpu_set_tex_min_mip",
        "documentation": "With this function you can set the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...",
        "return": "N/A"
    },
    "file_text_read_string": {
        "parameters": [
            {
                "label": "fileid",
                "documentation": "The id of the file to read from."
            }
        ],
        "example": {
            "code": "var i, file;<br> file = file_text_open_read(working_directory + \"hiscore.txt\");<br> for (i = 0; i &lt; 10; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;scr[i] = file_text_read_real(file);<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;scr_name[i] = file_text_read_string(file);<br> &nbsp;&nbsp;&nbsp;file_text_readln(file);<br> &nbsp;&nbsp;&nbsp;}<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_read_string(fileid);",
        "function": "file_text_read_string",
        "documentation": "With this function you can read a string from a text file and the function returns that value to be used or stored in a variable.",
        "return": "String"
    },
    "randomise": {
        "parameters": [],
        "example": {
            "code": "randomise();",
            "description": ""
        },
        "signature": "randomise();<br> // or<br> randomize();",
        "function": "randomise",
        "documentation": "This function sets the seed to a random value. Should you need to keep a consistent value over a number of runs of a game, you should be using [random\\_set\\_seed()](random_set_seed.html). Please note, that when using the random number functions in _GameMaker Studio 2_ the initial seed is always the same, as this makes tracing errors and debugging far easier. Should you wish to test with true random, you should call this function at the start of your game. The function will return the new randomised seed value (an unsigned 32bit integer).",
        "return": "Integer (unsigned 32 bit value)"
    },
    "layer_vspeed": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to set the vertical speed of"
            },
            {
                "label": "vspd",
                "documentation": "The vertical speed (in pixels per game frame) to set"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Sprites\");<br> if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_hspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;layer_vspeed(lay_id, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_vspeed(layer_id, vspd)",
        "function": "layer_vspeed",
        "documentation": "You can use this function to set the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is downwards and a negative value upwards.",
        "return": "N/A"
    },
    "steam_get_stat_int": {
        "parameters": [
            {
                "label": "stat_name",
                "documentation": "The name of the statistic to get (a string)."
            }
        ],
        "example": {
            "code": "xp += 100;<br> steam_set_stat_int(\"Total_XP\", steam_get_stat_int(\"Total_XP\") + 100);<br> if steam_get_stat_int(\"Total_XP\") &gt; 1000<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if !steam_get_achievement(\"Ach_1000XP\") steam_set_achievement(\"Ach_1000XP\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_stat_int(stat_name);",
        "function": "steam_get_stat_int",
        "documentation": "With this function you can get the value of a specific **signed integer** statistic. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
        "return": "Real"
    },
    "ds_grid_value_x": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The x position of the left of the region in the grid, from 0 to (grid width - 1)."
            },
            {
                "label": "y1",
                "documentation": "The y position of the top of the region in the grid, from 0 to (grid height - 1)."
            },
            {
                "label": "x2",
                "documentation": "The x position of the right of the region in the grid, from 0 to (grid width - 1)."
            },
            {
                "label": "y2",
                "documentation": "The y position of the bottom of the region in the grid, from 0 to (grid height - 1)."
            },
            {
                "label": "val",
                "documentation": "The value to find."
            }
        ],
        "example": {
            "code": "if ds_grid_value_exists(grid, 0, 1, 5, 6, val)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;xpos = ds_grid_value_x(grid, 0, 1, 5, 6, val);<br> &nbsp;&nbsp;&nbsp;ypos = ds_grid_value_y(grid, 0, 1, 5, 6, val);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_grid_value_x(index, x1, y1, x2, y2, val);",
        "function": "ds_grid_value_x",
        "documentation": "With this function you can get the x coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by [ds\\_grid\\_create](ds_grid_create.html)) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
        "return": "Real"
    },
    "date_inc_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to add to"
            },
            {
                "label": "amount",
                "documentation": "The number of years (must be an integer) to add."
            }
        ],
        "example": {
            "code": "mynewdatetime = date_inc_year(date_current_datetime(), 1000);",
            "description": ""
        },
        "signature": "date_inc_year(date, amount);",
        "function": "date_inc_year",
        "documentation": "With this function you can increment a given datetime value by a specific number of years, and it will return the new datetime value.",
        "return": "Real"
    },
    "layer_get_id": {
        "parameters": [
            {
                "label": "layer_name",
                "documentation": "The name of the layer (a string)"
            }
        ],
        "example": {
            "code": "var near = instance_nearest(x, y, obj_Tree);<br> var layer_id = layer_get_id(\"Instances Front\");<br> layer_add_instance(layer_id, near);<br>",
            "description": ""
        },
        "signature": "layer_get_id(layer_name)",
        "function": "layer_get_id",
        "documentation": "",
        "return": "Layer ID Value (Real), or -1 if the layer specified doesn't exist"
    },
    "tilemap_get_tile_width": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the tile cell width of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> global.snap_x = tilemap_get_tile_width(map_id);<br> global.snap_y = tilemap_get_tile_height(map_id);<br>",
            "description": ""
        },
        "signature": "tilemap_get_tile_width(tilemap_element_id);",
        "function": "tilemap_get_tile_width",
        "documentation": "",
        "return": "Real"
    },
    "browser_input_capture": {
        "parameters": [],
        "example": {
            "code": "browser_input_capture(true);",
            "description": ""
        },
        "signature": "browser_input_capture(enable)",
        "function": "browser_input_capture",
        "documentation": "With this function you can set whether the browser window should capture all input (set it to false) or whether the game should capture the input (set it to true). Note that this function is for use with the HTML5 module only.",
        "return": "N/A"
    },
    "get_integer_async": {
        "parameters": [
            {
                "label": "String",
                "documentation": "The message to show in the dialog."
            },
            {
                "label": "default",
                "documentation": "The default value."
            }
        ],
        "signature": "get_integer_async(string, default);",
        "function": "get_integer_async",
        "documentation": "This function opens a window and displays message as well as a space for the user to input a value (which will contain the supplied default value to start with). This is an asynchronous function, and as such _GameMaker Studio 2_ does _not_ block the device it is being run on while waiting for answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the \"Okay\" button, an asynchronous **Dialog** event is triggered which, for the duration of that event _only_, will have a ds_map stored in the variable async_load.",
        "return": "Real"
    },
    "keyboard_get_map": {
        "parameters": [
            {
                "label": "key",
                "documentation": "This is the key that you wish to get the mapped value from"
            }
        ],
        "example": {
            "code": "if keyboard_get_map(ord(\"A\")) = ord(\"A\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;keyboard_set_map(ord(\"A\"), keyboard_lastkey);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_get_map(key);",
        "function": "keyboard_get_map",
        "documentation": "Sometimes you may wish to get the ascii code for a mapped key (to see if it is already mapped, for example) which is what this function returns.",
        "return": "Real"
    },
    "gpu_get_blendenable": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_blendenable() == false<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_blendenable(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_blendenable();",
        "function": "gpu_get_blendenable",
        "documentation": "This function can be used to retrieve the alpha-blending state. If it returns true then alpha-blending is enabled, and if it returns false it is disabled. By default this is on and so the function will return true",
        "return": "Boolean"
    },
    "hspeed": {
        "parameters": [],
        "example": {
            "code": "if keyboard_check(vk_left) hspeed = -5;<br> if keyboard_check(vk_right) hspeed = 5;<br>",
            "description": ""
        },
        "signature": "hspeed;",
        "function": "hspeed;",
        "documentation": "",
        "return": "Real"
    },
    "object_get_sprite": {
        "parameters": [],
        "signature": "object_get_sprite(obj);",
        "function": "object_get_sprite",
        "documentation": "This function will tell you whether the object you are checking has a sprite or not, and if it does then it will return the index of that sprite, or -1 if it does not. Please note that this is not an instance function! You can have an object with no sprite while an instance of that same object can have one and vice-versa, or they can even have different sprites. You can set an individual instances sprite using the [sprite_index](../instances/instance_variables/sprite_index.html) instance variable.",
        "return": "real"
    },
    "path_add_point": {
        "parameters": [],
        "example": {
            "code": "path = path_add();<br> var i;<br> i = 0;<br> repeat(10)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_add_point(path0, x + lengthdir_x(50, i), y+ lengthdir_y(50, i), 100);<br> &nbsp;&nbsp;&nbsp;i += 36;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_add_point(index, x, y, speed);",
        "function": "path_add_point",
        "documentation": "With this function you can add a point to the specified path and set its speed factor. This point is added onto the end of the path, irrespective of the position of the point, and the factor is equal to the percentage of [path_speed](../path_speed.html) that the following instance actually goes at when it reaches this point in the path. If you wish to place a path point at some other position that is not the end, you should use [path\\_insert\\_point](path_insert_point.html).",
        "return": "N/A"
    },
    "tile_get_mirror": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> var data = tilemap_get(map_id, mx, my);<br> var bool = !tile_get_mirror(data);<br> data = tile_set_mirror(data, bool);<br> tilemap_set(map_id, data, mx, my);<br>",
            "description": ""
        },
        "signature": "tile_get_mirror(tiledata)",
        "function": "tile_get_mirror",
        "documentation": "",
        "return": "Boolean"
    },
    "steam_download_scores_around_user": {
        "parameters": [
            {
                "label": "lb_name",
                "documentation": "The name of the leaderboard that you are downloading the scores from (a string)."
            },
            {
                "label": "range_start",
                "documentation": "The start position within the leaderboard."
            },
            {
                "label": "range_end",
                "documentation": "The end position within the leaderboard."
            }
        ],
        "example": {
            "code": "score_get = steam_download_scores_around_user(\"Game Scores\", -4, 5);<br>",
            "description": ""
        },
        "signature": "steam_download_scores_around_user(lb_name, range_start, range_end);",
        "function": "steam_download_scores_around_user",
        "documentation": "This function is used to retrieve leaderboard entries relative the current users entry. The range_start parameter is the number of entries to retrieve _before_ the current users entry, and the range_end parameter is the number of entries after the current user's entry, and the current user's entry is _always_ included in the results. For example, if the current user is number 5 on a given leaderboard, then setting the start range to -2 and the end range to 2 will return 5 entries: 3 through 7. If there are not enough entries in the leaderboard before or after the user's entry, Steam will adjust the range to try to return the number of entries requested. For example, if the user is #1 on the leaderboard, start is set to -2, and end is set to 2, Steam will return the first 5 entries in the leaderboard.",
        "return": "Real"
    },
    "audio_emitter_falloff": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to change."
            },
            {
                "label": "falloff_ref",
                "documentation": "The falloff reference relative to the listener (clamp)."
            },
            {
                "label": "falloff_max",
                "documentation": "The maximum falloff distance relative to the listener."
            },
            {
                "label": "falloff_factor",
                "documentation": "The falloff factor (default 1)."
            }
        ],
        "example": {
            "code": "s_emit = audio_emitter_create();<br> audio_emitter_position(s_emit, x, y, 0);<br> audio_emitter_falloff(s_emit, 100, 300, 1);<br>",
            "description": ""
        },
        "signature": "audio_emitter_falloff(emitter, falloff_ref, falloff_max, falloff_factor);",
        "function": "audio_emitter_falloff",
        "documentation": "With this function you can set the fall-off distance for an emitter. This is the distance from the _listener_ the emitter has to be before the sound will have \"fallen off\" to a volume of 0. The default value for this is 100, but beware of setting this to any value lower than 1 as that will make any sound played through this emitter inaudible to the _listener_, however any other value will cause the sound to fade away the further that the emitter is from the _listener_.",
        "return": "N/A"
    },
    "ef_rain": {
        "parameters": [],
        "example": {
            "code": "switch (global.weather)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 1:<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_rain, 0, 0, 1, c_gray);<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;case 2:<br> &nbsp;&nbsp;&nbsp;effect_create_above(ef_snow, 0, 0, 1, c_gray);<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_rain;",
        "function": "ef_rain;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a rain effect as illustrated in the image below:  \n  \n![](images/ef_rain.png)  \n  \n_**NOTE:** This effect needs no x/y position as it is always drawn at the 0,0 room position to cover the full screen and the size value relates to the number of particles created, not the size of individual particles._",
        "return": "N/A."
    },
    "draw_skeleton_instance": {
        "parameters": [
            {
                "label": "instance",
                "documentation": "The index of the instance to draw the sprite from."
            },
            {
                "label": "animname",
                "documentation": "The name of the animation to get the frame from (a string)."
            },
            {
                "label": "skinname",
                "documentation": "The name of the skin to use (a string)."
            },
            {
                "label": "frame",
                "documentation": "The animation frame to draw (from 0 to image_number - 1)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_skeleton_instance(obj_Player, \"jump\", \"skin1\", 0, x, y, 1, 1, 0, c_white, 1);",
            "description": ""
        },
        "signature": "draw_skeleton_instance(instance, animname, skinname, frame, x, y, xscale, yscale, rot, colour, alpha);",
        "function": "draw_skeleton_instance",
        "documentation": "This function is _only_ for use with instances which have sprites assigned to them created using the skeletal animation program Spine. While you can draw these sprites using the normal draw functions (like [draw_self()](draw_self.html)), there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties for an instance. In these cases you can draw the sprite that has been assigned to the instance with this function, where you give the unique Instance ID and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling _GameMaker Studio 2_ what part of the animation to show and is a value between 0 and the [image_number](../../instances/instance_variables/image_number.html). The rest of the arguments are the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.",
        "return": "N/A"
    },
    "object_get_solid": {
        "parameters": [],
        "signature": "object_get_solid(obj);",
        "function": "object_get_solid",
        "documentation": "This function will tell you whether the object you are checking has been flagged as \"solid\" or not. A solid object generates a special collision event when using the traditional collision system (ie: the physics world is off). Please note that this is not an instance function! So, you can have a solid object and a normal instance of the same object and vice-versa. You can set an individual instances solid flag using the [solid](../instances/instance_variables/solid.html) instance variable.",
        "return": "Boolean"
    },
    "path_get_y": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            },
            {
                "label": "pos",
                "documentation": "How far through the path to check. Between 0 (start) and 1 (end)."
            }
        ],
        "example": {
            "code": "y = path_get_y( path0, 0.5 );",
            "description": ""
        },
        "signature": "path_get_y(ind, pos);",
        "function": "path_get_y",
        "documentation": "With this function you can get the y coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to the normalised distance along the length of the path. This value needn't be a defining point of the path, it can be anywhere on it.",
        "return": "Real."
    },
    "room_set_width": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the room to set the width of."
            },
            {
                "label": "w",
                "documentation": "The new width of the room in pixels."
            }
        ],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_width(global.myroom, 640);<br> room_set_height(global.myroom, 480);<br> room_set_persistent(global.myroom, false);",
            "description": ""
        },
        "signature": "room_set_width(index, w);",
        "function": "room_set_width",
        "documentation": "",
        "return": "N/A"
    },
    "ds_grid_multiply_disk": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            },
            {
                "label": "val",
                "documentation": "The value to multiply the cells within the disk with."
            }
        ],
        "example": {
            "code": "ds_grid_multiply_disk(mygrid, 5, 5, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_multiply_disk(index, xm, ym, r, val);",
        "function": "ds_grid_multiply_disk",
        "documentation": "This function will take all the values in a given disc-shaped region of the ds_grid, and multiply each one by the given amount.",
        "return": "N/A"
    },
    "file_find_first": {
        "parameters": [
            {
                "label": "mask",
                "documentation": "The mask to use for searching."
            },
            {
                "label": "attr",
                "documentation": "The specific file attribute to look for."
            }
        ],
        "example": {
            "code": "if directory_exists(\"\\User Content\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file = file_find_first(\"\\User Content\\*.doc\", fa_readonly);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "file_find_first(mask, attr);",
        "function": "file_find_first",
        "documentation": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned. The mask can contain a path and can contain wildchars, for example 'C:\\\\temp\\\\*.doc'. The attributes give the additional files you want to see, so the normal files are always returned when they satisfy the mask. You can add up the following constants to see the type of files you want (if you do not wish to add any attributes, use 0):",
        "return": "String"
    },
    "layer_sprite_get_angle": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_angle(spr_id) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_yscale(spr_id, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_angle(sprite_element_id);",
        "function": "layer_sprite_get_angle",
        "documentation": "",
        "return": "Real"
    },
    "timeline_size": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the timeline get the information from."
            }
        ],
        "example": {
            "code": "if timeline_size(global.tl) == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_moment_add_script(global.tl, room_speed + irandom(room_speed), scr_spawn_enemy);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_size(ind);",
        "function": "timeline_size",
        "documentation": "With this function you can get the total number of active moments for a timeline (an \"active\" moment is one which has code or DnD™ added to it). This can be handy when creating dynamic timelines using the [timeline\\_moment\\_add_script()](timeline_moment_add_script.html) and [timeline\\_moment\\_clear()](timeline_moment_clear.html) functions, as you can check to see if a given timeline has the correct number of active moments or none at all.",
        "return": "N/A"
    },
    "camera_set_default": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var new_cam = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1); camera_set_default(new_cam);",
            "description": ""
        },
        "signature": "camera_set_default(camera_id)",
        "function": "camera_set_default",
        "documentation": "This function can be used to set the default camera to use a custom camera that you have previously created using one of the camera_create functions. When you create a room with _no_ active view ports or view cameras, _GameMaker Studio 2_ still uses a camera to show the action in the game. This camera is called the **default** camera and can be set and manipulated (and even destroyed) just like any other camera.",
        "return": "N/A"
    },
    "part_system_create_layer": {
        "parameters": [
            {
                "label": "layer",
                "documentation": "The layer ID value or string to assign the particle system to (can be any layer type)"
            },
            {
                "label": "persistent",
                "documentation": "Flag the particle system as persistent (set to true) or not (set to false)"
            }
        ],
        "example": {
            "code": "global.p_sys = part_system_create_layer(\"effects_layer\", true);",
            "description": ""
        },
        "signature": "part_system_create_layer(layer_id, persistent);",
        "function": "part_system_create_layer",
        "documentation": "This function will create a new particle system on a given layer. You give the unique layer ID as returned by the function [layer_create()](../../../rooms/layers/layer_create.html) or the name of the layer to use as a string - for example \"instance_layer\" - and then flag the system as being persistent or not. If the system is flagged as persistent then it will be persisted across all rooms after it has been created (and assigned a managed layer if the initial layer does not exist in subsequent rooms), but if persistence is _not_ flagged, then the system will be automatically destroyed at the end of the room it was created in (this is the same as if you had called the function [part\\_system\\_destroy](part_system_destroy.html) and will also destroy any emitters associated with the system). The function will return a unique ID value for the particle system that should be used in all further function calls where you need to give a system ID.",
        "return": "Real (unique particle system ID value)"
    },
    "part_type_destroy": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to destroy."
            }
        ],
        "example": {
            "code": "if part_particles_count(smoke_sys) = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_type_destroy(smoke_part);<br> &nbsp;&nbsp;&nbsp;part_system_destroy(smoke_sys);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br> else alarm[0] = 1;<br>",
            "description": ""
        },
        "signature": "part_type_destroy(ind);",
        "function": "part_type_destroy",
        "documentation": "With this function you can remove the specified particle type from the game. When you use this function, all particles of the given type will disappear from the room and the particle itself is removed form memory, so this function should be used only when you no longer need the particle.",
        "return": "N/A"
    },
    "image_alpha": {
        "parameters": [],
        "example": {
            "code": "image_alpha = clamp(image_alpha - 0.01, 0, 1);",
            "description": ""
        },
        "signature": "image_alpha;",
        "function": "image_alpha;",
        "documentation": "",
        "return": "Real (between 0 and 1)"
    },
    "physics_set_friction": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the id of the bound fixture"
            },
            {
                "label": "friction",
                "documentation": "the new friction value to apply"
            }
        ],
        "example": {
            "code": "var fric = physics_get_friction(fix_id);<br> physics_set_friction(fix_id, fric + 0.1);<br>",
            "description": ""
        },
        "signature": "physics_set_friction(fixture, friction)",
        "function": "physics_set_friction",
        "documentation": "When you bind a fixture to an instance using [physics\\_fixture\\_bind](physics_fixture_bind.html) this returns an \"id\" for the bound fixture. You can use this id to set the friction value of the bound fixture, _not_ the \"base\" fixture, at any time using this function. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative value if required.",
        "return": "N/A"
    },
    "layer_background_get_visible": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_visible(back_id)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_visible(back_id, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_visible(background_element_id);",
        "function": " layer_background_get_visible",
        "documentation": "",
        "return": "Boolean"
    },
    "steam_download_friends_scores": {
        "parameters": [
            {
                "label": "lb_name",
                "documentation": "The name of the leaderboard that you are downloading the scores from (a string)."
            }
        ],
        "example": {
            "code": "score_get = steam_download_friends_scores(\"Game Scores\");<br>",
            "description": ""
        },
        "signature": "steam_download_friends_scores(lb_name);",
        "function": "steam_download_friends_scores",
        "documentation": "With this function you can retrieve _only_ the scores on the leaderboard that belong to those people that are marked as \"friends\" in the Steam client. So, if your leaderboard has 200 entries, and 50 of them are your friends, this function will retrieve only those 50 results. The leaderboard name is a string that was defined when you created the leaderboard using the function [steam\\_create\\_leaderboard](steam_create_leaderboard.html), and the function will return a value which can then be used to identify the call-back in the [Steam Async Event](../../../2_interface/1_editors/events/async_events.html), or it will return -1 if it has failed.",
        "return": "Real"
    },
    "steam_ugc_create_query_all": {
        "parameters": [
            {
                "label": "query_type",
                "documentation": "The type of query to create (see constants listed below)."
            },
            {
                "label": "match_type",
                "documentation": "The type of UGC items to query (see constants listed below)."
            },
            {
                "label": "page",
                "documentation": "The page number to query."
            }
        ],
        "example": {
            "code": "query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);",
            "description": ""
        },
        "signature": "steam_ugc_create_query_all(query_type, match_type, page);",
        "function": "steam_ugc_create_query_all",
        "documentation": "This function can be used to query the UGC data base using some pre-defined query types. The function requires the following constants for the type of query to create, the type of item to query and the page number to query - note that a query will return a _maximum_ number of 50 items.",
        "return": "Query Handle"
    },
    "view_wport": {
        "parameters": [],
        "example": {
            "code": "camera_set_view_size(view_camera[0], view_wport[0], view_hport[0]);<br>",
            "description": ""
        },
        "signature": "view_wport[0 ... 7];",
        "function": "view_wport[0 ... 7];",
        "documentation": "",
        "return": "Integer"
    },
    "ds_list_empty": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if count == 15 &amp;&amp; !ds_list_empty(command_list)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_clear(command_list);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed;<br> &nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_empty(id);",
        "function": "ds_list_empty",
        "documentation": "With this function you can check the given ds_list to see if it is empty (returns true) or not (returns false).",
        "return": "Boolean"
    },
    "ds_map_create": {
        "parameters": [],
        "example": {
            "code": "inventory = ds_map_create();",
            "description": ""
        },
        "signature": "ds_map_create();",
        "function": "ds_map_create",
        "documentation": "This function is used to create a new, empty, ds\\_map and will return its id which is then used to access the data structure in all other ds\\_map functions.",
        "return": "Map id."
    },
    "part_type_death": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "death_number",
                "documentation": "The quantity of the new particle to create at the particle death. If a negative value, it will instead create a fraction chance one is created (eg -3 would mean that one is created every 3 or so steps)."
            },
            {
                "label": "death_type",
                "documentation": "The index of the particle type to create."
            }
        ],
        "example": {
            "code": "particle1 = part_type_create();<br> part_type_shape(particle1, pt_shape_flare);<br> part_type_size(particle1, 0.20, 0.30, 0.50, 0);<br> part_type_scale(particle1, 0.10, 0.20);<br> part_type_colour3(particle1, 33023, 8454143, 33023);<br> part_type_alpha3(particle1, 0.30, 0.50, 0);<br> part_type_speed(particle1, 0.40, 1, 0, 0);<br> part_type_direction(particle1, 0, 359, 0, 20);<br> part_type_gravity(particle1, 0.20, 90);<br> part_type_orientation(particle1, 90, 90, 0, 0, 1);<br> part_type_blend(particle1, 1);<br> part_type_life(particle1, 1, 40);<br> particle2 = part_type_create();<br> part_type_shape(particle2, pt_shape_smoke);<br> part_type_size(particle2, 1, 1, 0, 0);<br> part_type_scale(particle2, 0.50, 0.50);<br> part_type_colour1(particle2, 12632256);<br> part_type_alpha3(particle2, 0.10, 0.40, 0);<br> part_type_speed(particle2, 0.50, 0.50, 0, 0);<br> part_type_direction(particle2, 0, 359, 0, 0);<br> part_type_gravity(particle2, 0.20, 90);<br> part_type_orientation(particle2, 0, 359, 0, 1, 1);<br> part_type_blend(particle2, 0);<br> part_type_life(particle2, 60, 60);<br> part_type_death(particle1, 1, particle2);<br>",
            "description": ""
        },
        "signature": "part_type_death(ind, death_number, death_type);",
        "function": "part_type_death",
        "documentation": "This function can be used to make your particle burst another type of particle at the end of its lifetime.  \n  \n_**NOTE:** NEVER use the same particle type as this will cause an infinite loop and can crash the game in seconds! Also, be very careful when using this as it can greatly increase the number of particles on-screen at a time and cause your games to slow down noticeably._",
        "return": "N/A"
    },
    "draw_sprite_part_ext": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "left",
                "documentation": "The x position on the sprite of the top left corner of the area to draw."
            },
            {
                "label": "top",
                "documentation": "The y position on the sprite of the top left corner of the area to draw."
            },
            {
                "label": "width",
                "documentation": "The width of the area to draw."
            },
            {
                "label": "height",
                "documentation": "The height of the area to draw."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "colour",
                "documentation": "The colour with which to blend the sprite. c_white is to display it normally."
            },
            {
                "label": "alpha",
                "documentation": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
            }
        ],
        "example": {
            "code": "draw_sprite_part_ext(sprite_index, image_index, 8, 8, sprite_width-16, sprite_height-16, x, y, 2, 0.5, c_black, 1);",
            "description": ""
        },
        "signature": "draw_sprite_part_ext(sprite, subimg, left, top, width, height, x, y, xscale, yscale, colour, alpha);",
        "function": "draw_sprite_part_ext",
        "documentation": "This function will draw a part of the chosen sprite at the given position following the same rules as per [draw\\_sprite\\_part](draw_sprite_part.html), only now you can scale the part, blend a colour with it, or change its alpha when drawing it to the screen (the same as when drawing a sprite with [draw\\_sprite\\_ext](draw_sprite_ext.html)). You should note that if the texture page permits automatic cropping then this function may not work as expected, since the extra \"empty\" space around the sprite will have been removed for creating the texture page. To resolve this issue, you will need to set the texture page settings (in the [Texture Group Editor](../../../../2_interface/3_settings/textures.html)) to disable the **Automatic Crop**.",
        "return": "N/A"
    },
    "physics_fixture_add_point": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "the index of the fixture"
            },
            {
                "label": "xpos",
                "documentation": "the x position of the point (relative to the fixture origin for polygon shapes)"
            },
            {
                "label": "ypos",
                "documentation": "the y position of the point (relative to the fixture origin for polygon shapes)"
            }
        ],
        "example": {
            "code": "physics_fixture_set_polygon_shape(fix_Ship);<br> physics_fixture_add_point(fix_Ship, 0,0);<br> physics_fixture_add_point(fix_Ship, -40, 100);<br> physics_fixture_add_point(fix_Ship, 40, 100);<br>",
            "description": ""
        },
        "signature": "physics_fixture_add_point(fixture, xpos, ypos)",
        "function": "physics_fixture_add_point",
        "documentation": "This function defines the points of a polygon which has previously been set to the fixture using either [physics\\_fixture\\_set\\_polygon\\_shape](physics_fixture_set_polygon_shape.html) or it can be used to add points to a chain of edge fixtures using the function [physics\\_fixture\\_set\\_chain\\_shape](physics_fixture_set_chain_shape.html). For a polygon shape, the points are relative to the origin of the fixture, with the 0,0 position of the x/y axis being the centre, and the subsequent coordinates being calculated as usual in _GameMaker Studio 2_ with down/right being +x,+y and up/left being -x,-y. Here is an illustration to help you visualise this process:  \n  \n![](images/physics_fixture_add_point_image.png)",
        "return": "N/A"
    },
    "layer_sprite_get_y": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"sprite_sky\");<br> var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");<br> if layer_sprite_get_y(spr_id) &lt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_y(spr_id, room_height);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_get_y(sprite_element_id);",
        "function": "layer_sprite_get_y",
        "documentation": "",
        "return": "Real"
    },
    "string_byte_length": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to measure the number of bytes of."
            }
        ],
        "example": {
            "code": "bytesize = string_byte_length(\"Hello World\");",
            "description": ""
        },
        "signature": "string_byte_length(string);",
        "function": "string_byte_length",
        "documentation": "This function returns the number of bytes in a string, but you should note that due to their being held as UTF8, this will _not_ be equal to their string length.",
        "return": "Real"
    },
    "audio_emitter_get_vx": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_vx(emitter_player) != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_velocity(emitter_player, 0, 0, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_vx(emitter);",
        "function": "audio_emitter_get_vx",
        "documentation": "This function returns the current velocity along the x axis for the given audio emitter.",
        "return": "Real"
    },
    "part_type_step": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "step_number",
                "documentation": "The quantity of the new particle to create per step."
            },
            {
                "label": "step_type",
                "documentation": "The index of the particle type to create."
            }
        ],
        "example": {
            "code": "particle2 = part_type_create();<br> part_type_shape(particle2, pt_shape_smoke);<br> part_type_size(particle2, 0.01, 0.01, 0.01, 0);<br> part_type_scale(particle2, 1, 1);<br> part_type_colour3(particle2, 4227327, 8454143, 4227327);<br> part_type_alpha3(particle2,1, 0.50, 0.80);<br> part_type_speed(particle2, 0, 0, 0, 0);<br> part_type_direction(particle2, 0, 359, 0, 0);<br> part_type_gravity(particle2, 0, 270);<br> part_type_orientation(particle2, 0, 0, -2, 0, 1);<br> part_type_blend(particle2, 1);<br> part_type_life(particle2, 160, 160);<br> particle3 = part_type_create();<br> part_type_shape(particle3, pt_shape_flare);<br> part_type_size(particle3, 0.20, 0.20, 0.02, 0);<br> part_type_scale(particle3, 1, 1);<br> part_type_colour3(particle3, 16777215, 8454143, 16777215);<br> part_type_alpha3(particle3, 0, 0.50, 0);<br> part_type_speed(particle3, 3, 3, -0.03, 0);<br> part_type_direction(particle3, 0, 359, 0, 0);<br> part_type_gravity(particle3, 0, 270);<br> part_type_orientation(particle3, 0, 0, 0, 0, 1);<br> part_type_blend(particle3, 1);<br> part_type_life(particle3, 40, 80);<br> part_type_step(particle2, 2, particle3);<br>",
            "description": ""
        },
        "signature": "part_type_step(ind, step_number, step_type);",
        "function": "part_type_step",
        "documentation": "This function can be used to make your particle type stream another type each step until the end of its lifetime. You can set a negative value for the step number and a particle will be emitted at a random interval based on that, so that, for example, a value of -3 will have a 1:3 chance of emitting a particle each step.  \n  \n_**NOTE:** NEVER use the same particle type as this will cause an infinite loop and can crash the game in seconds! Also, be very careful when using this as it can greatly increase the number of particles on-screen at a time and cause your games to slow down noticeably._",
        "return": "N/A"
    },
    "physics_joint_gear_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "joint_1",
                "documentation": "A previously defined revolute joint"
            },
            {
                "label": "joint_2",
                "documentation": "A previously defined revolute or prismatic joint"
            },
            {
                "label": "ratio",
                "documentation": "Set the velocity ratio between the two joints"
            }
        ],
        "example": {
            "code": "var t_fix, g_fix, inst1, inst2, inst3, r_joint, p_joint;<br> g_fix = physics_fixture_create();<br> physics_fixture_set_box_shape(g_fix, 40, 10);<br> t_fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(t_fix, 10);<br> physics_fixture_set_density(t_fix, 0.5);<br> inst1 = instance_create_layer(60, room_height - 30, \"Background\", obj_Ground);<br> inst2 = instance_create_layer(40, room_height - 300, \"Instances\", obj_Cog);<br> inst3 = instance_create_layer(150, room_height - 300, \"Instances\", obj_Barrel);<br> physics_fixture_bind(g_fix, inst1);<br> physics_fixture_bind(t_fix, inst2);<br> physics_fixture_bind(t_fix, inst3);<br> r_joint = physics_create_revolute_joint(inst1, inst2, 40, room_height - 300, -80, 80, 1, 10, 0.5, 1, 0);<br> p_joint = physics_create_prismatic_joint(inst1, inst3, 150, room_height - 300, 0, 1, -10, 10, true, 0, 0, 0, 0);<br> physics_create_gear_joint(inst2, inst3, r_joint, p_joint, 0.5);<br>",
            "description": ""
        },
        "signature": "physics_joint_gear_create(inst1, inst2, joint_1, joint_2, ratio)",
        "function": "physics_joint_gear_create",
        "documentation": "If you want to create a sophisticated mechanical contraption you might want to use gears. In principle you can create gears in _GameMaker Studio 2_ by using compounding instances to model gear teeth, but this is not very efficient and might be tedious to author! Thankfully there is a simpler method, and that is to use a _gear joint_. To make one you need to have previously defined your fixtures and created the two basic joints that are going to comprise your gear - these **must** be made up of one [revolute joint](physics_joint_revolute_create.html) and either a [prismatic joint](physics_joint_prismatic_create.html) or another _revolute joint_. The image below shows how a gear would typically be created in a game: ![](images/gear_joint_image.png) So what happens? Well, once the two joints are added into the gear, interaction with one will have an effect on the other, so in the example image above, if you rotate inst2, inst3 will move up and down, or if you move inst3 up and down then inst2 will rotate. You can also change the gear ratio, meaning that you need to move one instance more (or less) to get the desired effect. The code in the example at the bottom shows how something like the image above can be created.  \n  \n_**Note:** If you need to delete either of the two instances that are involved in the gear joint (or just delete their joints) then you **must** delete the gear joint first using [physics\\_joint\\_delete()](physics_joint_delete.html) or else you will get an error!_",
        "return": "index of the joint"
    },
    "sprite_set_cache_size": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the sprite to change the cache size of."
            },
            {
                "label": "max",
                "documentation": "The maximum number of cached copies of the sprite that can be stored."
            }
        ],
        "example": {
            "code": "sprite_set_cache_size(sprite0, 2);",
            "description": ""
        },
        "signature": "sprite_set_cache_size(ind, max);",
        "function": "sprite_set_cache_size",
        "documentation": "When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore _GameMaker Studio 2_ has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to all subimages of the sprite.",
        "return": ""
    },
    "skeleton_animation_get_frame": {
        "parameters": [
            {
                "label": "track",
                "documentation": "The animation track to get the frame of."
            }
        ],
        "example": {
            "code": "var frame = skeleton_animation_get_frame(0);<br> if frame &gt; 0 &amp;&amp; frame &lt; 2<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;var box = skeleton_get_minmax();<br> &nbsp;&nbsp;&nbsp;&nbsp;var ww = (box[2] - box[0]) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;var hh = (box[3] - box[1]) / 2;<br> &nbsp;&nbsp;&nbsp;&nbsp;part_particles_create(global.p_sys, box[0] + ww, box[1] + hh, global.Stars, 10);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_get_frame(track);",
        "function": "skeleton_animation_get_frame",
        "documentation": "This function will return the frame number of the animation on the specified animation track. The function will return -1 if no animation is assigned to the specific track given.",
        "return": "Integer"
    },
    "url_open": {
        "parameters": [
            {
                "label": "url",
                "documentation": "The URL (website address) to link to."
            }
        ],
        "example": {
            "code": "url_open(\"http://yoyogames.com\");",
            "description": ""
        },
        "signature": "url_open(url);",
        "function": "url_open",
        "documentation": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser.",
        "return": "N/A"
    },
    "audio_falloff_set_model": {
        "parameters": [
            {
                "label": "model",
                "documentation": "The constant used to set the falloff model."
            }
        ],
        "example": {
            "code": " audio_falloff_set_model(audio_falloff_exponent_distance_clamped);<br>  audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);<br>",
            "description": ""
        },
        "signature": "audio_falloff_set_model(model);",
        "function": "audio_falloff_set_model",
        "documentation": "To add more versatility to the audio engine, _GameMaker Studio 2_ permits you to select the falloff model that suits your game. This model will be used for **all** the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function [](audio_play_sound_at.html)audio\\_play\\_sound_at.",
        "return": "N/A"
    },
    "device_mouse_y_to_gui": {
        "parameters": [],
        "example": {
            "code": "if device_mouse_check_button(0, mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if device_mouse_y_to_gui(0) &gt; 0 &amp;&amp; device_mouse_y_to_gui(0) &lt; 32<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pressed = false;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "device_mouse_y_to_gui(device);",
        "function": "device_mouse_y_to_gui",
        "documentation": "This function returns the y position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution _and_ the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
        "return": "Real"
    },
    "part_type_blend": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "additive",
                "documentation": "Whether the particles should be blended additively (true) or normally (false)."
            }
        ],
        "example": {
            "code": "part_type_blend(part_Fire, true);",
            "description": ""
        },
        "signature": "part_type_blend(ind, additive);",
        "function": "part_type_blend",
        "documentation": "With this function you can make your particles be drawn with an additive blend mode (true) or not (false). Additive blending is a special blend mode that adds the luminosity values of each particle as they overlap, so that light colours will gradually get brighter (until they appear white) as they overlap, and dark colours become more and more transparent with black being almost invisible. This function can give some beautiful particle effects but may not always be necessary. For example, a smoke trail would have additive blending off to keep the effect gray, but a flame effect would probably have it on to make the particles more translucent and brighter.",
        "return": "N/A"
    },
    "exp": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The power of e."
            }
        ],
        "example": {
            "code": "val = exp(2);",
            "description": ""
        },
        "signature": "exp(n);",
        "function": "exp",
        "documentation": "This is the function power(e,n), where e is approximately 2.718281828 (also known as _Euler's Number_), and n is the number of times it should be multiplied by itself. This basically says \"how much growth do I get after n units of time (and 100% continuous growth)?\". So exp(3) would return 20.08, which means that after 3 time units we have 20.08 times the amount we started with.",
        "return": "Real"
    },
    "matrix_transform_vertex": {
        "parameters": [
            {
                "label": "matrix",
                "documentation": "The matrix to use"
            },
            {
                "label": "x",
                "documentation": "The x component of the transform vector"
            },
            {
                "label": "y",
                "documentation": "The y component of the transform vector"
            },
            {
                "label": "z",
                "documentation": "The z component of the transform vector"
            }
        ],
        "example": {
            "code": "t_matrix = matrix_build(0, 0, 0, 0, 90, 0, 1, 2, 1);<br> verts = matrix_transform_vertex(t_matrix, x, y, z);<br>",
            "description": ""
        },
        "signature": "matrix_transform_vertex(matrix, x, y, z);",
        "function": "matrix_transform_vertex",
        "documentation": "This function transforms a vector by a matrix. You supply the transform matrix ID (as returned by the function [matrix build](matrix_build.html)), as well as the x, y and z values for the vector to transform. The function will return a 1D array of 3 elements where array\\[0\\] = x, array\\[1\\] = y, array\\[2\\] = z.",
        "return": "Array (1D, 3 elements)"
    },
    "steam_file_read": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to read from."
            }
        ],
        "example": {
            "code": "if steam_file_exists(\"Save.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;save_str = steam_file_read(\"Save.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_file_read(filename);",
        "function": "steam_file_read",
        "documentation": "This function will read the contents of the given file into a string which can later be parsed in your game.",
        "return": "String"
    },
    "audio_free_play_queue": {
        "parameters": [
            {
                "label": "queueIndex",
                "documentation": "The index of the queue to free."
            }
        ],
        "example": {
            "code": "var q_id = async_load[? \"queue_id\"]; if q_id == audio_queue &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_free_play_queue(audio_queue);<br> &nbsp;&nbsp;&nbsp;buffer_delete(audio_buffer);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_free_play_queue(queueIndex);",
        "function": "audio_free_play_queue",
        "documentation": "This function is used to free up the memory associated with the given audio queue. The queue index is the value returned when you created the queue using the function [audio\\_create\\_play_queue()](audio_create_play_queue.html), and this function should be called when the queue is no longer required to prevent memory leaks. Freeing the queue will stop any sound that is be playing, and you cannot delete the buffer that a sound is being streamed from until the queue it is assigned to has been freed. This function will trigger an [Audio Playback Asynchronous Event](../../../2_interface/1_editors/events/async_events.html), and in this event a special ds_map will be created in the variable async_load with the following key/value pairs:",
        "return": "N/A"
    },
    "gamepad_set_vibration": {
        "parameters": [
            {
                "label": "device",
                "documentation": "Which gamepad device \"slot\" to check."
            },
            {
                "label": "left_motor",
                "documentation": "The amount of vibration from the left motor from 0 to 1."
            },
            {
                "label": "right_motor",
                "documentation": "The amount of vibration from the right motor from 0 to 1."
            }
        ],
        "example": {
            "code": "if lives = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gamepad_set_vibration(0, 1, 1);<br> &nbsp;&nbsp;&nbsp;alarm[0] = room_speed / 2;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gamepad_set_vibration(device, left_motor, right_motor);",
        "function": "gamepad_set_vibration",
        "documentation": "With this function you can set the vibration of the gamepad motors, with either motor using a value from 0 (no vibration) to 1 (full vibration). Note that there is no time limit on this function, so you will need to use a variable or an alarm to switch off the vibration (set motors to 0) after a given time has passed otherwise the gamepad will continue to vibrate indefinitely.  \n  \n_**NOTE:** This function is currently only available for the standard **Windows**, **PS4** and **Xbox One** target modules._",
        "return": "N/A"
    },
    "mouse_button": {
        "parameters": [],
        "signature": "mouse_button;",
        "function": "mouse_button;",
        "documentation": "This **read only** variable returns the mouse button that is currently being pressed (currently, as in, this step) and can return any of the special mouse constants except mb_any.",
        "return": "Constant (<tt>mb_left</tt>, <tt>mb_middle</tt>, <tt>mb_right</tt>, <tt>my_none</tt>)"
    },
    "draw_roundrect": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
            },
            {
                "label": "outline",
                "documentation": "Whether the rounded rectangle is drawn filled (false) or as a one pixel wide outline (true)."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_lime);<br> draw_roundrect(50, 100, 250, 200, 0);<br>",
            "description": ""
        },
        "signature": "draw_roundrect(x1, y1, x2, y2, outline);",
        "function": "draw_roundrect",
        "documentation": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You can define how precise the drawing of the corners is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html), but this function uses a fixed radius for them (should you need to change the corner radius, use the function [draw\\_roundrect\\_ext()](draw_roundrect_ext.html)).",
        "return": "N/A"
    },
    "gpu_get_texrepeat_ext": {
        "parameters": [
            {
                "label": "sampler_id",
                "documentation": "The sampler id from the shader."
            }
        ],
        "example": {
            "code": "var s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");<br> if !gpu_get_texrepeat_ext(s_tex)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;gpu_set_texrepeat_ext(s_tex, true);<br> &nbsp;&nbsp;&nbsp;}<br> <br>",
            "description": ""
        },
        "signature": "gpu_get_texrepeat_ext(sampler_id);",
        "function": "gpu_get_texrepeat_ext",
        "documentation": "With this function you can check to see whether texture repeating is enabled (returns true) or not (returns false) for a given shader sampler texture.",
        "return": "Boolean"
    },
    "path_position": {
        "parameters": [],
        "example": {
            "code": "path_position = random(1);",
            "description": ""
        },
        "signature": "path_position;",
        "function": "path_position;",
        "documentation": "",
        "return": "Real"
    },
    "room_get_camera": {
        "parameters": [
            {
                "label": "rm",
                "documentation": "The index of the room to get the view camera of"
            },
            {
                "label": "vind",
                "documentation": "The index of the view port to get the camera of"
            }
        ],
        "example": {
            "code": "var cam = room_get_camera(rm_Game, 0);<br> if cam != global.MainCam<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;room_set_camera(rm_Game, 0, global.MainCam);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "room_get_camera(rm, vind);",
        "function": "room_get_camera",
        "documentation": "With this function you can get the unique index ID of the camera assigned to a specific view in a room other than the current one. You give the room to use, the view port to use (from 0 to 7) and the function will return a camera index.",
        "return": "Real (Camera Index)"
    },
    "draw_circle": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the center of the circle."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the center of the circle."
            },
            {
                "label": "r",
                "documentation": "The circle's radius (length from its center to its edge)"
            },
            {
                "label": "outline",
                "documentation": "Whether the circle is drawn filled (false) or as a one pixel wide outline (true)."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> draw_circle(100, 100, 50, true);<br>",
            "description": ""
        },
        "signature": "draw_circle(x, y, r, outline);",
        "function": "draw_circle",
        "documentation": "With this function you can draw either an outline of a circle or a filled circle. You can define how precise the drawing is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html).",
        "return": "N/A"
    },
    "position_empty": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position to check."
            },
            {
                "label": "y",
                "documentation": "The y position to check."
            }
        ],
        "example": {
            "code": "var xx, yy;<br> xx = random(room_width);<br> yy = random(room_height);<br> if position_empty(xx, yy)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(xx, yy, \"Bullets\", obj_Bomb);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "position_empty(x, y);",
        "function": "position_empty",
        "documentation": "This function will check to see if a given position enters into collision with _any instance_ with a valid collision mask at the given position.",
        "return": "Boolean"
    },
    "physics_particle_group_get_centre_y": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "xx = physics_particle_group_get_centre_x(group1);<br> yy = physics_particle_group_get_centre_y(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_centre_y(group)",
        "function": "physics_particle_group_get_centre_y",
        "documentation": "With this function you can retrieve the y component of the center of mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "physics_particle_group_get_vel_x": {
        "parameters": [
            {
                "label": "group",
                "documentation": "The particle group to get."
            }
        ],
        "example": {
            "code": "vx = physics_particle_group_get_vel_x(group1);<br> vy = physics_particle_group_get_vel_y(group1);<br> <br>",
            "description": ""
        },
        "signature": "physics_particle_group_get_vel_x(group)",
        "function": "physics_particle_group_get_vel_x",
        "documentation": "With this function you can retrieve the horizontal velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function [physics\\_particle\\_group_end](physics_particle_group_end.html), and the function will return a value which is the combined value of the currently set flags.",
        "return": "Real"
    },
    "audio_emitter_get_y": {
        "parameters": [
            {
                "label": "emitter",
                "documentation": "The index of the emitter to use."
            }
        ],
        "example": {
            "code": "if audio_emitter_get_y(emitter_player) != x<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_emitter_position(emitter_player, x, y, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_emitter_get_y(emitter);",
        "function": "audio_emitter_get_y",
        "documentation": "This function returns the current y position of the given audio emitter.",
        "return": "Real"
    },
    "window_mouse_set": {
        "parameters": [],
        "example": {
            "code": "window_mouse_set(window_get_width() / 2, window_get_height() / 2);",
            "description": ""
        },
        "signature": "window_mouse_set(x, y);",
        "function": "window_mouse_set",
        "documentation": "",
        "return": "N/A"
    },
    "steam_get_stat_float": {
        "parameters": [
            {
                "label": "stat_name",
                "documentation": "The name of the statistic to get (a string)."
            }
        ],
        "example": {
            "code": "var dist_pc = (dist / dist_max) * 100;<br> if steam_get_stat_float(\"Travelled\") &lt; dist_pc<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;steam_set_stat_int(\"Travelled\", dist_pc);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_get_stat_float(stat_name);",
        "function": "steam_get_stat_float",
        "documentation": "With this function you can get the value of a specific **floating point** statistic. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
        "return": "Real"
    },
    "ds_grid_get_mean": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The left cell column of the region."
            },
            {
                "label": "y1",
                "documentation": "The top cell row of the region."
            },
            {
                "label": "x2",
                "documentation": "The right cell column of the region."
            },
            {
                "label": "y2",
                "documentation": "The bottom cell row of the region."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_mean(grid, 0, 0, 5, 5)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_mean(index, x1, y1, x2, y2);",
        "function": "ds_grid_get_mean",
        "documentation": "This function can be used to find the mean value for all the cells found within the defined region of a grid (all cell values are added together and then divided by the total number of cells that make the region), as shown in the image below: ![](ds_grid_get_mean.png)",
        "return": "Real or String"
    },
    "draw_line_width": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the start of the line."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the start of the line."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the end of the line."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the end of the line."
            },
            {
                "label": "w",
                "documentation": "The width of the line in pixels."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_red);<br> draw_line_width(100, 100, 200, 200, 6);",
            "description": ""
        },
        "signature": "draw_line_width(x1, y1, x2, y2, w);",
        "function": "draw_line_width",
        "documentation": "With this function you can draw a line of a specified width between any two points in the game room.",
        "return": "N/A"
    },
    "script_get_name": {
        "parameters": [
            {
                "label": "scr",
                "documentation": "The index of the script that you want to get the name of."
            }
        ],
        "example": {
            "code": "scr_name = script_get_name(scr_Help_File);",
            "description": ""
        },
        "signature": "script_get_name(scr);",
        "function": "script_get_name",
        "documentation": "This function will return the name _as a string_ of the specified script. This name is the one that has been specified for the script in the resource tree of the main _GameMaker Studio 2_ window. For more information about scripts, see [Scripts](../../3_gml_overview/3_scripts.html).",
        "return": "String"
    },
    "phy_com_y": {
        "parameters": [],
        "example": {
            "code": "xx = phy_com_x;<br> yy = phy_com_y;<br>",
            "description": ""
        },
        "signature": "phy_com_y;",
        "function": "phy_com_y;",
        "documentation": "This **read-only** variable will return the y position of the instances center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions.",
        "return": "Real"
    },
    "steam_ugc_set_item_visibility": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "visibility",
                "documentation": "The visibility (a constant, listed below) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_set_item_visibility(ugc_update_handle, visibility);",
        "function": "steam_ugc_set_item_visibility",
        "documentation": "This function will set the visibility of the given item, set using one of the following constants:",
        "return": "Boolean"
    },
    "audio_exists": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to check the existence of."
            }
        ],
        "example": {
            "code": "if audio_exists(global.Music)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound(global.Music, 0, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_exists(index);",
        "function": "audio_exists",
        "documentation": "This function returns whether a sound exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent asset indices. The sound to check can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions) or a sound asset.",
        "return": "Boolean"
    },
    "audio_listener_position": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position of the listener (default 0)."
            },
            {
                "label": "y",
                "documentation": "The y position of the listener (default 0)."
            },
            {
                "label": "z",
                "documentation": "The z position of the listener (default 0)."
            }
        ],
        "example": {
            "code": "if speed &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_listener_position(x, y, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_listener_position(x, y, z);",
        "function": "audio_listener_position",
        "documentation": "With this function you can change the position of the _listener_ within the 3D audio space. The example image below shows the default position for the listener in the audio space: ![](audio_listener.png)",
        "return": "N/A"
    },
    "audio_set_listener_mask": {
        "parameters": [
            {
                "label": "mask",
                "documentation": "The bitmask data to set for the listeners"
            }
        ],
        "example": {
            "code": "var num = audio_get_listener_count();<br> var mask = 0; for(var i = 0; i &lt; num; ++i;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var info = audio_get_listener_info(i);<br> &nbsp;&nbsp;&nbsp;var m = audio_listener_get_data(info[? \"mask\"]);<br> &nbsp;&nbsp;&nbsp;mask = mask | m;<br> &nbsp;&nbsp;&nbsp;ds_map_destroy(info);<br> &nbsp;&nbsp;&nbsp;}<br> audio_set_listener_mask(mask);<br>",
            "description": ""
        },
        "signature": "audio_set_listener_mask(mask);",
        "function": "audio_set_listener_mask",
        "documentation": "When using multiple listeners on a system, you can set the bit-mask for a sound and have it heard from the flagged listener only. However, you can also set the _global_ mask using this function and all sounds played normally will be heard from the listeners flagged by this mask, without the need to set the mask for each sound individually.",
        "return": "N/A"
    },
    "ini_write_string": {
        "parameters": [
            {
                "label": "section",
                "documentation": "The section of the .ini to write to."
            },
            {
                "label": "key",
                "documentation": "The key within the relevant section of the .ini to write to."
            },
            {
                "label": "value",
                "documentation": "The string to write to the relevant destination."
            }
        ],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> ini_write_string(\"Save\", \"Player\", global.Name);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ini_write_string(section, key, value);",
        "function": "ini_write_string",
        "documentation": "You can use this function to write a string (text) to an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** \\- **value** pairs. So a typical ini file would look something like this: ![](iniexample.png)",
        "return": "N/A"
    },
    "phy_fixed_rotation": {
        "parameters": [],
        "example": {
            "code": "phy_rotation = 0;<br> phy_fixed_rotation = true;<br>",
            "description": ""
        },
        "signature": "phy_fixed_rotation;",
        "function": "phy_fixed_rotation;",
        "documentation": "This variable can be used to set whether or not the instance can be affected by rotational forces (default is false). If this is set to true, no external force (either from coded impulses or forces, or from collisions) will affect the rotation value of the instance and this would have to be set manually using the [phy_rotation](phy_rotation.html) variable.",
        "return": "Boolean"
    },
    "steam_file_size": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The name of the file to check the size of."
            }
        ],
        "example": {
            "code": "file_bytes = steam_file_size(\"Save.txt\");",
            "description": ""
        },
        "signature": "steam_file_size(filename);",
        "function": "steam_file_size",
        "documentation": "With this function you can check the size of a file stored on the Steam Cloud. The returned real number is the size, in bytes, of the file.",
        "return": "Real"
    },
    "audio_create_sync_group": {
        "parameters": [
            {
                "label": "loop",
                "documentation": "Whether the tracks in the group should loop (true) or not (false)."
            }
        ],
        "example": {
            "code": "sg = audio_create_sync_group(true);<br> audio_play_in_sync_group(sg, sound1);<br> audio_play_in_sync_group(sg, sound2);<br> audio_sound_gain(sound2, 0, 0);<br> audio_play_in_sync_group(sg, sound3);<br> audio_sound_gain(sound3, 0, 0);<br> audio_play_in_sync_group(sg, sound4);<br> audio_sound_gain(sound4, 0, 0);<br> audio_start_sync_group(sg);<br>",
            "description": ""
        },
        "signature": "audio_create_sync_group(loop);",
        "function": "audio_create_sync_group",
        "documentation": "Creates a sync group and returns a unique ID value for it which should then be used in all further audio function calls for this group. If you want the group to loop then pass in true, otherwise pass in false, but note that if you want them to loop, _all the tracks added later need to be the same length_. Note that when you create a sync group, you will need to free the memory and sounds associated with it when not in use using the [audio\\_destroy\\_sync_group()](audio_destroy_sync_group.html) function - for example, in the **Room End** or **Destroy** events.",
        "return": "index"
    },
    "audio_stop_sync_group": {
        "parameters": [
            {
                "label": "group_index",
                "documentation": "The group index to stop playing."
            }
        ],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_stop_sync_group(sg);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_stop_sync_group(group_index);",
        "function": "audio_stop_sync_group",
        "documentation": "This function will stop the given sync group if it is playing, with the group index being the value returned when you created the group using the function [audio\\_create\\_sync_group()](audio_create_sync_group.html).",
        "return": "N/A"
    },
    "draw_enable_drawevent": {
        "parameters": [
            {
                "label": "Enable",
                "documentation": "Set to true or false."
            }
        ],
        "example": {
            "code": "frame_skip ++;<br> if (frame_skip mod 5) == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_enable_drawevent(true);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_enable_drawevent(false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_enable_drawevent(enable);",
        "function": "draw_enable_drawevent",
        "documentation": "With this function you can choose to enable (true) or disable (false) the draw event for **all instances in the game**, thus giving you control over how and when things are draw, useful if you wish to implement a \"frame skip\" technique. Note that this doesn't just prevent instances drawing to the screen, it suppresses the draw event completely meaning that care should be taken since any game logic that is present in that event will not be run either.",
        "return": "N/A"
    },
    "ini_close": {
        "parameters": [],
        "example": {
            "code": "ini_open(\"savedata.ini\");<br> score = ini_read_real(\"save1\", \"score\", 0);<br> ini_close();",
            "description": ""
        },
        "signature": "ini_close();",
        "function": "ini_close",
        "documentation": "This function should be called the moment you are finished reading or writing to any open ini file. If you do not use the function after you have used any of the ini write functions, then nothing will be written to disk, as the file information is held in memory until this function is called, which forces the write. If you try to open an ini without having previously closed another one (or the same one) you will get an error too.",
        "return": "String"
    },
    "layer_sprite_speed": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "speed",
                "documentation": "The speed multiplier/value to use for the element"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Assets_water\");<br> var spr_id = layer_sprite_get_id(lay_id, \"gfc_water\");<br> layer_sprite_speed(spr_id, 0.5);<br>",
            "description": ""
        },
        "signature": "layer_sprite_speed(sprite_element_id, speed);",
        "function": "layer_sprite_speed",
        "documentation": "",
        "return": "N/A"
    },
    "tile_set_empty": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to set"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> for (var i = 0; i &lt; tilemap_get_width(map_id); i++;)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;for (var j = 0; j &lt; tilemap_get_height(map_id); j++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data = tilemap_get(map_id, i, j);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if !tile_get_empty(data)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = tile_set_empty(data)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tilemap_set(map_id, data, i, j);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tile_set_empty(tiledata)",
        "function": "tile_set_empty",
        "documentation": "",
        "return": "Real (tiledata)"
    },
    "ds_map_copy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map you are copying to&lt;/&gt;"
            },
            {
                "label": "source",
                "documentation": "The id of the map you are copying from"
            }
        ],
        "example": {
            "code": "inventory_2 = ds_map_create();<br> ds_map_copy(inventory_2, inventory_1);",
            "description": ""
        },
        "signature": "ds_map_copy(id, source);",
        "function": "ds_map_copy",
        "documentation": "You can use this function to copy the contents of one map into another one that you have previously created using ds\\_map\\_create(). If the ds_map that is being copied _to_ is not empty, then this function will clear it first before copying. The original ds_map remains un-changed by this process.",
        "return": "N/A"
    },
    "layer_get_element_layer": {
        "parameters": [
            {
                "label": "element_id",
                "documentation": "The unique ID value of the element to get the layer of"
            }
        ],
        "example": {
            "code": "element = layer_get_element_layer(asset_1);<br>",
            "description": ""
        },
        "signature": "layer_get_element_layer(element_id)",
        "function": "layer_get_element_layer",
        "documentation": "You can use this function to get the _Layer ID_ that the given element is on. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return the unique ID of the layer that the element is found on. If the element ID given is not a valid one, then the function will return -1.",
        "return": "Layer ID or -1 if the element is invalid (ie: does not exist)"
    },
    "draw_point_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the point."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the point."
            },
            {
                "label": "col1",
                "documentation": "The colour of the point."
            }
        ],
        "example": {
            "code": "draw_point_colour(50, 50, c_red);",
            "description": ""
        },
        "signature": "draw_point_colour(x, y, col1);",
        "function": "draw_point_colour",
        "documentation": "With this function you can draw a single pixel anywhere on the screen with a colour that you define. The colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html).",
        "return": "N/A"
    },
    "vertex_position_3d": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "x",
                "documentation": "The x position."
            },
            {
                "label": "y",
                "documentation": "The y position."
            },
            {
                "label": "z",
                "documentation": "The z position."
            }
        ],
        "example": {
            "code": "vertex_position_3d(buff, x - 100, y - 125, 0);",
            "description": ""
        },
        "signature": "vertex_position_3d(buffer, x, y, z);",
        "function": "vertex_position_3d",
        "documentation": "This function will add 3D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z position for drawing.",
        "return": "N/A"
    },
    "date_is_today": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to use."
            }
        ],
        "example": {
            "code": "if date_is_today(global.Halloween)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.Max_Levels = 200;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "date_is_today(date);",
        "function": "date_is_today",
        "documentation": "This function will return true if the given datetime value is the day it is being checked on (ie: today), or false otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking seasonal content. Note that this function will be affected by the time zone set (default is local time) which you can change using the [date\\_set\\_timezone()](date_set_timezone.html) function.",
        "return": "Boolean"
    },
    "lengthdir_x": {
        "parameters": [
            {
                "label": "len",
                "documentation": "The length away of the point to return."
            },
            {
                "label": "dir",
                "documentation": "The direction of the point to return."
            }
        ],
        "example": {
            "code": "var _xx = x + lengthdir_x(64, image_angle);<br> var _yy = y + lengthdir_y(64, image_angle);<br> instance_create_layer(_xx, _yy, \"Bullets\", obj_bullet);",
            "description": ""
        },
        "signature": "lengthdir_x(len, dir);",
        "function": "lengthdir_x",
        "documentation": "This function is used to get the **x** component of a position \"len\" pixels from the starting point and in direction \"dir\". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move to that point we need to move the object so many pixels in that direction... so this function (when used with [lengthdir_y](lengthdir_y.html)) gets the position of that point on the circle to be used in code by the instance. See the image below for details: ![](lengthdir_image.png)",
        "return": "Real"
    },
    "audio_play_sound_at": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to play."
            },
            {
                "label": "x",
                "documentation": "The x position."
            },
            {
                "label": "y",
                "documentation": "The y position."
            },
            {
                "label": "z",
                "documentation": "The z position."
            },
            {
                "label": "falloff_ref",
                "documentation": "The falloff reference relative to the listener (clamp)."
            },
            {
                "label": "falloff_max",
                "documentation": "The maximum falloff distance relative to the listener."
            },
            {
                "label": "falloff_factor",
                "documentation": "The falloff factor (default 1)."
            },
            {
                "label": "loop",
                "documentation": "Flags the sound as looping or not."
            },
            {
                "label": "priority",
                "documentation": "Set the channel priority for the sound."
            }
        ],
        "example": {
            "code": "if global.SFX<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_play_sound_at(index, x, y, z, falloff_ref, falloff_max, falloff_factor, loop, priority);",
        "function": "audio_play_sound_at",
        "documentation": "With this function you can play any sound resource at a given position within the audio space. You provide the sound index and then assign it a position within the 3D space. The default listener position is (0, 0, 0) so this means that if the listener has not been moved and you want the sound to come from the left (for example), you should set the x position to a negative value (for more information on setting the listener position see [audio\\_listener\\_position](audio_listener_position.html)).",
        "return": "Index"
    },
    "ds_map_add": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to add to."
            },
            {
                "label": "key",
                "documentation": "The key of the value to add."
            },
            {
                "label": "val",
                "documentation": "The value to add to the map."
            }
        ],
        "example": {
            "code": "inventory = ds_map_create();<br> ds_map_add(inventory, \"hp potion\", 1);<br> ds_map_add(inventory, \"gold\", 100);<br>",
            "description": ""
        },
        "signature": "ds_map_add(id, key, val);",
        "function": "ds_map_add",
        "documentation": "This function should be used to add sets of key/value pairs into the specified ds\\_map. You can check this function to see if it was successful or not, as it may fail if there already exists the same key in the ds\\_map or you specify a non-existent ds_map as the id of the map to add to. Both keys and values can be made up of either integers or strings, so all of the following are acceptable:",
        "return": "Boolean"
    },
    "ds_stack_write": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to write."
            }
        ],
        "example": {
            "code": "var str;<br> ini_open(\"save.ini\");<br> str =ds_stack_write(stack);<br> ini_write_string(\"Stacks\", \"0\", str);<br> ds_stack_clear(stack);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ds_stack_write(id);",
        "function": "ds_stack_write",
        "documentation": "This function returns a string which can then be stored or transferred to another data structure using the [ds\\_stack\\_read](ds_stack_read.html) function.  \n  \n_**NOTE:** The returned string is not a human readable string, but rather a dump of the contents of the data-structure_",
        "return": "String"
    },
    "draw_primitive_begin": {
        "parameters": [
            {
                "label": "kind",
                "documentation": "The kind of primitive you are going to draw."
            }
        ],
        "example": {
            "code": "var i, steps, xx, yy, radius;<br> steps=20;<br> xx=50;<br> yy=50;<br> radius=30;<br> draw_primitive_begin(pr_trianglefan);<br> draw_vertex(xx, yy);<br> for(i = 0; i &lt;= steps; i += 1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;draw_vertex(xx + lengthdir_x(radius, 270 * i / steps), yy + lengthdir_y(radius, 270 * i / steps));<br> &nbsp;&nbsp;&nbsp;}<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_primitive_begin(kind)",
        "function": "draw_primitive_begin",
        "documentation": "This function must be called before you can define any primitives. There are 6 types of primitives you can define with the following constants:",
        "return": "N/A"
    },
    "application_get_position": {
        "parameters": [],
        "example": {
            "code": "var a = application_get_position();<br> xx = a[0];<br> yy = a[1];<br> ww = a[2] - a[0];<br> hh = a[3] - a[1];<br>",
            "description": ""
        },
        "signature": "application_get_position();",
        "function": "application_get_position",
        "documentation": "When you have \"maintain aspect ratio\" ticked in the Game Options for a target platform, _GameMaker Studio 2_ will automatically set the draw position for the application surface so that it is displayed correctly centered and scaled on the given display. However if you are manipulating this surface and wish to draw it yourself, then this function gives you an easy way to find exactly _where_ within the display or window that the surface was being drawn so that you can then draw it there yourself, or align GUI images or post draw images to it.  \n  \nThe function will return an array with four keys, where key 0 and 1 are the x and y position of the top lefthand corner of the surface, and keys 2 and 3 are the x and y of the bottom righthand corner of the surface, all relative to the size of the display or window.",
        "return": "Array"
    },
    "external_call": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The name of the function that you want to call"
            },
            {
                "label": "args[0...10]",
                "documentation": "The different arguments that you want to pass through to the external function"
            }
        ],
        "example": {
            "code": "my_function = external_define(\"MyDLL.dll\", \"MyMin\", dll_cdecl, ty_real, 2, ty_real, ty_real);<br> var _a = external_call(my_function, x, y);<br>",
            "description": ""
        },
        "signature": "external_call(id, args[0...15]);",
        "function": "external_call",
        "documentation": "If you have created an external function call to a dll or dylib using [external_define](external_define.html), you can use this function to then call it. You supply the name of the previously defined function as well as each of the arguments it requires (each argument must be of the correct type, either real or string) and the function returns the result of the external call.",
        "return": "Value (the type of value returned will depend on the defined function)"
    },
    "os_lock_orientation": {
        "parameters": [],
        "example": {
            "code": "if os_type == os_android || os_type == os_ios<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;os_lock_orientation(true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_lock_orientation(flag)",
        "function": "os_lock_orientation",
        "documentation": "With this function you can \"lock\" your device to the current orientation until such time as you \"free\" it to allow all [Game Options](../../../2_interface/3_settings/game_options/index.html) enabled orientations again for that target platform. Note that you likely want to confirm the orientation is as desired before locking.",
        "return": "N/A"
    },
    "physics_apply_local_force": {
        "parameters": [
            {
                "label": "xlocal",
                "documentation": "The x coordinate relative to the origin where the force will be applied"
            },
            {
                "label": "ylocal",
                "documentation": "The y coordinate relative to the origin where the force will be applied"
            },
            {
                "label": "xforce",
                "documentation": "the x component of the force vector"
            },
            {
                "label": "yforce",
                "documentation": "the y component of the force vector"
            }
        ],
        "example": {
            "code": "if keyboard_check(vk_right)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;physics_apply_local_force(-25, 0, -50, 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "physics_apply_local_force(xlocal, ylocal, xforce, yforce)",
        "function": "physics_apply_local_force",
        "documentation": "Another way to use force in the physics world is to apply it _locally_ to an instance. What this means is that the strength and direction of the force are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. It should be noted that with this function, forces are not applied to the center of mass of the object, but rather at a point relative to the instance and they will not be instantly applied as they are dependant on any other forces that are working on the object (like gravity). This illustration demonstrates how a local force works:  \n  \n![](images/physics_apply_local_force_image.png)",
        "return": "N/A"
    },
    "physics_joint_wheel_create": {
        "parameters": [
            {
                "label": "inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": "inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": "anchor_x",
                "documentation": "The x coordinate where the joint is anchored, within the game world"
            },
            {
                "label": "anchor_y",
                "documentation": "The y coordinate where the joint is anchored, within the game world"
            },
            {
                "label": "axis_x",
                "documentation": "The x component of the wheel axis vector"
            },
            {
                "label": "axis_y",
                "documentation": "The y component of the wheel axis vector"
            },
            {
                "label": "enableMotor",
                "documentation": "Whether the motor should be active (true) or not (false)"
            },
            {
                "label": "max_motor_torque",
                "documentation": "Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)"
            },
            {
                "label": "motor_speed",
                "documentation": "This is the speed at which the motor should rotate"
            },
            {
                "label": "freq_hz",
                "documentation": "This is the oscillation frequency for the joint, in hertz"
            },
            {
                "label": "damping_ratio",
                "documentation": "This damping ratio for the joint"
            },
            {
                "label": "col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var mainFixture = physics_fixture_create();<br> physics_fixture_set_box_shape(mainFixture, 128, 32);<br> var wheelFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(wheelFixture, 32);<br> var o_id = instance_create_layer(x+25, y + 100, \"Instances\", obj_Wheel);<br> physics_fixture_bind(mainFixture, id);<br> physics_fixture_bind(wheelFixture, o_id);<br> physics_joint_wheel_create(id, o_id, o_id.x, o_id.y, 0, 1, true, 10, 1, 15, 6, false);<br> physics_fixture_delete(mainFixture);<br> physics_fixture_delete(wheelFixture);<br>",
            "description": ""
        },
        "signature": "physics_joint_wheel_create(inst1, inst2, anchor_x, anchor_y, axis_x, axis_y, enableMotor, max_motor_torque, motor_speed, freq_hz, damping_ratio, col)",
        "function": "physics_joint_wheel_create",
        "documentation": "A wheel joint simply combines a piston and a revolute joint, like a wheel mounted on the shock absorber of a car. You specify the anchor point for the joint well as the two physics enabled instances to joint, and the first instance will act as the \"body\" for the joint, while the second will be the \"wheel\", and be permitted to move freely around the joint axis. You can also set an axis vector, which is the imaginary line along which the joint will act as a \"spring\" permitting the wheel to bounce up and down along it as it encounters obstacles (much like the piston joint). The following image illustrates this:  \n  \n![](images/wheel_joint_image.png)",
        "return": "index of the joint"
    },
    "layer_sprite_yscale": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "yscale",
                "documentation": "The yscale value (default is 1)"
            }
        ],
        "example": {
            "code": "var asset_sprite = layer_sprite_get_id(layer, \"gfc_Trees\");<br> if layer_sprite_get_xscale(asset_sprite) != 1 || !ayer_sprite_get_yscale(asset_sprite) != 1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_xscale(asset_sprite, 1);<br> &nbsp;&nbsp;&nbsp;layer_sprite_yscale(asset_sprite, 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_yscale(sprite_element_id, yscale);",
        "function": "layer_sprite_yscale",
        "documentation": "",
        "return": "N/A"
    },
    "tilemap_get_frame": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the frame index of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Traps\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> if tilemap_get_frame(map_id) &gt;= 2 &amp;&amp; tilemap_get_frame(map_id) &lt; 4<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.activate = true;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.activate = false;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "tilemap_get_frame(tilemap_element_id)",
        "function": "tilemap_get_frame",
        "documentation": "",
        "return": "Real (between 0 (inclusive) and the maximum number of frames of animation (exclusive))"
    },
    "camera_get_view_y": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var vx = camera_get_view_x(view_camera[0]);<br> var vy = camera_get_view_y(view_camera[0]);<br> draw_text(vx + 5, vy + 5, \"SCORE\" + string(score));<br>",
            "description": ""
        },
        "signature": "camera_get_view_y(camera_id)",
        "function": "camera_get_view_y",
        "documentation": "This function can be used to retrieve the y position of the view for the given camera.",
        "return": "Real"
    },
    "ds_grid_set_region": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "x1",
                "documentation": "The x position of the left of the region in the grid."
            },
            {
                "label": "y1",
                "documentation": "The y position of the top of the region in the grid."
            },
            {
                "label": "x2",
                "documentation": "The x position of the right of the region in the grid."
            },
            {
                "label": "y2",
                "documentation": "The y position of the bottom of the region in the grid."
            },
            {
                "label": "val",
                "documentation": "The value to set the region cells to."
            }
        ],
        "example": {
            "code": "ds_grid_set_region(grid, 5, 5, 10, 10, 99)<br>",
            "description": ""
        },
        "signature": "ds_grid_set_region(index, x1, y1, x2, y2, val);",
        "function": "ds_grid_set_region",
        "documentation": "This function can be used to set a rectangular region of a given grid to a specified value (which can be either a real or a string) as illustrated by the image shown below: ![](ds_grid_set_region.png)",
        "return": "N/A"
    },
    "vertex_ubyte4": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "byte",
                "documentation": "The first input value."
            },
            {
                "label": "byte",
                "documentation": "The second input value."
            },
            {
                "label": "byte",
                "documentation": "The third input value."
            },
            {
                "label": "byte",
                "documentation": "The fourth input value."
            }
        ],
        "example": {
            "code": "vertex_ubyte4(buff, irandom(255), irandom(255), irandom(255), 127);",
            "description": ""
        },
        "signature": "vertex_ubyte4(buffer, byte, byte, byte, byte);",
        "function": "vertex_ubyte4",
        "documentation": "This function will add four unsigned byte values (0 - 255) to the vertex data. The vertex must have been formatted correctly to accept this using the [vertex\\_format\\_add_custom](../vertex%20formats/vertex_format_add_custom.html) function.",
        "return": "N/A"
    },
    "visible": {
        "parameters": [],
        "example": {
            "code": "if other.visible = true<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;x = xprevious;<br> &nbsp;&nbsp;&nbsp;y = yprevious;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "visible;",
        "function": "visible;",
        "documentation": "",
        "return": "Boolean"
    },
    "GM_runtime_version": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, date_time_string(GM_build_date));<br> draw_text(32, 64, \"v\" + GM_version);<br> draw_text(32, 96, \"Runtime \" + GM_runtime_version);<br>",
            "description": ""
        },
        "signature": "GM_runtime_version;",
        "function": "GM_runtime_version;",
        "documentation": "This constant hold the runtime version number as defined in the [Preferences](../../../1_overview/1_getting_started/preferences/prefs_runtime.html) as the runtime being used to build the project. The value is stored as a string.",
        "return": "String"
    },
    "network_destroy": {
        "parameters": [
            {
                "label": "socket",
                "documentation": "The id of the socket to remove."
            }
        ],
        "example": {
            "code": "if !os_is_network_connected()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;network_destroy(sock);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "network_destroy(socket);",
        "function": "network_destroy",
        "documentation": "With this function you can remove a network socket connection from your game.",
        "return": "N/A"
    },
    "path_set_closed": {
        "parameters": [],
        "example": {
            "code": "path_set_closed(path0, true);",
            "description": ""
        },
        "signature": "path_set_closed(index, closed);",
        "function": "path_set_closed",
        "documentation": "This function can be used to flag a given path as being open (false) or closed (true). A closed path has its start point connected to its end point, forming a loop, and an open path has a definitive, unconnected start and finish. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.  \n  \n![](setclosed.png)",
        "return": "N/A"
    },
    "physics_particle_create": {
        "parameters": [
            {
                "label": "flags",
                "documentation": "The flags to set on the particle."
            },
            {
                "label": "x",
                "documentation": "The x position to create the particle at."
            },
            {
                "label": "y",
                "documentation": "The y position to create the particle at."
            },
            {
                "label": "xv",
                "documentation": "The initial horizontal velocity."
            },
            {
                "label": "yv",
                "documentation": "The initial vertical velocity."
            },
            {
                "label": "col",
                "documentation": "The base colour to use for the particle."
            },
            {
                "label": "alpha",
                "documentation": "The base alpha to use for the particle."
            },
            {
                "label": "category",
                "documentation": "The user defined category to which the particle belongs."
            }
        ],
        "example": {
            "code": "var flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile;<br> var x_vel = lengthdir_x(5, image_angle);<br> var y_vel = lengthdir_y(5, image_angle);<br> var p = physics_particle_create(flags, x, y, x_vel, y_vel, c_white, 1, 1)<br>",
            "description": ""
        },
        "signature": "physics_particle_create(flags, x, y, xv, yv, col, alpha, category)",
        "function": "physics_particle_create",
        "documentation": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following **constants**:",
        "return": "Real"
    },
    "virtual_key_hide": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the virtual key to hide."
            }
        ],
        "example": {
            "code": "if global.Debug<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;virtual_key_show(global.Left);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;virtual_key_hide(global.Left);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "virtual_key_hide(index);",
        "function": "virtual_key_hide",
        "documentation": "Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly and for that you would call the function [virtual\\_key\\_show](virtual_key_show.html). However, you may need to toggle this view on and off, so you can also hide the virtual key with this function, using the index of the virtual key that you want to hide (previously created and stored using [virtual\\_key\\_add](virtual_key_add.html)). Once you are happy with things it is recommended that you create and place your own graphic in its area.",
        "return": "N/A"
    },
    "ds_grid_get_disk_max": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk center in the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk center in the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk in the grid."
            }
        ],
        "example": {
            "code": "val = ds_grid_get_disk_max(grid, 5, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_get_disk_max(index, xm, ym, r);",
        "function": "ds_grid_get_disk_max",
        "documentation": "This function can be used to find the maximum value for all the cells found within the defined disk area of a grid, as shown in the image below: ![](ds_grid_get_disk_max.png)",
        "return": "Real or String"
    },
    "ds_queue_write": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to write."
            }
        ],
        "example": {
            "code": "var str;<br> ini_open(\"save.ini\");<br> str =ds_queue_write(queue);<br> ini_write_string(\"Queues\", \"0\", str);<br> ds_queue_clear(queue);<br> ini_close();<br>",
            "description": ""
        },
        "signature": "ds_queue_write(id);",
        "function": "ds_queue_write",
        "documentation": "This function returns a string which can then be stored or transferred to another data structure using the [ds\\_queue\\_read](ds_queue_read.html) function.  \n  \n_**NOTE:** The returned string is not a human readable string, but rather a dump of the contents of the data-structure_",
        "return": "String"
    },
    "gpu_set_zfunc": {
        "parameters": [
            {
                "label": "cmp_func",
                "documentation": "The comparison mode to use (see list above)"
            }
        ],
        "example": {
            "code": "gpu_set_ztestenable(true);<br> gpu_set_zfunc(cmpfunc_always);<br> draw_sprite(spr_Background, 0, 0, 0);<br> gpu_set_ztestenable(false);<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_zfunc(cmp_func);",
        "function": "gpu_set_zfunc",
        "documentation": "This function can be used to set the z-buffer testing comparison mode (see [gpu\\_set\\_ztestenable](gpu_set_ztestenable.html) for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):",
        "return": "N/A"
    },
    "part_system_layer": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system ID"
            },
            {
                "label": "layer",
                "documentation": "The new layer ID"
            }
        ],
        "example": {
            "code": "if part_system_get_layer(global.p_sys) != \"effects_layer\"<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;part_system_layer(global.p_sys, \"effects_layer\";<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_system_layer(ps, layer);",
        "function": "part_system_layer",
        "documentation": "This function can be used to switch a particle system from its current layer to a new one. You supply the particle system ID value (as returned by the function [part\\_system\\_create_layer](part_system_create_layer.html)) and then the unique layer ID (as returned by the function [layer_create()](../../../rooms/layers/layer_create.html) or the name of the layer to use as a string - for example \"instance_layer\" - as defined in the room editor), and the system will be moved to the new layer.",
        "return": "N/A"
    },
    "date_get_minute": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The datetime to check."
            }
        ],
        "example": {
            "code": "myminute = date_get_minute(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_minute(date);",
        "function": "date_get_minute",
        "documentation": "This function returns the minute of the given datetime value.",
        "return": "Real"
    },
    "layer_background_get_blend": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to get the information from"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_sky\");<br> var back_id = layer_background_get_id(lay_id);<br> if layer_background_get_blend(back_id) == c_white<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_background_blend(back_id, make_colour_rgb(random(255), random(255), 255));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": " layer_background_get_blend(background_element_id);",
        "function": " layer_background_get_blend",
        "documentation": "",
        "return": "Colour Value (Real)"
    },
    "sprite_get_speed_type": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sprite to get the animation type of"
            }
        ],
        "example": {
            "code": "s_speed = sprite_get_speed(sprite_index);<br> s_type = sprite_get_speed_type(sprite_index);",
            "description": ""
        },
        "signature": "sprite_get_speed_type(index)",
        "function": "sprite_get_speed_type",
        "documentation": "This function can be used to retrieve the sprite animation type as defined for the sprite resource in the [Sprite Editor](../../../2_interface/1_editors/sprites.html). The value returned will be one of the following constants:",
        "return": "Constant (see above)"
    },
    "skeleton_animation_set_ext": {
        "parameters": [
            {
                "label": "animname",
                "documentation": "The name (a string) of the animation set to use."
            },
            {
                "label": "track",
                "documentation": "The track for the animation set to use."
            }
        ],
        "example": {
            "code": "if mouse_check_button(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_animation_set_ext(\"bodyfight\", 1);<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_animation_set_ext(\"bodywalk\", 1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_animation_set_ext(animname, track);",
        "function": "skeleton_animation_set_ext",
        "documentation": "When you set an animation set for your skeletal animation sprite, it is assigned _track 0_ internally. However, you can assign further sets to further tracks (1 and above) and in this way have your sprite play two (or more) animations at the same time. Note that the sprite should have been designed in your animation program with this in mind, such that the \"base\" animation in track 0 only has keyframes for certain bones, while the next tracks have keyframes for the others. For example, if you have a \"walk\" animation and its keyframes only affect the legs of the sprite, you can then have a set of head animations and arm animations which you can set in tracks 1 and 2 respectively, permitting you to have a base movement and adapt on it in real-time while the game is being played.",
        "return": "N/A"
    },
    "skeleton_get_bounds": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The bounding box index to get the values of."
            }
        ],
        "example": {
            "code": "var num = skeleton_get_num_bounds();<br> var yy = 60;<br> for(var i = 0; i &lt; num; i++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;var b_info = skeleton_get_bounds(i);<br> &nbsp;&nbsp;&nbsp;&nbsp;if b_info[0] &gt; 0<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data = b_info[1] + \":\";<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = 0; j &lt; b_info[0]; j++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data += \" (\" + string(b_info[(j * 2) + 2]) + \", \" + string(b_info[(j * 2) + 2 + 1]) + \")\";<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_text(20, yy, data);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy += 20;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_get_bounds(index);",
        "function": "skeleton_get_bounds",
        "documentation": "This function will return an array of values associated with any given bounding box for the currently assigned skeleton animation sprite. You supply the index number for the bounding box to get the details of (you can retrieve the total number of bounding boxes for the sprite using the function [skeleton\\_get\\_num_bounds](skeleton_get_num_bounds.html)) and the functin will return an array with the following elements:",
        "return": "Array (minimum 2 elements: numPoints, name [, xPos, yPos, etc...])"
    },
    "steam_ugc_submit_item_update": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "change_note",
                "documentation": "The change notes (a string) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_submit_item_update(ugc_update_handle, change_note);",
        "function": "steam_ugc_submit_item_update",
        "documentation": "This function will submit the UGC item inexed by the given handle to the Steam Workshop servers, adding the change notes to be used for the given item. The change notes should be a string and the update handle is the value returned when you called the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html). When using this function it will return an async ID value which can then be parsed when the [Steam Asynchronous](../../../../2_interface/1_editors/events/async_events.html) event is triggered to report the creation of the item. The event will contain the following key/map values in the async_load ds_map:",
        "return": "Async ID"
    },
    "string_digits": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to get the digits from."
            }
        ],
        "example": {
            "code": "var t_str;<br> t_str = string_digits(input_str);<br> age = real(t_str);<br>",
            "description": ""
        },
        "signature": "string_digits(string);",
        "function": "string_digits",
        "documentation": "You can use this function to parse a given string and get any numbers from it. For example, say you have this text - \"I am 81 years old\". With this function you would get a return string of \"81\".",
        "return": "String"
    },
    "string_length": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to measure the number of characters of."
            }
        ],
        "example": {
            "code": "if string_length(name) &gt; 10<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;name = string_copy(name, 1, 10);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "string_length(string);",
        "function": "string_length",
        "documentation": "This function returns the number of characters comprising a given string. It can be useful for things like working out when to limit a custom text entry's character length (eg: capping a player's name to 10 characters). Remember that this is different to [string_width](string_width.html) in that it measures the number of _characters_ in the string, not its width as drawn on the screen in pixels.",
        "return": "Real"
    },
    "ds_list_read": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to read into."
            },
            {
                "label": "str",
                "documentation": "The string to read from."
            },
            {
                "label": "legacy (optional)",
                "documentation": "Can be either true or false or omitted completely."
            }
        ],
        "example": {
            "code": "list = ds_list_create();<br> ini_open(\"save.ini\");<br> var str = ini_read_string(\"Lists\", \"0\", \"\");<br> if str != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ds_list_read(list, str);<br> &nbsp;&nbsp;&nbsp;}<br> ini_close();",
            "description": ""
        },
        "signature": "ds_list_read(id, str [, legacy]);",
        "function": "ds_list_read",
        "documentation": "With this function you can recreate a saved ds_list (one that has previously been written as a string using [ds\\_list\\_write](ds_list_write.html)). You must first create a new ds\\_list to read the string into, and if the ds\\_list already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.Note that if the data structure was created with previous versions of _GameMaker_ you should add the optional argument \"legacy\", setting it to true as the string format has changed with this version.",
        "return": "N/A"
    },
    "gpu_get_tex_min_mip": {
        "parameters": [],
        "example": {
            "code": "if gpu_get_tex_min_mip() != 0<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;gpu_set_tex_min_mip(0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "gpu_get_tex_min_mip();",
        "function": "gpu_get_tex_min_mip",
        "documentation": "With this function you can get the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...",
        "return": "Real (default: 0)"
    },
    "file_exists": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to check for."
            }
        ],
        "example": {
            "code": "if file_exists(\"level.txt\")<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;file = file_text_open_read(\"level.txt\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "file_exists(fname);",
        "function": "file_exists",
        "documentation": "This function will return true if the specified file exists and false if it does not.",
        "return": "Boolean."
    },
    "bbox_bottom": {
        "parameters": [],
        "example": {
            "code": "if bbox_bottom &gt; room_height<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;y = room_height - sprite_yoffset;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "bbox_bottom;",
        "function": "bbox_bottom;",
        "documentation": "",
        "return": "Real"
    },
    "physics_world_update_speed": {
        "parameters": [
            {
                "label": "speed",
                "documentation": "the number of times per second that the physics system updates"
            }
        ],
        "example": {
            "code": "physics_world_update_speed(room_speed * 2);",
            "description": ""
        },
        "signature": "physics_world_update_speed(speed)",
        "function": "physics_world_update_speed",
        "documentation": "_GameMaker Studio 2_ updates things based on the room speed, so that if you set it to ,say, 30, _GameMaker Studio 2_ will run 30 steps in the course of a second. However, for the physics functions that may not be enough and you may want things to be updated at a slightly faster speed to increase stability or precision. To that end we use the function physics\\_world\\_update_speed which sets the update speed for the physics system _independently_ of the room speed. This means that you could have a room speed of 30, but set the physics to 60, effectively doubling the speed at which the physics system updates and performs its calculations compared to the speed at which the step are updated.  \n  \n_**Note:** you cannot currently set this to any less than room speed, but future updates may change this._",
        "return": "N/A"
    },
    "camera_create": {
        "parameters": [],
        "example": {
            "code": "view_camera[0] = camera_create();<br> var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);<br> var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);<br> camera_set_view_mat(view_camera[0], viewmat);<br> camera_set_proj_mat(view_camera[0], projmat);<br>",
            "description": ""
        },
        "signature": "camera_create();",
        "function": "camera_create",
        "documentation": "This function will create an \"empty\" camera, ie: a camera with no view or projection settings defined. Once you have created the camera you can then use the different [matrix functions](../../matrices/index.html) to set the view and projection matrices. You can also use this function to create the camera and then use the different camera\\_set\\_* functions to set up the view, however note that you _must_ provide at least a position and view size, otherwise the resulting camera will not be valid and give odd results if applied to a view port (if you do not set the object following, borders or move speed these will be set to the default values for a view camera in the Room Editor).",
        "return": "Real (unique camera ID value)"
    },
    "window_set_caption": {
        "parameters": [
            {
                "label": "caption",
                "documentation": "The new caption."
            }
        ],
        "example": {
            "code": "if window_get_caption() != \"\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;window_set_caption(\"\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "window_set_caption(caption);",
        "function": "window_set_caption",
        "documentation": "",
        "return": "N/A"
    },
    "instance_create_layer": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x position the object will be created at"
            },
            {
                "label": "y",
                "documentation": "The y position the object will be created at"
            },
            {
                "label": "layer_id",
                "documentation": "The layer ID (or name) to assign the created instance to"
            },
            {
                "label": "obj",
                "documentation": "The object index of the object to create an instance of"
            }
        ],
        "example": {
            "code": "var inst;<br> inst = instance_create_layer(x, y, \"instance_layer\", obj_Bullet);<br> with (inst)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;speed = other.shoot_speed;<br> &nbsp;&nbsp;&nbsp;direction = other.image_angle;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "instance_create_layer(x, y, layer_id, obj);",
        "function": "instance_create_layer",
        "documentation": "With this function you can create a new instance of the specified object at any given point within the room and on the layer specified. The layer can be identified using the layer ID value (as returned by the function [layer_create()](../../rooms/layers/layer_create.html)) or by the name of the layer (as a string, for example \"instance_layer\") as defined in the room editor. This function returns the [id](../instance_variables/id.html) of the new instance which can then be stored in a variable or used to access that instance. Note that this function will also call the Create Event of the instance being created _before_ continuing with the code or actions for the event that called the function.",
        "return": "Real (instance ID value)"
    },
    "point_in_triangle": {
        "parameters": [
            {
                "label": "px",
                "documentation": "The x coordinate of the point to check."
            },
            {
                "label": "py",
                "documentation": "The y coordinate of the point to check."
            },
            {
                "label": "x1",
                "documentation": "The x coordinate of the first corner of the triangle to check."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first corner of the triangle to check."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second corner of the triangle to check."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second corner of the triangle to check."
            },
            {
                "label": "x3",
                "documentation": "The x coordinate of the third corner of the triangle to check."
            },
            {
                "label": "y3",
                "documentation": "The y coordinate of the third corner of the triangle to check."
            }
        ],
        "example": {
            "code": "var inst = instance_nearest(x, y, obj_Player);<br> if instance_exists(inst)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var x1 = x + lengthdir_x(100, image_angle - 45);<br> &nbsp;&nbsp;&nbsp;var y1 = y + lengthdir_y(100, image_angle - 45);<br> &nbsp;&nbsp;&nbsp;var x2 = x + lengthdir_x(100, image_angle + 45);<br> &nbsp;&nbsp;&nbsp;var y2 = y + lengthdir_y(100, image_angle + 45);<br> &nbsp;&nbsp;&nbsp;if point_in_triangle(inst.x, inst.y, x, y, x1, y1, x2, y2)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;can_see = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "point_in_triangle(px, py, x1, y1, x2, y2, x3, y3);",
        "function": "point_in_triangle",
        "documentation": "When using this function, you define a triangular area and _GameMaker Studio 2_ will work out whether the given point falls within its bounds or not. If the point falls within the defined triangle the function will return true otherwise the function will return false.",
        "return": "Boolean"
    },
    "skeleton_bone_state_set": {
        "parameters": [
            {
                "label": "bone",
                "documentation": "The name (as a string) of the bone."
            },
            {
                "label": "map",
                "documentation": "The (previously created) ds_map that stores the bone data."
            }
        ],
        "example": {
            "code": "var map = ds_map_create();<br> skeleton_bone_state_get(\"head\", map);<br> var xx = ds_map_find_value(map, \"worldX\");<br> var yy = ds_map_find_value(map, \"worldY\");<br> var deltax = mouse_x - (x + xx);<br> var deltay = mouse_y - (y + yy);<br> var angle = arctan2(deltay, deltax);<br> var angle = point_direction(xx, yy, mouse_x, mouse_y);<br> ds_map_replace(map, \"angle\", -angle * 180 / pi);<br> skeleton_bone_state_set(\"head\", map);<br> ds_map_clear(map);<br>",
            "description": ""
        },
        "signature": "skeleton_bone_state_set(bone, map);",
        "function": "skeleton_bone_state_set",
        "documentation": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data will set the **current** pose for the skeleton, depending on the animation set used, and the function requires a previously created [ds_map](../../data_structures/ds%20maps/index.html), which should have the following keys and their required values:",
        "return": "N/A"
    },
    "ds_grid_add_disk": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the grid."
            },
            {
                "label": "xm",
                "documentation": "The x position of the disk on the grid."
            },
            {
                "label": "ym",
                "documentation": "The y position of the disk on the grid."
            },
            {
                "label": "r",
                "documentation": "The radius of the disk on the grid."
            },
            {
                "label": "val",
                "documentation": "The value to add to the cells within the disk."
            }
        ],
        "example": {
            "code": "ds_grid_add_disk(grid, 7, 6, 5, 2)<br>",
            "description": ""
        },
        "signature": "ds_grid_add_disk(index, xm, ym, r, val);",
        "function": "ds_grid_add_disk",
        "documentation": "This function can be used to add a given value (real or string) to all the values of the cells found within the defined disk area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.",
        "return": "N/A"
    },
    "gpu_set_blendenable": {
        "parameters": [
            {
                "label": "enable",
                "documentation": "Enable or disable alpha blending value (true or false)."
            }
        ],
        "example": {
            "code": "gpu_set_blendenable(false);<br> draw_sprite(spr_Background, 0, 0, 0);<br> gpu_set_blendenable(true);<br> <br>",
            "description": ""
        },
        "signature": "gpu_set_blendenable(enable);",
        "function": "gpu_set_blendenable",
        "documentation": "This function can be used to toggle alpha-blending on and off. Basically, if you have this set to false, all images being drawn will be drawn 100% opaque, meaning that any transparent, or semi transparent, areas of a sprite or background will be visible as a solid colour. It is a good idea to have alpha blending _off_ whenever possible (especially when developing for mobile devices) as this greatly increases the draw speed. ![](images/alphablend_image.png)",
        "return": "N/A"
    },
    "draw_light_get": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index number of the light (from 0 to 7)"
            }
        ],
        "example": {
            "code": "light_a = draw_light_get(1);<br> if light_a[5] &lt; 200<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;light_a[5] += 5;<br> &nbsp;&nbsp;&nbsp;draw_light_define_point(1, 200, 123, 50, light_a[5], c_white);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "draw_light_get(ind)",
        "function": "draw_light_get",
        "documentation": "This function will get the specified light parameters as an array with the following 6 elements -",
        "return": "Real"
    },
    "timeline_position": {
        "parameters": [],
        "example": {
            "code": "if !timeline_running<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;timeline_position = 0;<br> &nbsp;&nbsp;&nbsp;timeline_running = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "timeline_position;",
        "function": "timeline_position;",
        "documentation": "This variable holds the current position (moment) a time line is currently at. You can change this value to skip parts of the time line, or to repeat parts or to start the time line again from the beginning.",
        "return": "Real"
    },
    "arctan2": {
        "parameters": [
            {
                "label": "y",
                "documentation": "The y coordinate to calculate."
            },
            {
                "label": "x",
                "documentation": "The x coordinate to calculate."
            }
        ],
        "example": {
            "code": "val = arctan2(1, 1);",
            "description": ""
        },
        "signature": "arctan2(y, x);",
        "function": "arctan2",
        "documentation": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike arctan(x) the function arctan2(y, x) is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.",
        "return": "Real"
    },
    "audio_sound_pitch": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to change."
            },
            {
                "label": "pitch",
                "documentation": "The pitch multiplier (default 1)."
            }
        ],
        "example": {
            "code": "var s_engine = audio_play_sound(snd_CarEngine, 10, false);<br> switch (gear)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case 1: audio_sound_pitch(s_engine, 0.8); break;<br> &nbsp;&nbsp;&nbsp;case 2: audio_sound_pitch(s_engine, 0.9); break;<br> &nbsp;&nbsp;&nbsp;case 3: audio_sound_pitch(s_engine, 0.95); break;<br> &nbsp;&nbsp;&nbsp;case 4: audio_sound_pitch(s_engine, 1); break;<br> &nbsp;&nbsp;&nbsp;case 5: audio_sound_pitch(s_engine, 1.2); break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_sound_pitch(index, pitch);",
        "function": "audio_sound_pitch",
        "documentation": "This function can be used to change the pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions, or an actual sound asset from the resource tree. If it is an index of a playing sound, then only that instance will be changed, however when using a sound asset from the resource tree, all further instances being played of that sound will be changed.",
        "return": "N/A"
    },
    "ds_priority_find_max": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to use."
            }
        ],
        "example": {
            "code": "if ai_move<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;script_execute(ds_priority_find_max(ai_priority);<br>  &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_find_max(id);",
        "function": "ds_priority_find_max",
        "documentation": "With this function you can find the value stored in the priority queue with the highest priority, and if more than one value has the same priority, the one that was added to the priority queue first will be the one to get returned. However, unlike [ds\\_priority\\_delete_max](ds_priority_delete_max.html), this function will not remove the value from the queue.",
        "return": "Real or String"
    },
    "ds_stack_create": {
        "parameters": [],
        "example": {
            "code": "stack = ds_stack_create();",
            "description": ""
        },
        "signature": "ds_stack_create();",
        "function": "ds_stack_create",
        "documentation": "This function will create a new stack data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the stack.",
        "return": "Real"
    },
    "part_system_clear": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system to clear."
            }
        ],
        "example": {
            "code": "part_system_clear(global.Sname);",
            "description": ""
        },
        "signature": "part_system_clear(ind);",
        "function": "part_system_clear",
        "documentation": "With this function you can clear the indexed system to its default state, removing all emitters and resetting the depth and position (if they had been changed). Be careful using this function as if you have any instance setting or bursting or any other action using an emitter associated with this system, you will get an error unless you are using the [part\\_emitter\\_exists](../particle%20emitters/part_emitter_exists.html) function to check. There is also no need to call the [part\\_emitter\\_destroy](../particle%20emitters/part_emitter_destroy.html) function as this is taken care of automatically too.  \n  \n_**NOTE:** this function will clear the visible particles in the room, but it does **not** clear the particle properties, nor does it remove them from memory. For that you should use the functions [part\\_type\\_clear](../particle%20types/part_type_clear.html) and [part\\_type\\_destroy](../particle%20types/part_type_destroy.html)._",
        "return": "N/A"
    },
    "os_get_region": {
        "parameters": [],
        "example": {
            "code": "switch (os_get_language())<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case \"zh\":<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var region = os_get_region();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (region == \"HK\" || region == \"MO\" || region == \"TW\")<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ini_open(\"chinese_traditional.ini\");<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ini_open(\"chinese_simplified.ini\");<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;case \"fr\":<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ini_open(\"french.ini\");<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;case \"it\":<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ini_open(\"italian.ini\");<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;default:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ini_open(\"english.ini\");<br> &nbsp;&nbsp;&nbsp;break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_get_region()",
        "function": "os_get_region",
        "documentation": "This function returns a string with the two or three letter Regional Code for the OS that is running the game, as set by the [ISO3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) standard. If the information is not available, it will hold simply an empty string \"\".",
        "return": "String"
    },
    "layer_tilemap_exists": {
        "parameters": [
            {
                "label": "layer_id",
                "documentation": "The unique ID value of the layer to target (or the layer name as a string)"
            },
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"tilemap_trees\");<br> if layer_tilemap_exists(lay_id, global.Treestilemap)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_tilemap_destroy(lay_id, global.Treestilemap);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_tilemap_exists(layer_id, tilemap_element_id)",
        "function": "layer_tilemap_exists",
        "documentation": "You can use this function to check and see if a tilemap element exists on any given layer. You supply the layer ID (which you get when you create the layer using [layer_create()](../layers/layer_create.html)) or the layer name (as a string - this will have a performance impact) and the tilemap element ID (which you get when you create a tilemap element using [layer\\_tilemap\\_create()](layer_tilemap_create.html) or when you use the function [layer\\_tilemap\\_get_id()](layer_tilemap_get_id.html)) and the function will return either true if the element exists, or false if it does not.",
        "return": "Boolean"
    },
    "push_get_first_local_notification": {
        "parameters": [
            {
                "label": "map",
                "documentation": "The ds_map ID to use."
            }
        ],
        "signature": "push_get_first_local_notification(map);",
        "function": "push_get_first_local_notification",
        "documentation": "This function will populate a pre-made [ds_map](../data_structures/ds%20maps/index.html) with a series of key/value pairs for the first local push notification in the queue to be shown. It returns -1 if there are no notifications queued, or a real value otherwise representing the ID for the notification. This ID can then be used to cancel the notification using the function [push\\_cancel\\_local_notification()](push_cancel_local_notification.html).",
        "return": "Real"
    },
    "camera_get_view_mat": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "mat = camera_get_view_mat(camera_view[0]);",
            "description": ""
        },
        "signature": "camera_get_view_mat(camera_id)",
        "function": "camera_get_view_mat",
        "documentation": "This function can be used to retrieve the view matrix. The function returns the matrix ID value which can then be used in other [matrix functions](../../matrices/index.html) or to set the view matrix of another camera (using [camera\\_set\\_view_mat](camera_set_view_mat.html)).",
        "return": "Matrix ID (real)"
    },
    "ln": {
        "parameters": [
            {
                "label": "n",
                "documentation": "The input value."
            }
        ],
        "example": {
            "code": "alarm[0] = ln(age) * room_speed;",
            "description": ""
        },
        "signature": "ln(n);",
        "function": "ln",
        "documentation": "The natural logarithm ln(n) is the amount of time needed to reach a certain level of continuous growth, where n is the level reached. So if we want to find out how many time units we need to get 20 growth we would use ln(20) which returns 2.99 units of time to get that amount of growth.",
        "return": "Real"
    },
    "phy_position_xprevious": {
        "parameters": [],
        "example": {
            "code": "xx = phy_position_xprevious;<br> yy = phy_position_yprevious;<br>",
            "description": ""
        },
        "signature": "phy_position_xprevious;",
        "function": "phy_position_xprevious;",
        "documentation": "This variable can be used to get (or to set) the previous x position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one.",
        "return": "Real"
    },
    "layer_get_id_at_depth": {
        "parameters": [
            {
                "label": "depth",
                "documentation": "The depth to check and retrieve the layer IDs from."
            }
        ],
        "example": {
            "code": "var a = layer_get_id_at_depth(0);<br> if a[0] != -1<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; array_length_1d(a); i++;)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layer_destroy(a[i]);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_get_id_at_depth(depth)",
        "function": "layer_get_id_at_depth",
        "documentation": "You can use this function to get the IDs of all layers assigned a specific depth. You give the depth to check and the function will return an array with 1 or more entries depending on whether there are any layers at the given depth or not. If there are no layers at the given depth then the array will have a single entry at the \\[0\\] position with a value of -1, but, if there are layers at the depth, then an entry will be made in the array for each layer found - the entry value will be the unique ID value for a layer.",
        "return": "Array"
    },
    "array_create" : {
        "parameters": [
            {
                "label": "size",
                "documentation": "The size of the array to create."
            },
            {
                "label": "value",
                "documentation": "The value to use to initialise all array indices (optional)."
            }
        ],
        "example": {
            "code": "instance_array = array_create(100, noone);",
            "description": "The above code will create a new array of 100 entries, each one set to the keyword noone, and then assign it to the variable \"instance_array\"."
        },
        "signature": "array_create(size, [value])",
        "function": "array_create",
        "documentation": "With this function you can create an array of a given size. You tell the function the length of the array to create, and it will return the \"handle\" for the array which you can then assign to a variable. Arrays created in this way will have each entry initialised to 0 unless you specify an (optional) initialisation value. If you do supply the extra value for initialising the array, then all indices within the new array will be set to that instead of 0, but note that the function will take longer to run.",
        "return": "Array (handle)"
    },
    "audio_sound_length": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the sound to check."
            }
        ],
        "example": {
            "code": "var len;<br> len = audio_sound_length(snd_Beam);<br> audio_play_sound(snd_Beam, 1, false);<br> alarm[0] = room_speed * len;<br>",
            "description": ""
        },
        "signature": "audio_sound_length(index);",
        "function": "audio_sound_length",
        "documentation": "This function will return the length of the given sound in seconds. The sound can either be a referenced from index for an individual sound being played which has been stored in a variable when using the [audio\\_play\\_sound](audio_play_sound.html) or [audio\\_play\\_sound_at](audio_play_sound_at.html) functions, or an actual sound asset from the resource tree.",
        "return": "Real"
    },
    "keyboard_key": {
        "parameters": [],
        "example": {
            "code": "switch (keyboard_key)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;case vk_numpad1: gun = weapon[0,0]; break;<br> &nbsp;&nbsp;&nbsp;case vk_numpad2: gun = weapon[1,0]; break;<br> &nbsp;&nbsp;&nbsp;case vk_numpad3: gun = weapon[2,0]; break;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_key;",
        "function": "keyboard_key;",
        "documentation": "With this variable you can get the keycode of the key that is currently being pressed and it will return 0 if no key is being pressed when the check is done.",
        "return": "Real"
    },
    "mouse_check_button": {
        "parameters": [
            {
                "label": "numb",
                "documentation": "Which mouse button constant to check for."
            }
        ],
        "example": {
            "code": "if mouse_check_button(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;instance_create_layer(mouse_x, mouse_y, \"Effects\", obj_Star);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mouse_check_button(numb);",
        "function": "mouse_check_button",
        "documentation": "This function will return true if the mouse button being checked is held down or false if it is not. You supply the mouse button to check from one of the following constants:",
        "return": "Boolean"
    },
    "draw_sprite_tiled": {
        "parameters": [
            {
                "label": "sprite",
                "documentation": "The index of the sprite to draw."
            },
            {
                "label": "subimg",
                "documentation": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
            },
            {
                "label": "x",
                "documentation": "The x coordinate of where to draw the sprite."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of where to draw the sprite."
            }
        ],
        "example": {
            "code": "draw_sprite_tiled(sprite_index, image_index, x, y);",
            "description": ""
        },
        "signature": "draw_sprite_tiled(sprite, subimg, x, y);",
        "function": "draw_sprite_tiled",
        "documentation": "This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function. Tiling is based on the width and height of the sprite as defined by the [sprite variables](../../instances/instance_variables/index.html) of the instance running the code.",
        "return": "N/A"
    },
    "path_set_kind": {
        "parameters": [],
        "example": {
            "code": "path_set_kind(path0, 1);",
            "description": ""
        },
        "signature": "path_set_kind(index, val);",
        "function": "path_set_kind",
        "documentation": "This function can be used to set the kind of path that you wish the specified resource to be. This can be either a straight line path (set to 0) or a smoothed path (set to 1) in which case the path precision has to be taken into account too (the precision can be set too using [path\\_set\\_precision](path_set_precision.html)). This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.  \n  \n![](setkind.png)",
        "return": "N/A"
    },
    "path_get_point_speed": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            },
            {
                "label": "n",
                "documentation": "The point identity to check."
            }
        ],
        "example": {
            "code": "if path_get_point_speed(c_path, 0) != 100<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;path_change_point(c_path, 0, path_get_point_x(c_path, 0), path_get_point_x(c_path, 0), 100);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "path_get_point_speed(index, n);",
        "function": "path_get_point_speed",
        "documentation": "With this function you can get the speed of the point (as defined in the [Path Editor](../../../../2_interface/1_editors/paths.html) or when you dynamically add a path point using [path\\_add\\_point()](../changing%20paths/path_add_point.html)) expressed as a percentage. So, if you have a path point set to 50 in the path editor, this function would return 50 when used.",
        "return": "Real."
    },
    "layer_background_speed": {
        "parameters": [
            {
                "label": "background_element_id",
                "documentation": "The unique ID value of the background element to change"
            },
            {
                "label": "speed",
                "documentation": "The speed multiplier/value to use for the element"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Background_water\");<br> var back_id = layer_background_get_id(lay_id);<br> layer_background_speed(back_id, 0.5);<br>",
            "description": ""
        },
        "signature": "layer_background_speed(background_element_id, speed);",
        "function": "layer_background_speed",
        "documentation": "",
        "return": "N/A"
    },
    "tilemap_get_tile_height": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to get the tile cell height of"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_Walls\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> global.snap_x = tilemap_get_tile_width(map_id);<br> global.snap_y = tilemap_get_tile_height(map_id);<br>",
            "description": ""
        },
        "signature": "tilemap_get_tile_height(tilemap_element_id);",
        "function": "tilemap_get_tile_height",
        "documentation": "",
        "return": "Real"
    },
    "analytics_event": {
        "parameters": [
            {
                "label": "string",
                "documentation": "A string to send to the provider"
            }
        ],
        "example": {
            "code": "if hs_new<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;analytics_event(\"New hiscore of \" + string (score));<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "analytics_event(string);",
        "function": "analytics_event",
        "documentation": "",
        "return": "N/A"
    },
    "audio_queue_sound": {
        "parameters": [
            {
                "label": "queueIndex",
                "documentation": "The index of the queue to add to."
            },
            {
                "label": "bufferId",
                "documentation": "The buffer to add to the queue."
            },
            {
                "label": "bufferOffset",
                "documentation": "The offset within the source buffer to start from."
            },
            {
                "label": "bufferLength",
                "documentation": "The length of the buffer (the number of the bytes in the buffer)."
            }
        ],
        "example": {
            "code": "len = async_load[? \"data_len\"];<br> audio_buff = buffer_create(len, buffer_fast, 1);<br> buffer_copy(async_load[? \"buffer_id\"], 0, len, buff, 0);<br> audio_queue_sound(audio_queue, audio_buff, 0, len);<br> audio_play_sound(audio_queue, 10, 0);<br>",
            "description": ""
        },
        "signature": "audio_queue_sound(queueIndex, bufferId, bufferOffset, bufferLength);",
        "function": "audio_queue_sound",
        "documentation": "This function will add the data from a buffer into the audio queue that you previously created using the function [audio\\_create\\_play_queue](audio_create_play_queue.html). You specify the queue index to add to, and the buffer ID to get the data from as well as the position (offset) within the buffer and the number of bytes to add. Once you have added audio from a buffer to a queue, the buffer cannot be deleted until you have first freed the queue using the function [audio\\_free\\_play_queue](audio_free_play_queue.html), and the buffer properties should match those of the the queue that you are adding the sound to.",
        "return": "N/A"
    },
    "ds_map_destroy": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to destroy."
            }
        ],
        "example": {
            "code": "ds_map_destroy(inventory);<br> inventory = -1;<br>",
            "description": ""
        },
        "signature": "ds_map_destroy(id);",
        "function": "ds_map_destroy",
        "documentation": "Ds\\_maps take up space in memory, which is allocated to them when they are created. This means that you also need to free this memory when the ds\\_map is not needed to prevent errors, memory leaks and loss of performance when running your game. This function does just that.",
        "return": "N/A."
    },
    "ds_priority_delete_min": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to use."
            }
        ],
        "example": {
            "code": "if ai_move<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;script_execute(ds_priority_delete_min(ai_priority));<br>  &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_priority_delete_min(id);",
        "function": "ds_priority_delete_min",
        "documentation": "This function will return the value that has the lowest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, the one that was added to the priority queue first will be the one to get removed, but all other values with the same priority will still be in the queue.",
        "return": "Real or String"
    },
    "draw_line_colour": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the start of the line."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the start of the line."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the end of the line."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the end of the line."
            },
            {
                "label": "col1",
                "documentation": "The colour of the start of the line."
            },
            {
                "label": "col2",
                "documentation": "The colour of the end of the line."
            }
        ],
        "example": {
            "code": "draw_line_colour(50, 50, 300, 50, c_red, c_blue);",
            "description": ""
        },
        "signature": "draw_line_colour(x1, y1, x2, y2, col1, col2);",
        "function": "draw_line_colour",
        "documentation": "With this function you can draw a 1 pixel wide line with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function [draw\\_set\\_colour](../colour/draw_set_colour.html).",
        "return": "N/A"
    },
    "part_type_direction": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "dir_min",
                "documentation": "The minimum direction the particle can start at."
            },
            {
                "label": "dir_max",
                "documentation": "The maximum direction the particle can start at."
            },
            {
                "label": "dir_incr",
                "documentation": "How much the particle direction should increase or decrease per step."
            },
            {
                "label": "dir_wiggle",
                "documentation": "How much should randomly be added or subtracted from the particle's direction per step."
            }
        ],
        "example": {
            "code": "part_type_shape(particle1, pt_shape_pixel);<br> part_type_size(particle1, 0.19, 0.79, 0.01, 0);<br> part_type_scale(particle1, 5, 5);<br> part_type_colour3(particle1, 32768, 8454016, 8454016);<br> part_type_alpha3(particle1, 0, 0.80, 0);<br> part_type_speed(particle1, 8, 10, -0.50, 1);<br> part_type_direction(particle1, 0, 359, 1, 20);<br> part_type_gravity(particle1, 0, 270);<br> part_type_orientation(particle1, 0, 359, 0, 0, 1);<br> part_type_blend(particle1, 1);<br> part_type_life(particle1, 10, 50);<br>",
            "description": ""
        },
        "signature": "part_type_direction(ind, dir_min, dir_max, dir_incr, dir_wiggle);",
        "function": "part_type_direction",
        "documentation": "This function is used to determine the direction of the particle when it is created and can also be used to make the particle increase or decrease its direction over its lifetime. The minimum and maximum direction values default at 0, which means that the particle will move to the right with no variation, but these values can be changed to limit the direction of movement following the standard _GameMaker Studio 2_ directions of 0 being right, 90 being up, 180 being left and 270 being down. If you set them to the same value the particles will only move in one direction.  \n  \nYou can also set an increment value which will add (if a positive number) or subtract (if a negative number) an amount of degrees to the direction over its lifetime. This value can be a minimum of (+/-) 0.01.  \n  \nFinally, you can set the \"wiggle\" factor. This is a value that will be added or subtracted randomly to the direction each step of the particles lifetime. Obviously larger values are more pronounced than smaller ones, and this value can even be a negative with the maximum range being between -20 and 20.",
        "return": "N/A"
    },
    "steam_ugc_query_set_match_any_tag": {
        "parameters": [
            {
                "label": "ugc_query_handle",
                "documentation": "The query handle to use."
            },
            {
                "label": "match_any_tag",
                "documentation": "Sets whether the UGC item tags should match anything or not."
            }
        ],
        "example": {
            "code": "var query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);<br> steam_ugc_query_set_match_any_tag(query_handle, false);<br> steam_ugc_query_add_excluded_tag(query_handle, \"walking simulator\");<br> steam_ugc_query_set_return_long_description(query_handle, true);<br> steam_ugc_query_set_allow_cached_response(query_handle, true);<br> query_ID = steam_ugc_send_query(query_handle);<br>",
            "description": ""
        },
        "signature": "steam_ugc_query_set_match_any_tag(ugc_query_handle , match_any_tag);",
        "function": "steam_ugc_query_set_match_any_tag",
        "documentation": "This function can be used to further filter any given UGC query, specifically to switch on or off tag matching. The query handle is the value returned when you created the query (using, for example, [steam\\_ugc\\_create\\_query\\_user()](steam_ugc_create_query_user.html)) and the second argument is either true or false depending on whether you require a check for matching tags. The function will return true if the query filter was correctly set, or false otherwise.",
        "return": "Boolean"
    },
    "view_surface_id": {
        "parameters": [],
        "signature": "view_surface_id[0...7];",
        "function": "view_surface_id[0...7];",
        "documentation": "With this variable you can set the contents of a given view port to draw to a surface, or get the current surface id if one has been assigned to a view port. When working with surfaces, it is often required that you capture the _whole_ visible region of the screen to the surface, and so you would assign it to a view port using this variable. This means that everything that is shown in the chosen view will now be drawn to the assigned surface. The view will now _not_ be drawn to the screen, meaning that you will need to either:",
        "return": "Real (surface index or -1 if no surface has been assigned)"
    },
    "part_type_colour_mix": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "colour1",
                "documentation": "The first colour the blend will take from."
            },
            {
                "label": "colour2",
                "documentation": "The second colour the blend will take from."
            }
        ],
        "example": {
            "code": "part_type_colour_mix(global.P_Damage, c_red, c_yellow);",
            "description": ""
        },
        "signature": "part_type_colour_mix(ind, colour1, colour2);",
        "function": "part_type_colour_mix",
        "documentation": "With this function you can set the given particle type to be a random blend of two colours.",
        "return": "N/A"
    },
    "draw_vertex_colour": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the vertex."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the vertex."
            },
            {
                "label": "col",
                "documentation": "The colour to draw this vertex with."
            },
            {
                "label": "alpha",
                "documentation": "The alpha to draw this vertex with (0-1)."
            }
        ],
        "example": {
            "code": "draw_primitive_begin(pr_trianglelist);<br> draw_vertex_colour(100, 100, c_blue, 0.1);<br> draw_vertex_colour(100, 200, c_red, 0.1);<br> draw_vertex_colour(150, 150, c_green, 1);<br> draw_primitive_end();<br>",
            "description": ""
        },
        "signature": "draw_vertex_colour(x, y, col, alpha)",
        "function": "draw_vertex_colour",
        "documentation": "This function defines the position of a vertex for a primitive, with its own colour and alpha setting. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it (see [draw\\_primitive\\_begin](draw_primitive_begin.html) for more information) and the vertexes with different colours and alphas will blend smoothly from one to the other. To end and draw the primitive you must call [draw\\_primitive\\_end](draw_primitive_end.html).",
        "return": "N/A"
    },
    "texture_global_scale": {
        "parameters": [
            {
                "label": "pow2integer",
                "documentation": "The scale factor to use (1, no scale, 2, half scale, 4, quarter scale, etc...)"
            }
        ],
        "example": {
            "code": "draw_texture_flush();<br> texture_global_scale(2);<br> sprite_prefetch(spr_Trees);<br>",
            "description": ""
        },
        "signature": "texture_global_scale(pow2integer);",
        "function": "texture_global_scale",
        "documentation": "This function allows you to control the scaling of the texture pages on load from the WAD file that is part of your final game executable. The input value must be a power of two value and will work such that:",
        "return": "N/A"
    },
    "mp_potential_step": {
        "parameters": [
            {
                "label": "xgoal",
                "documentation": "The target x position."
            },
            {
                "label": "ygoal",
                "documentation": "The target y position."
            },
            {
                "label": "stepsize",
                "documentation": "The speed the instance moves in pixels per step."
            },
            {
                "label": "checkall",
                "documentation": "Whether to check all instances (true) or just solid ones (false)."
            }
        ],
        "example": {
            "code": "if instance_exists(obj_Enemy)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var inst;<br> &nbsp;&nbsp;&nbsp;inst = instance_nearest(x, y, obj_Enemy);<br> &nbsp;&nbsp;&nbsp;mp_potential_step(inst.x, inst.y, 5, false);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "mp_potential_step(xgoal, ygoal, stepsize, checkall)",
        "function": "mp_potential_step",
        "documentation": "This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into a solid instance (or any instance when checkall is true) it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.",
        "return": "Boolean."
    },
    "sprite_add": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name (a string file path) of the file to add."
            },
            {
                "label": "imgnum",
                "documentation": "Use to indicate the number of sub-images (1 for a single image or for a *.gif)."
            },
            {
                "label": "removeback",
                "documentation": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
            },
            {
                "label": "smooth",
                "documentation": "Indicates whether to smooth the edges if transparent."
            },
            {
                "label": "xorig",
                "documentation": "Indicate the x position of the origin in the sprite."
            },
            {
                "label": "yorig",
                "documentation": "Indicate the y position of the origin in the sprite."
            }
        ],
        "example": {
            "code": "spr = sprite_add(\"player_5.png\", 16, true, true, 0, 0);",
            "description": ""
        },
        "signature": "sprite_add(fname, imgnumb, removeback, smooth, xorig, yorig);",
        "function": "sprite_add",
        "documentation": "With this function you can add an image as a sprite, loading it from an external source where the image file to be loaded should **always** be in either *.png, *.gif or *.jpg/jpeg format. The function returns the new sprite index which must then be used in all further codes that relate to the sprite. If you use this function with HTML5 or are getting an image from an URL, this function will also generate an asynchronous event. See [The Asynchronous Event](../../../2_interface/1_editors/events/async_events.html) for more information.",
        "return": "Real (sprite ID value)"
    },
    "ds_list_mark_as_list": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the list to mark."
            },
            {
                "label": "pos",
                "documentation": "The position within the list to mark."
            }
        ],
        "example": {
            "code": "var j_list = ds_list_create();<br> var sub_list = ds_list_create();<br> ds_list_add(sub_list, health);<br> ds_list_add(sub_list, lives);<br> ds_list_add(sub_list, score);<br> ds_list_add(j_list, sub_list);<br> ds_list_mark_as_list(j_list, 0);<br>",
            "description": ""
        },
        "signature": "ds_list_mark_as_list(id, pos);",
        "function": "ds_list_mark_as_list",
        "documentation": "This function will \"mark\" (or \"flag\") a given position within a previously created ds\\_list as holding another ds\\_list. This functionality is designed only for use when encoding JSON strings (which you can create using [json_encode](../../file%20handling/json_encode.html)) and the complimentary [ds map functions](../ds%20maps/index.html).  \n  \n_**NOTE:** Once a ds_list has had a value within it flagged as another list or map, destroying the list will also destroy the marked lists and maps too. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list._",
        "return": "N/A"
    },
    "ds_priority_add": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the priority queue to add to."
            },
            {
                "label": "val",
                "documentation": "The value to add to the priority queue."
            },
            {
                "label": "priority",
                "documentation": "The priority of the value to add."
            }
        ],
        "example": {
            "code": "ds_priority_add(ai_priority, scr_AI_Search, 5);",
            "description": ""
        },
        "signature": "ds_priority_add(id, val, priority);",
        "function": "ds_priority_add",
        "documentation": "With this function you can add a value (either a real number or a string) to a priority queue, at the same time assigning it a priority value.",
        "return": "N/A"
    },
    "colour_get_saturation": {
        "parameters": [
            {
                "label": "col",
                "documentation": "The colour to check"
            }
        ],
        "example": {
            "code": "col = make_colour_hsv(random(255), colour_get_sat(c_teal), 255);",
            "description": ""
        },
        "signature": "colour_get_saturation(col);",
        "function": "colour_get_saturation",
        "documentation": "This function will return the saturation of the given colour. This is the amount of the colour tone that is mixed into the final colour and is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour: ![](images/get_sat.png)",
        "return": "Real"
    },
    "texture_set_stage": {
        "parameters": [
            {
                "label": "stage",
                "documentation": "The texture \"slot\" to use."
            },
            {
                "label": "tex",
                "documentation": "The texture to use."
            }
        ],
        "example": {
            "code": "glassshader_bgsampler = shader_get_sampler_index(GlassShader, \"s_BackgroundSampler\")<br> spr = sprite_get_texture(sprite_index, 0);<br> shader_set(GlassShader);<br> texture_set_stage(glassshader_bgsampler, spr);<br> shader_reset();<br>",
            "description": ""
        },
        "signature": "texture_set_stage(stage, tex);",
        "function": "texture_set_stage",
        "documentation": "This function will set the given stage \"slot\" a texture to be used. The number of stage \"slots\" available will depend on the platform you are compiling to, with a maximum of 8 being available for Windows, Mac and Linux, but on lower end Android devices (for example) this number can be as low as 2. It is also worth noting that the first stage \"slot\" is always used automatically by _GameMaker Studio 2_.  \n  \n_**NOTE:** This function will do nothing outside of the context of a running shader! See [Shaders](../../shaders/index.html) for more information._",
        "return": "N/A"
    },
    "layer_exists": {
        "parameters": [
            {
                "label": "layer_name",
                "documentation": "The name of the layer (a string or ID value)"
            }
        ],
        "example": {
            "code": "if !layer_exists(global.tileLayer)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;global.tileLayer = layer_create(1000);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_exists(layer_name)",
        "function": "layer_exists",
        "documentation": "This function can be used to check if the given **layer** exists. You supply the layer ID (which you get when you create the layer using [layer_create()](layer_create.html)) or the layer name (as a string - this will have a performance impact) and the function will return a _boolean_ value of true if it exists or false if it does not.",
        "return": "Boolean"
    },
    "draw_ellipse": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the left of the ellipse."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the top of the ellipse."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the right of the ellipse."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the bottom of the ellipse."
            },
            {
                "label": "outline",
                "documentation": "Whether the ellipse is drawn filled (false) or as a one pixel wide outline (true)."
            }
        ],
        "example": {
            "code": "draw_set_colour(c_white);<br> draw_ellipse(100, 100, 300, 200, false);<br>",
            "description": ""
        },
        "signature": "draw_ellipse(x1, y1, x2, y2, outline);",
        "function": "draw_ellipse",
        "documentation": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. You can define how precise the drawing is with the function [draw\\_set\\_circle_precision](draw_set_circle_precision.html).",
        "return": "N/A"
    },
    "ef_ellipse": {
        "parameters": [],
        "example": {
            "code": "effect_create_below(ef_ellipse, x, y, choose(0, 1, 2), make_colour_hsv(irandom(255), 255, 255);<br>",
            "description": ""
        },
        "signature": "ef_ellipse;",
        "function": "ef_ellipse;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create an ellipse effect as illustrated in the image below:  \n  \n![](images/ef_ellipse.png)",
        "return": "N/A."
    },
    "file_text_open_write": {
        "parameters": [
            {
                "label": "fname",
                "documentation": "The name of the file to write to."
            }
        ],
        "example": {
            "code": "var file;<br> file = file_text_open_write(working_directory + \"level.txt\");<br> file_text_write_string(file, level_data);<br> file_text_close(file);<br>",
            "description": ""
        },
        "signature": "file_text_open_write(fname);",
        "function": "file_text_open_write",
        "documentation": "This function opens the text file with the indicated filename for _writing only_ (if the file does not exist, it is created), returning the unique _id_ of the file that which should be stored in a variable as it will be used for all further actions to do with that file. Note that if the file _can't_ be created (because of an illegal filename, for example) the function will return -1.  \n  \n  \n_**NOTE:** You can only have a maximum of 32 files open at any one time. You should also **always** close files when finished as this writes the information and frees the memory associated with the file._  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "Real"
    },
    "os_get_config": {
        "parameters": [],
        "example": {
            "code": "if os_get_config() = \"Free_Version\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;ads_enable((room_width / 2) - 100, 0, 200, 75, 60);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "os_get_config()",
        "function": "os_get_config",
        "documentation": "This function returns the name (as a string) of the currently selected configuration for your game. For more information on configurations please see the section [Advanced Use: Configurations](../../../2_interface/3_settings/configurations.html).",
        "return": "String"
    },
    "motion_set": {
        "parameters": [
            {
                "label": "dir",
                "documentation": "The new direction."
            },
            {
                "label": "speed",
                "documentation": "The new speed.`"
            }
        ],
        "example": {
            "code": "if irandom(9) = 1 motion_set(random(360), 1 + random(3));<br>",
            "description": ""
        },
        "signature": "motion_set(dir, speed);",
        "function": "motion_set",
        "documentation": "This function sets a new direction of movement and a new speed to the instance running the code. Note that this _does not_ add to the instances current speed and direction (for that you would use [motion_add](motion_add.html)) but rather forces it to the new settings.",
        "return": "N/A"
    },
    "tilemap_clear": {
        "parameters": [
            {
                "label": "tilemap_element_id",
                "documentation": "The unique ID value of the tilemap element to change"
            },
            {
                "label": "tiledata",
                "documentation": "The tile data to use to clear the layer"
            }
        ],
        "example": {
            "code": "var layer_id = layer_get_id(\"Forest\");<br> var tile_id = layer_tilemap_get_id(layer_id);<br> tilemap_clear(tile_id, 0);<br>",
            "description": ""
        },
        "signature": "tilemap_clear(tilemap_element_id, tiledata)",
        "function": "tilemap_clear",
        "documentation": "",
        "return": "N/A"
    },
    "keyboard_check_direct": {
        "parameters": [
            {
                "label": "key",
                "documentation": "The key to check the down state of."
            }
        ],
        "example": {
            "code": "if keyboard_check_direct(vk_ralt) || keyboard_check_direct(vk_lalt)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;crouch = true;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "keyboard_check_direct(key);",
        "function": "keyboard_check_direct",
        "documentation": "This function will return true if the key with the particular keycode is pressed, or false if it is not, by checking the hardware directly. It allows for a few more checks, in particular you can use keycodes **vk_lshift**, **vk_lcontrol**, **vk_lalt**, **vk_rshift**, **vk_rcontrol** and **vk_ralt** to check whether the left or right shift, control or alt key is pressed.  \n  \n_**NOTE:** This function is only available for the standard Windows target and the result is independent of which application has focus._",
        "return": "Boolean"
    },
    "part_particles_count": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle system."
            }
        ],
        "example": {
            "code": "if part_particles_count(Sname) = 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;part_system_destroy(Sname);<br> &nbsp;&nbsp;&nbsp;instance_destroy();<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "part_particles_count(ind);",
        "function": "part_particles_count",
        "documentation": "With this function you can check to see if a particle system currently has any particles created in the room, and it will return the number of them too.",
        "return": "Real"
    },
    "program_directory": {
        "parameters": [],
        "example": {
            "code": "dir = program_directory;",
            "description": ""
        },
        "signature": "program_directory",
        "function": "program_directory",
        "documentation": "This will return the directory where the game executable is stored. However this may not always be useful, particularly as some devices run the exe from a *.zip file, so this would return the same no matter where the game is actually running from.",
        "return": "String"
    },
    "game_id": {
        "parameters": [],
        "signature": "game_id",
        "function": "game_id",
        "documentation": "This **read only** variable returns the unique identifier for the game you have created. You can use this if you need a unique file name, or anything else that needs something to identify your game only. This can be set in the [Game Options](../../../2_interface/3_settings/game_options/index.html).",
        "return": "Real"
    },
    "path_speed": {
        "parameters": [],
        "example": {
            "code": "path_speed = -1 + random(2);",
            "description": ""
        },
        "signature": "path_speed;",
        "function": "path_speed;",
        "documentation": "",
        "return": "Real"
    },
    "dot_product_3d": {
        "parameters": [
            {
                "label": "x1",
                "documentation": "The x coordinate of the first vector."
            },
            {
                "label": "y1",
                "documentation": "The y coordinate of the first vector."
            },
            {
                "label": "z1",
                "documentation": "The z coordinate of the first vector."
            },
            {
                "label": "x2",
                "documentation": "The x coordinate of the second vector."
            },
            {
                "label": "y2",
                "documentation": "The y coordinate of the second vector."
            },
            {
                "label": "z2",
                "documentation": "The z coordinate of the second vector."
            }
        ],
        "example": {
            "code": "var x1, y1, x2, y2;<br> x1 = 0;<br> y1 = 1;<br> z1 = 0;<br> x2 = o_Player.x - x;<br> y2 = o_Player.y - y;<br> z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) &gt; 0 above=true else above=false;<br>",
            "description": ""
        },
        "signature": "dot_product_3d(x1, y1, z1, x2, y2, z2)",
        "function": "dot_product_3d",
        "documentation": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\" that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).  \n  \nThe actual mathematical formula can be written like this:  \n  \n![](images/dot_product_image.png)",
        "return": "Real"
    },
    "GM_build_date": {
        "parameters": [],
        "example": {
            "code": "draw_text(32, 32, date_time_string(GM_build_date));<br> draw_text(32, 64, \"v\" + GM_version);<br>",
            "description": ""
        },
        "signature": "GM_build_date;",
        "function": "GM_build_date;",
        "documentation": "This constant holds the date and time on which the executable being run was built by _GameMaker Studio 2_. The value can be parsed using the [Date and Time](../maths/date%20and%20time/index.html) functions and is taken from the system UTC value at compile time.",
        "return": "Real"
    },
    "steam_stats_ready": {
        "parameters": [],
        "example": {
            "code": "global.steam_api = false;<br> if steam_initialised()<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;if steam_stats_ready() &amp;&amp; steam_is_overlay_enabled()<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global.steamapi = true;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "steam_stats_ready();",
        "function": "steam_stats_ready",
        "documentation": "When using the Steam API, this function can be called to check that the Steam client API has correctly initialised the statistics for your game.",
        "return": "Boolean"
    },
    "audio_sound_set_listener_mask": {
        "parameters": [
            {
                "label": "soundID",
                "documentation": "The unique ID of the sound to set the mask of"
            },
            {
                "label": "mask",
                "documentation": "The bitmask data to set for the sound"
            }
        ],
        "example": {
            "code": "var snd = audio_play_sound(snd_PlayerDead, 10, false);<br> audio_sound_set_listener_mask(snd, global.PlayerMask);<br>",
            "description": ""
        },
        "signature": "audio_sound_set_listener_mask(soundID, mask);",
        "function": "audio_sound_set_listener_mask",
        "documentation": "This function can be used to set the the bit-mask for a sound so that it will play only from those listeners specified. You can create a bit-mask by using the [audio\\_get\\_listener_info()](audio_get_listener_info.html) and then using the bitwise or (\"|\") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the sound after you have played it. This mask will over-ride the default mask or that which you may have set using the function [audio\\_set\\_listener_mask()](audio_set_listener_mask.html).",
        "return": "N/A"
    },
    "mouse_x": {
        "parameters": [],
        "example": {
            "code": "x = median(64, mouse_x, room_width - 64);",
            "description": ""
        },
        "signature": "mouse_x;",
        "function": "mouse_x;",
        "documentation": "This **read-only** variable returns the current x axis position of the mouse within the room.",
        "return": "Real"
    },
    "vertex_format_add_position_3d": {
        "parameters": [],
        "example": {
            "code": "vertex_format_begin();<br> vertex_format_add_colour();<br> vertex_format_add_position_3d();<br> my_format = vertex_format_end();<br>",
            "description": ""
        },
        "signature": "vertex_format_add_position_3d();",
        "function": "vertex_format_add_position_3d",
        "documentation": "Tell _GameMaker Studio 2_ to accept 3D positional data (x, y and z) as part of the new vertex format being created.",
        "return": "N/A"
    },
    "file_text_open_from_string": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to create the file from."
            }
        ],
        "example": {
            "code": "file = file_text_open_from_string(reset_str);",
            "description": ""
        },
        "signature": "file_text_open_from_string(string);",
        "function": "file_text_open_from_string",
        "documentation": "This function will create a text file from a string and open it for reading, returning the file \"handle\" that should be used in all further file function calls to read from this file. Note that this file is temporary and _read only_, and as such it will be removed from memory the moment it is closed.  \n  \n  \n_**NOTE:** You can only have a maximum of 32 files open at any one time. You should also **always** close files when finished as this frees the memory associated with the file._  \n  \n_**WARNING!** This function may not work as you expect due to_ GameMaker Studio 2 being sandboxed! Please see the section on [File System Limits](../../../../1_overview/3_additional_information/file_system.html) for more information.",
        "return": "Real"
    },
    "date_compare_date": {
        "parameters": [
            {
                "label": "date1",
                "documentation": "The first date."
            },
            {
                "label": "date2",
                "documentation": "The date to compare it to."
            }
        ],
        "example": {
            "code": "d = date_compare_date(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());",
            "description": ""
        },
        "signature": "date_compare_date( date1, date2 );",
        "function": "date_compare_date",
        "documentation": "With this function you can check two dates to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 0 if both dates are the same, and 1 if date1 is later.",
        "return": "Real"
    },
    "path_get_name": {
        "parameters": [
            {
                "label": "index",
                "documentation": "The index of the path to check."
            }
        ],
        "example": {
            "code": "name = path_get_name(mypath);",
            "description": ""
        },
        "signature": "path_get_name(index);",
        "function": "path_get_name",
        "documentation": "This function will return the name of the path that is referenced as a string. The name is whatever has been used to define the path in the editor or (if the path has been created through a code function) it will return a string with the format \"_newpathXX\" where \"XX\" is the number of the path generated, starting at 0 and incrementing by one every time a new path is created. Please note that this is _only_ a string and cannot be used to reference the path directly - for that you would need the _path index_. You can, however, use this string to get the _path index_ using the returned string along with the function [asset\\_get\\_index()](../../asset_get_index.html).",
        "return": "String."
    },
    "skeleton_skin_get": {
        "parameters": [],
        "example": {
            "code": "if skeleton_skin_get() == \"skin_Enemy1\"<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;skeleton_skin_set(choose(\"skin_Enemy1\", \"skin_Enemy2\", \"skin_Enemy3\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "skeleton_skin_get();",
        "function": "skeleton_skin_get",
        "documentation": "With skeletal animation sprites, you can assign separate textures (called \"skins\") to the animation, thereby using one animation for multiple different things. This function will return the name of the skin (as a string) that is currently assigned to the skeletal animation sprite your instance is using. The name returned is that which you set when you created the sprite in your animation program.",
        "return": "String"
    },
    "audio_group_is_loaded": {
        "parameters": [
            {
                "label": "groupID",
                "documentation": "The index of the audio group to check (as defined in the Audio Groups Window)"
            }
        ],
        "example": {
            "code": "if audio_group_is_loaded(audiogroup_level1)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;audio_group_unload(audiogroup_level1);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "audio_group_is_loaded(groupID);",
        "function": "audio_group_is_loaded",
        "documentation": "This function will check a specific audio group to see if it has been loaded into memory, ready for use.",
        "return": "Boolean"
    },
    "buffer_md5": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The index of the buffer to use."
            },
            {
                "label": "offset",
                "documentation": "The data offset value."
            },
            {
                "label": "size",
                "documentation": "The size of the buffer."
            }
        ],
        "example": {
            "code": "check_string = buffer_md5(buff, 0, buffer_get_size(buff));",
            "description": ""
        },
        "signature": "buffer_md5(buffer, offset, size);",
        "function": "buffer_md5",
        "documentation": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of data. This function will take the input data from a given buffer (or part of the buffer) and return the 32-character hexadecimal MD5 hash that is unique to that data. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed.",
        "return": "String"
    },
    "display_mouse_get_y": {
        "parameters": [],
        "example": {
            "code": "my_y = display_mouse_get_y();",
            "description": ""
        },
        "signature": "display_mouse_get_y();",
        "function": "display_mouse_get_y",
        "documentation": "",
        "return": "Real"
    },
    "device_get_tilt_z": {
        "parameters": [],
        "example": {
            "code": "y += sign(device_get_tilt_z());",
            "description": ""
        },
        "signature": "device_get_tilt_z()",
        "function": "device_get_tilt_z",
        "documentation": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90ï¿½. The image below shows how each if the available functions relates to the device: ![](tilt_image.png)",
        "return": "Real"
    },
    "part_emitter_create": {
        "parameters": [
            {
                "label": "ps",
                "documentation": "The particle system to create the emitter in."
            }
        ],
        "example": {
            "code": "p_emit1 = part_emitter_create(Sname);",
            "description": ""
        },
        "signature": "part_emitter_create(ps);",
        "function": "part_emitter_create",
        "documentation": "This function must be used to create a new emitter and assign it to a given particle system. The function will return the index value for the new emitter which must be stored in a variable and used in all further functions that reference the emitter, and the emitter itself must be destroyed when no longer being used to prevent memory leaks (this can be achieved using the specific emitter destroy functions or by destroying the whole particle system that the emitter belongs to).",
        "return": "Real"
    },
    "ef_ring": {
        "parameters": [],
        "example": {
            "code": "if mouse_check_button_pressed(mb_left)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;effect_create_below(ef_ring, mouse_x, mouse_y, 1, c_aqua);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ef_ring;",
        "function": "ef_ring;",
        "documentation": "This **constant** is for use in the functions [effect\\_create\\_above](effect_create_above.html) and [effect\\_create\\_below](effect_create_below.html), and will create a ring effect as illustrated in the image below:  \n  \n![](images/ef_ring.png)",
        "return": "N/A."
    },
    "mp_grid_add_instances": {
        "parameters": [
            {
                "label": "id",
                "documentation": "Index of the mp_grid that is to be used"
            },
            {
                "label": "obj",
                "documentation": "Object index, or instance id, of the instances to be added into the mp_grid"
            },
            {
                "label": "prec",
                "documentation": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
            }
        ],
        "example": {
            "code": "mp_grid_add_instances(grid, obj_Wall, true);<br>",
            "description": ""
        },
        "signature": "mp_grid_add_instances(id, obj, prec);",
        "function": "mp_grid_add_instances",
        "documentation": "This function uses the instance collision mask (decided by the sprite properties or the mask index of the calling instance) to mark cells as forbidden or not, where forbidden cells cannot be crossed by any of the pathfinding functions. You can specify in the function whether to consider precise collisions or not and the forbidden cells marked will change depending on this setting. This image illustrates this behaviour:  \n  \n![](images/mp_grid_add_instance_image.png)",
        "return": "N/A"
    },
    "skeleton_attachment_create": {
        "parameters": [
            {
                "label": "name",
                "documentation": "The name (as a string) of the attachment to create."
            },
            {
                "label": "sprite",
                "documentation": "The sprite_index to get the attachment image from."
            },
            {
                "label": "ind",
                "documentation": "The image_index to get the attachment image from."
            },
            {
                "label": "xorigin",
                "documentation": "The x origin for the image being used."
            },
            {
                "label": "yorigin",
                "documentation": "The y origin for the image being used."
            },
            {
                "label": "xscale",
                "documentation": "The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "yscale",
                "documentation": "The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
            },
            {
                "label": "rot",
                "documentation": "The rotation of the image. 0=normal, 90=turned 90 degrees counter-clockwise etc."
            }
        ],
        "example": {
            "code": "skeleton_attachment_create(\"sword\", spr_Weapons, 0, 0, 80, 1, 1, 90);<br> skeleton_attachment_create(\"knife\", spr_Weapons, 1, 0, 45, 1, 1, 90);<br> skeleton_attachment_create(\"crossbow\", spr_Weapons, 0, 10, 30, 1, 1, 0);<br> skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"knife\", \"crossbow\"));<br>",
            "description": ""
        },
        "signature": "skeleton_attachment_create(name, sprite, ind, xorigin, yorigin, xscale, yscale, rot);",
        "function": "skeleton_attachment_create",
        "documentation": "When you create you skeletal animation sprite, you can assign _attachment slots_ and _attachments_ to go in them. These are simply images that are apart from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite\\_index and image\\_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.",
        "return": "1 if successful, -1 if not"
    },
    "buffer_sizeof": {
        "parameters": [
            {
                "label": "type",
                "documentation": "The type of data that is to be checked (see the list of constants here)."
            }
        ],
        "example": {
            "code": "var b = 12 * buffer_sizeof(buffer_u8);<br> buff = buffer_create(b, buffer_fixed, 1);<br>",
            "description": ""
        },
        "signature": "buffer_sizeof(type);",
        "function": "buffer_sizeof",
        "documentation": "This function will return the size (in bytes) of any of the given data constants (listed [here](buffer_write.html)).",
        "return": "N/A"
    },
    "camera_get_view_angle": {
        "parameters": [
            {
                "label": "camera_id",
                "documentation": "The unique camera ID value returned when you created the camera"
            }
        ],
        "example": {
            "code": "var ang = camera_get_view_angle(view_camera[0]);<br> if ang != 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;camera_set_view_angle(view_camera[0], 0);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "camera_get_view_angle(camera_id)",
        "function": "camera_get_view_angle",
        "documentation": "This function can be used to retrieve the angle of the given camera. The return value will be between 0 and 360.",
        "return": "Real"
    },
    "view_current": {
        "parameters": [],
        "example": {
            "code": "if view_current == 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx = camera_get_view_x(view_camera[0]);<br> &nbsp;&nbsp;&nbsp;var yy = camera_get_view_y(view_camera[0]);<br> &nbsp;&nbsp;&nbsp;draw_text(xx + 32, yy + 32, \"Player 1\");<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;var xx = camera_get_view_x(view_camera[1]);<br> &nbsp;&nbsp;&nbsp;var yy = camera_get_view_y(view_camera[1]);<br> &nbsp;&nbsp;&nbsp;draw_text(xx + 32, yy + 32, \"Player 2\");<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_current;",
        "function": "view_current;",
        "documentation": "",
        "return": "Real (view port index from 0 to 7)"
    },
    "ds_list_size": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the data structure to check."
            }
        ],
        "example": {
            "code": "if !ds_list_empty(control_list)<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;num = ds_list_size(control_list);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "ds_list_size(id);",
        "function": "ds_list_size",
        "documentation": "This function will return the \"size\" of the list, ie: the number of items that have been added into it.",
        "return": "Real"
    },
    "vertex_float1": {
        "parameters": [
            {
                "label": "buffer",
                "documentation": "The buffer to write the information to."
            },
            {
                "label": "float",
                "documentation": "The input value."
            }
        ],
        "example": {
            "code": "vertex_float1(buff, 0.05);",
            "description": ""
        },
        "signature": "vertex_float1(buffer, float);",
        "function": "vertex_float1",
        "documentation": "This function will add a floating point value to the vertex data. The vertex must have been formatted correctly to accept this using the [vertex\\_format\\_add_custom](../vertex%20formats/vertex_format_add_custom.html) function.",
        "return": "N/A"
    },
    "draw_surface": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The unique ID value of the surface to draw."
            },
            {
                "label": "x",
                "documentation": "The x position of where to draw the surface."
            },
            {
                "label": "y",
                "documentation": "The y position of where to draw the surface."
            }
        ],
        "example": {
            "code": "var _vx = camera_get_view_x(view_camera[0]);<br> var _vy = camera_get_view_y(view_camera[0]);<br> draw_surface(surf, _vx, _vy);<br>",
            "description": ""
        },
        "signature": "draw_surface(id, x, y);",
        "function": "draw_surface",
        "documentation": "With this function you can draw a surface at a given position within the room, with the top left corner of the image being drawn at the specified x/y position.",
        "return": "N/A"
    },
    "draw_text": {
        "parameters": [
            {
                "label": "x",
                "documentation": "The x coordinate of the drawn string."
            },
            {
                "label": "y",
                "documentation": "The y coordinate of the drawn string."
            },
            {
                "label": "string",
                "documentation": "The string to draw."
            }
        ],
        "example": {
            "code": "draw_text(x, y, \"Hello, \" + global.Name + \"!/nI hope you are well!\");",
            "description": ""
        },
        "signature": "draw_text(x, y, string);",
        "function": "draw_text",
        "documentation": "With this function you can draw any string at any position within the room (for drawing real numbers you should use the [string](../../strings/string.html) function to convert them into text). To combine strings you can use **+** (see example below) and you can also use **\\\\n** within a string to add a line break so it is drawn over multiple lines (for information on how to properly format a string and what escape characters you can use, please see [here](../../strings/index.html)). The colour of the text and the alpha are governed by the current base alpha and colour values as set by [draw\\_set\\_alpha](../colour/draw_set_alpha.html) and [draw\\_set\\_colour](../colour/draw_set_colour.html)  \n  \n_**NOTE:** The actual position of the text will be influenced by the alignment values set by [draw\\_set\\_halign](draw_set_halign.html) and [draw\\_set\\_valign](draw_set_valign.html)._",
        "return": "N/A"
    },
    "date_get_second_of_year": {
        "parameters": [
            {
                "label": "date",
                "documentation": "The date to check."
            }
        ],
        "example": {
            "code": "mysecondyear = date_get_second_of_year(date_current_datetime());",
            "description": ""
        },
        "signature": "date_get_second_of_year( date );",
        "function": "date_get_second_of_year",
        "documentation": "This function returns the second of the given datetime value within the year (from the total number of seconds for the year, taking into account leap years).",
        "return": "Real"
    },
    "path_flip": {
        "parameters": [],
        "example": {
            "code": "path_flip(mypath);",
            "description": ""
        },
        "signature": "path_flip(index);",
        "function": "path_flip",
        "documentation": "This function takes all the path points and flips them along the horizontal axis. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.  \n  \n![](pathflip.png)",
        "return": "N/A"
    },
    "phy_angular_velocity": {
        "parameters": [],
        "example": {
            "code": "if abs(phy_angular_velocity) &gt; 0<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_angular_velocity -= sign(phy_angular_velocity) * 0.01;<br> &nbsp;&nbsp;&nbsp;}<br> else<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;phy_angular_velocity = 0;<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "phy_angular_velocity;",
        "function": "phy_angular_velocity;",
        "documentation": "This variable can be used to set the angular velocity of the instance, or it can be used to get the current angular velocity, in degrees per second and the value used can be either positive (for clockwise rotation) or negative (for anticlockwise rotation). If you set this on an instance that was previously static (ie: it has a density of 0) it will become a kinematic object and begin rotating.",
        "return": "Real"
    },
    "audio_create_stream": {
        "parameters": [
            {
                "label": "filename",
                "documentation": "The file (OGG only) to stream the audio from."
            }
        ],
        "example": {
            "code": "snd = audio_create_stream(\"Music/Track1.ogg\");<br> audio_play_sound(snd, 0, true);<br>",
            "description": ""
        },
        "signature": "audio_create_stream(filename);",
        "function": "audio_create_stream",
        "documentation": "With this function you can create a new sound index which can then be used in the regular audio functions to stream audio directly from an external OGG file source. The function requires the filename (which can be an included file, for example) and will return the new sound index for use. Note that after you no longer need the sound you should call the function [audio\\_destroy\\_stream()](audio_destroy_stream.html) with the sound index to remove it from memory otherwise you may get a memory leak which will slow down and eventually crash your game.",
        "return": "Sound Index"
    },
    "get_timer": {
        "parameters": [],
        "signature": "get_timer();",
        "function": "get_timer",
        "documentation": "This function returns the time that your game has been running on the chosen platform in microseconds (there are 1 million microseconds per second).",
        "return": "Real"
    },
    "physics_particle_set_max_count": {
        "parameters": [
            {
                "label": "count",
                "documentation": "The maximum number of particles to permit."
            }
        ],
        "example": {
            "code": "physics_particle_set_max_count(500);",
            "description": ""
        },
        "signature": "physics_particle_set_max_count(count)",
        "function": "physics_particle_set_max_count",
        "documentation": "This function will set the total permitted number of particles in a physics simulation. If you set this value to 0, then there is no cap the particles created, and setting it to any other value will stop any further particles being created when the total number of particles is equal to the value. Note that the _minimum_ number of particles you can create in a simulation is 128, so setting this value any lower will have no effect (unless set to 0).",
        "return": "N/A"
    },
    "layer_sprite_change": {
        "parameters": [
            {
                "label": "sprite_element_id",
                "documentation": "The unique ID value of the sprite element to change"
            },
            {
                "label": "sprite_index",
                "documentation": "The new sprite index to use"
            }
        ],
        "example": {
            "code": "var s = layer_sprite_get_id(layer, global.Asset_sprite);<br> if layer_sprite_get_sprite(s) != spr_Nighttime<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;layer_sprite_change(s, spr_nighttime);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "layer_sprite_change(sprite_element_id, sprite_index)",
        "function": "layer_sprite_change",
        "documentation": "",
        "return": "N/A"
    },
    "tile_get_flip": {
        "parameters": [
            {
                "label": "tiledata",
                "documentation": "the tiledata to check"
            }
        ],
        "example": {
            "code": "var lay_id = layer_get_id(\"Tiles_sky\");<br> var map_id = layer_tilemap_get_id(lay_id);<br> var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);<br> var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);<br> var data = tilemap_get(map_id, mx, my);<br> var bool = !tile_get_flip(data);<br> data = tile_set_flip(data, bool);<br> tilemap_set(map_id, data, mx, my);<br>",
            "description": ""
        },
        "signature": "tile_get_flip(tiledata)",
        "function": "tile_get_flip",
        "documentation": "",
        "return": "Boolean"
    },
    "steam_ugc_create_item": {
        "parameters": [
            {
                "label": "consumer_app_id",
                "documentation": "The unique App ID for your game on Steam."
            },
            {
                "label": "file_type",
                "documentation": "One of the available file type constants (listed below)."
            }
        ],
        "signature": "steam_ugc_create_item(consumer_app_id, file_type);",
        "function": "steam_ugc_create_item",
        "documentation": "This function is used to prepare the Workshop API and generate a published file ID for the item to be added. The function _must_ be called before doing anything else with the item to be uploaded, as you will be required to use the unique published ID value that it returns in the Steam Async Event for updating. To use this function, you need to supply the Steam App ID for your game, and the use one of the following constants for the file_type argument:",
        "return": "Async ID"
    },
    "string_upper": {
        "parameters": [
            {
                "label": "string",
                "documentation": "The string to convert to uppercase."
            }
        ],
        "example": {
            "code": "str1 = \"Hello World\";<br> str2 = string_upper(str1);<br>",
            "description": ""
        },
        "signature": "string_upper(string);",
        "function": "string_upper",
        "documentation": "With this function you can force a string to contain only upper case characters.",
        "return": "String"
    },
    "part_type_colour1": {
        "parameters": [
            {
                "label": "ind",
                "documentation": "The index of the particle type to change."
            },
            {
                "label": "colour1",
                "documentation": "The single colour to make the particle type."
            }
        ],
        "example": {
            "code": "part_type_colour1(global.Snow_Part, c_white);",
            "description": ""
        },
        "signature": "part_type_colour1(ind, colour1);",
        "function": "part_type_colour1",
        "documentation": "This function is used to set a particle type to be a single colour for the total duration of the lifetime of each individual particle.",
        "return": "N/A"
    },
    "darctan": {
        "parameters": [
            {
                "label": "val",
                "documentation": "The angle (in degrees) to return the inverse tangent of."
            }
        ],
        "example": {
            "code": "val = darctan(1);",
            "description": ""
        },
        "signature": "darctan(x);",
        "function": "darctan",
        "documentation": "Returns the inverse tangent of x. This will accept any number as, unlike dtan, darctans asymptotes are on the y axis so it just means you'll never get returned a number greater than 90 or less than -90.",
        "return": "Real"
    },
    "object_get_mask": {
        "parameters": [],
        "signature": "object_get_mask(obj);",
        "function": "object_get_mask",
        "documentation": "This function will tell you whether the object you are checking has a mask index or not, and if it does then it will return the index of that mask, or -1 if it does not. Please note that this is not an instance function! You can have an object with no mask while an instance of that same object can have one and vice-versa, or they can even have different masks. You can set an individual instances mask index using the [mask_index](../instances/instance_variables/mask_index.html) instance variable.",
        "return": "real"
    },
    "room_set_viewport": {
        "parameters": [
            {
                "label": "rm",
                "documentation": "The index of the room to set"
            },
            {
                "label": "vind",
                "documentation": "The index of the view port to set"
            },
            {
                "label": "vis",
                "documentation": "The visibility of the view port (true is visible, false is invisible)"
            },
            {
                "label": "xport",
                "documentation": "The x position for the view port in the room"
            },
            {
                "label": "yport",
                "documentation": "The y position of the view port in the room"
            },
            {
                "label": "wport",
                "documentation": "The width (in pixels) of the view port"
            },
            {
                "label": "hport",
                "documentation": "The height (in pixels) of the view port"
            }
        ],
        "example": {
            "code": "global.myroom = room_add();<br> room_set_width(global.myroom, 640);<br> room_set_height(global.myroom, 480);<br> room_set_viewport(global.myroom, 0, true, 0, 0, 640, 480);<br>",
            "description": ""
        },
        "signature": "room_set_viewport(rm, vind, vis, xport, yport, wport, hport);",
        "function": "room_set_viewport",
        "documentation": "With this function you can set the view port properties for any room in your game _except the current one_. You supply the room index to set the view port in, the view port index (from 0 to 7) and then whether the view port should be visible at the start of the room or not (set to true to make the port visible, and false otherwise). After that you set the x and y coordinate (corresponding to the top left position of the view port) and then the width and height in pixels.",
        "return": "N/A"
    },
    "steam_ugc_set_item_preview": {
        "parameters": [
            {
                "label": "ugc_update_handle",
                "documentation": "The unique handle for the UGC to be updated."
            },
            {
                "label": "preview",
                "documentation": "The preview image (JPG, GIF or PNG - max size 1MB) to be used for the item."
            }
        ],
        "example": {
            "code": "var app_id = steam_get_app_id();<br> var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID);<br> steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\");<br> steam_ugc_set_item_description( updateHandle, \"testing workshop...\");<br> steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);<br> var tagArray;<br> tagArray[0] = \"Test\";<br> tagArray[1] = \"New\";<br> steam_ugc_set_item_tags(updateHandle, tagArray);<br> steam_ugc_set_item_preview(updateHandle, \"promo.jpg\");<br> steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\");<br> requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");<br>",
            "description": ""
        },
        "signature": "steam_ugc_set_item_preview(ugc_update_handle, preview);",
        "function": "steam_ugc_set_item_preview",
        "documentation": "This function will set the preview image to be used for the given item. The image should be supplied as either a PNG, JPG or GIF format file with a maximum size of 1MB. The path to the image should be a relative path in the save are _or_ the game bundle (ie: an included file). The update handle is the value returned when you called the function [steam\\_ugc\\_start\\_item\\_update](steam_ugc_start_item_update.html). The function will return true if the API was successfully accessed and false if there was an issue.",
        "return": "Boolean"
    },
    "physics_fixture_set_kinematic": {
        "parameters": [
            {
                "label": "fixture",
                "documentation": "The index of the fixture."
            }
        ],
        "example": {
            "code": "physics_fixture_set_kinematic(fix_Cloud);",
            "description": "The code above will indicate that the fixture indexed in \"fix_Cloud\" should be marked as kinematic."
        },
        "signature": "physics_fixture_set_kinematic(fixture)",
        "function": "physics_fixture_set_kinematic",
        "documentation": "There will be certain instances in a physics based game which you want to move around but do not wish to be acted on by forces such as gravity, nor forces incurred by collisions with dynamic objects (think of moving platforms in a platform game, for example). For such objects simply setting the density of a fixture to 0 will mean that the physics will assume that the object is intended to be static. However, should you set the phy\\_speed\\_x, phy\\_speed\\_y or phy\\_angular\\_velocity variables for an instance that has had such a fixture bound to it, it will be converted into a kinematic object and begin movement. Change the instance from static to kinematic mid-simulation can be expensive in terms of processing (depending on the state of the instances in the physics world) and therefore it is recommended to set the fixture to be kinematic using this function prior to binding it to an instance, so that it will be unaffected by collisions and forces (such as gravity) but may move with constant linear and/or angular velocity.",
        "return": " N/A"
    },
    "ds_map_add_map": {
        "parameters": [
            {
                "label": "id",
                "description": "The id of the map to use."
            },
            {
                "label": "key",
                "description": "The key for the added map."
            },
            {
                "label": "value",
                "description": "The id of the map to add."
            }
        ],
        "example": {
            "code": "var j_map = ds_map_create();<br> var j_list = ds_list_create();<br> var sub_map = ds_map_create();<br> ds_map_add_list(sub_map, \"list\", j_list);<br> ds_map_add(sub_map, \"array\", j_array);<br> ds_map_add_map(j_map, \"map\", sub_map);<br> var j = json_encode(j_map);<br> ds_map_destroy(j_map);<br>",
            "description": "The above code will create two ds_maps, and then populate one with a list and an array before adding it into the second, which is then encoded into a JSON string. The map is then destroyed to remove it, and any other maps or lists that it contains, from memory."
        },
        "signature": "ds_map_add_map(id, key, value)",
        "function": "ds_map_add_map",
        "documentation": "With this function you can assign a (previously created) ds_map to a key within the given ds_map. This function is designed for creating JSON compatible maps which you would then encode using [json_encode](../../file%20handling/json_encode.html) and should only be used in conjunction with that functionality. If a ds_map has another map added in this way, then destroying the parent map will also destroy the contained maps and free their memory.",
        "return": " N/A"
    },
    "view_set_visible": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "visible",
                "documentation": "Visibility toggle (true is visible and false is invisible)"
            }
        ],
        "example": {
            "code": "if !view_get_visible(0) &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_visible(0, true);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": "The above code will check to see if the view port[0] is visible and if it is not it is set to visible."
        },
        "signature": "view_set_visible(view_port)",
        "function": "view_set_visible",
        "documentation": "This function can be used to set the visibility of the given view port. The function takes the view port index (from 0 to 7) and a boolean true if it is visible and false if it is not.",
        "return": "N/A"
    },
    "ds_map_replace_list": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            },
            {
                "label": "key",
                "documentation": "The key to replace."
            },
            {
                "label": "value",
                "documentation": "The id of the ds_list to use to replace the one previously stored in the given key."
            }
        ],
        "example": {
            "code": "var j_list = ds_list_create();<br> ds_list_add(j_list, health);<br> ds_list_add(j_list, lives);<br> ds_list_add(j_list, score);<br> ds_map_replace_list(j_map, \"list\", j_list);<br> var j = json_encode(j_map);<br> ds_list_destroy(j_list);<br>",
            "description": "The above code will create a ds_list and populate it with the values of various global variables before replacing a previously stored list in the ds_map \"j_map\"."
        },
        "signature": "ds_map_replace_list(id, key, value)",
        "function": "ds_map_replace_list",
        "documentation": "With this function you can replace a [ds_list](../ds%20lists/index.html) that has been stored in the given \"key\" with another list that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using [json_encode](../../file%20handling/json_encode.html) and should only be used in conjunction with that functionality.",
        "return": " N/A"
    },
    "physics_joint_pulley_create": {
        "parameters": [
            {
                "label": " inst1",
                "documentation": "The first instance to connect with the joint"
            },
            {
                "label": " inst2",
                "documentation": "The second instance to connect with the joint"
            },
            {
                "label": " w_anchor1_x",
                "documentation": "The x coordinate where the first part of joint is anchored, within the game world"
            },
            {
                "label": " w_anchor1_y",
                "documentation": "The y coordinate where the first part of the joint is anchored, within the game world"
            },
            {
                "label": " w_anchor2_x",
                "documentation": "The x coordinate where the second part of the joint is anchored, within the game world"
            },
            {
                "label": " w_anchor2_y",
                "documentation": "The y coordinate where the second part of the joint is anchored, within the game world"
            },
            {
                "label": " l_anchor1_x",
                "documentation": "The local x coordinate where joint 1 is anchored to the first instance"
            },
            {
                "label": " l_anchor1_y",
                "documentation": "The local y coordinate where joint 1 is anchored to the first instance"
            },
            {
                "label": " l_anchor2_x",
                "documentation": "The local x coordinate where joint 2 is anchored to the second instance"
            },
            {
                "label": " l_anchor2_y",
                "documentation": "The local y coordinate where joint 2 is anchored to the second instance"
            },
            {
                "label": " ratio",
                "documentation": "Set the velocity ratio between two instances"
            },
            {
                "label": " col",
                "documentation": "Whether the two instances can collide (true) or not (false)"
            }
        ],
        "example": {
            "code": "var t_fix, inst1, inst2;<br> t_fix = physics_fixture_create();<br> physics_fixture_set_circle_shape(t_fix, 20);<br> inst1 = instance_create_layer(150, room_height - 90, \"Instances\", obj_Block);<br> inst2 = instance_create_layer(300, room_height - 90, \"Instances\", obj_block);<br> physics_fixture_bind(t_fix, inst1);<br> physics_fixture_bind(t_fix, inst2);<br> physics_joint_pulley_create(inst1, inst2, 150, room_height - 140, 300, room_height - 140, 0, 0, 0, 0, 2, 0);<br> physics_fixture_delete(t_fix);<br>",
            "description": ""
        },
        "signature": "physics_joint_pulley_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, l_anchor1_x, l_anchor1_y, l_anchor2_x, l_anchor2_y, ratio, max_len1, max_len2, col)",
        "function": "physics_joint_pulley_create",
        "documentation": "The pulley joint is used to connect two instances within the physics world in such a way that moving one will directly influence the movement of the other. These joints are first anchored in the world space at two points, each one connected to an instance at its center of mass. This can be changed by setting the local anchor x/y coordinates relative to the origin of the instance, meaning that the actual connection from the instance to the physics world anchor point can be offset somewhere other than its origin. The following image illustrates this:  \n  \n![](images/pulley_joint_image.png)",
        "return": " index of the joint"
    },
    "view_set_surface_id": {
        "parameters": [
            {
                "label": "view_port",
                "documentation": "The view port to target (0 - 7)"
            },
            {
                "label": "surf",
                "documentation": "Surface to set."
            }
        ],
        "example": {
            "code": "if view_get_surface_id(0) == -1<br> &nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;view_set_surface_id(0, global.vSurf);<br> &nbsp;&nbsp;&nbsp;}<br>",
            "description": ""
        },
        "signature": "view_set_surface_id(view_port, surf)",
        "function": "view_set_surface_id",
        "documentation": "With this variable you can set the contents of a view port to draw to a surface. When working with surfaces, it is often required that capture the _whole_ visible region of the screen to the surface, and so you would assign it to a view port using this function. This means that everything that is shown in the chosen port view will now be drawn to the assigned surface and the contents of that view port will no longer be displayed, meaning that you will need to either:",
        "return": "Real"
    },
    "ds_map_find_value": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            },
            {
                "label": "key",
                "documentation": "The key to find."
            }
        ],
        "example": {
            "code": "amount = ds_map_find_value(inventory, \"food\");",
            "description": "The above code will get the value of the key \"food\" and store it in the variable \"amount\"."
        },
        "signature": "ds_map_find_value(id, key)",
        "function": "ds_map_find_value",
        "documentation": "With this function you can get the value from a specified key. The input values of the function are the (previously created) ds_map to use and the key to check for.  \n  \n_**NOTE:** If no such key exists then the function will return <undefined>. You should always check this using the [is_undefined()](../../../3_gml_overview/checking_data_types/is_undefined.html) function._",
        "return": " Real, string or undefined"
    },
    "ds_map_set": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            },
            {
                "label": "key",
                "documentation": "The key to set."
            },
            {
                "label": "value",
                "documentation": "The value to set the key to."
            }
        ],
        "example": {
            "code": "if is_undefined(ds_map_find_value(map, \"score\"))<br> &nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;ds_map_set(map, \"score\", 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br>",
            "description": "N/A (undocumented)"
        },
        "signature": "ds_map_set(id, key, value)",
        "function": "ds_map_set",
        "documentation": "With this function you can set the value of a key within a given DS map. You supply the DS map ID value (as returned by the function [ds\\_map\\_create()](ds_map_create.html), then give the key you want to set and the value to set it to. Keys can be integers or strings, and if the given key does not exist then it will be created for you. This function is the same as using the [DS map accessor](../../../3_gml_overview/13_accessors.html) to set/create a map key/value pair.",
        "return": "N/A"
    },
    "ds_map_add_list": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the map to use."
            },
            {
                "label": "key",
                "documentation": "The key for the added list."
            },
            {
                "label": "value",
                "documentation": "The id of the list to add."
            }
        ],
        "example": {
            "code": "var j_list = ds_list_create();<br> ds_list_add(j_list, health);<br> ds_list_add(j_list, lives);<br> ds_list_add(j_list, score);<br> var j_map = ds_map_create();<br> ds_map_add_list(j_map, \"list\", j_list);<br> var j = json_encode(j_map);<br> ds_map_destroy(j_map);<br>",
            "description": "The above code will create a list and populate it with the various values of global variables. This list is then \"nested\" within a ds_map, and the map is then encoded into a JSON string, before the map is destroyed, removing it, and any lists it contains, from memory."
        },
        "signature": "ds_map_add_list(id, key, value)",
        "function": "ds_map_add_list",
        "documentation": "With this function you can assign a (previously created) [ds_list](../ds%20lists/index.html) to a key within the given ds_map. This function is designed for creating JSON compatible maps which you would then encode using [json_encode](../../file%20handling/json_encode.html) and should only be used in conjunction with that functionality. If a ds_map has a list added in this way, destroying the parent map will also destroy the contained lists and free their memory.",
        "return": " N/A"
    },
    "ds_map_replace_map": {
        "parameters": [
            {
                "label": "id",
                "documentation": "The id of the ds_map to use."
            },
            {
                "label": "key",
                "documentation": "The key to replace."
            },
            {
                "label": "value",
                "documentation": "The id of the ds_map to use to replace the one previously stored in the given key."
            }
        ],
        "example": {
            "code": "var temp_map = ds_map_create();<br> ds_map_add_list(temp_map, \"list\", j_list);<br> ds_map_add(temp_map, \"array\", j_array);<br> ds_map_replace_map(j_map, \"maps\", temp_map);<br> var j = json_encode(j_map);<br> ds_map_destroy(temp_map);<br>",
            "description": "The above code will create a ds_map and populate it with an array and a ds_list before replacing a previously stored map in the ds_map \"j_map\"."
        },
        "signature": "ds_map_replace_map(id, key, value)",
        "function": "ds_map_replace_map",
        "documentation": "With this function you can replace a ds_map that has been stored in the given \"key\" with another map that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using [json_encode](../../file%20handling/json_encode.html) and should only be used in conjunction with that functionality.",
        "return": " N/A"
    }
}